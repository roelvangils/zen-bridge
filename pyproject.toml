[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "zen-bridge"
version = "1.0.0"
description = "Execute JavaScript in your browser from the command line"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Roel van Gils", email = "roel@example.com"}
]
keywords = ["browser", "automation", "javascript", "cli", "development-tools"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = [
    "click>=8.1.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.5.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "playwright>=1.40.0",
    # Type checking
    "mypy>=1.7.0",
    "types-requests>=2.31.0",
    # Linting and formatting
    "ruff>=0.1.6",
    # Pre-commit hooks
    "pre-commit>=3.5.0",
    # Async file I/O (for Phase 2)
    "aiofiles>=23.2.0",
]

[project.urls]
Homepage = "https://github.com/roelvangils/zen-bridge"
Repository = "https://github.com/roelvangils/zen-bridge"
Issues = "https://github.com/roelvangils/zen-bridge/issues"

[project.scripts]
zen = "zen.cli:main"

[tool.setuptools]
packages = ["zen"]
include-package-data = true

[tool.setuptools.package-data]
zen = ["scripts/*.js", "templates/*"]

# Ruff configuration - Linting and formatting
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["zen", "tests"]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "RUF",   # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long (handled by formatter)
]

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["zen"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports OK in __init__.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# MyPy configuration - Type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start permissive, will enable in Phase 1
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true
strict_equality = true

# Strict mode (to be enabled in Phase 1)
# disallow_untyped_defs = true
# disallow_any_generics = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--strict-markers",
    "--cov=zen",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests (fast, no I/O)",
    "integration: Integration tests (requires server)",
    "e2e: End-to-end tests (requires browser)",
    "slow: Slow tests (may take >1s)",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["zen"]
omit = [
    "tests/*",
    "zen/__pycache__/*",
    "*/__pycache__/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
